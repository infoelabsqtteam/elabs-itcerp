<?php

namespace App;
use DB;
use Illuminate\Database\Eloquent\Model;

class Report extends Model
{
	    /*************************
	    * get report details from order_report_details table
	    *************************/
	    public function getOrderReportDetails($report_id) {
			return DB::table('order_report_details')->where('report_id','=',$report_id)->first();
	    }

	    /*************************
	    *Generating Report Number
	    *Format : Prefix-DepartmentName-YYMMDDSERIALNo
	    *************************/
	    function generateReportNumber($currentDate,$productCategoryId,$divisionId){

			if(!empty($currentDate) && !empty($productCategoryId) && !empty($divisionId)){

				    $reportDay   = date('d',strtotime($currentDate));
				    $reportMonth = date('m',strtotime($currentDate));
				    $reportYear  = date('Y',strtotime($currentDate));
				    $reportDYear = date('y',strtotime($currentDate));

				    //Getting Section Name
				    $productCategoryData = DB::table('product_categories')->where('product_categories.p_category_id',$productCategoryId)->first();
				    $sectionName         = !empty($productCategoryData->p_category_name) ? substr($productCategoryData->p_category_name,0,1) : 'F';

				    //In case of Pharma Deparment,order number will be generated according to current month and current day
				    if($productCategoryId == '2'){
						$maxReportData = DB::table('order_report_details')
							    ->join('order_master','order_report_details.report_id','order_master.order_id')
							    ->select('order_report_details.report_id','order_report_details.report_no')
							    ->where('order_master.product_category_id',$productCategoryId)
							    ->whereDay('order_report_details.report_date',$reportDay)
							    ->whereMonth('order_report_details.report_date',$reportMonth)
							    ->whereYear('order_report_details.report_date',$reportYear)
							    ->where('order_master.division_id',$divisionId)
							    ->orderBy('order_report_details.report_no','DESC')
							    ->limit(1)
							    ->first();

				    }else{
						$maxReportData = DB::table('order_report_details')
							    ->join('order_master','order_report_details.report_id','order_master.order_id')
							    ->select('order_report_details.order_report_id','order_report_details.report_id','order_report_details.report_no')
							    ->where('order_master.product_category_id',$productCategoryId)
							    ->whereMonth('order_report_details.report_date',$reportMonth)
							    ->whereYear('order_report_details.report_date',$reportYear)
							    ->where('order_master.division_id',$divisionId)
							    ->orderBy('order_report_details.report_no','DESC')
							    ->limit(1)
							    ->first();
				    }

				    //getting Max Serial Number
				    $maxSerialNo = !empty($maxReportData->report_no) ? substr($maxReportData->report_no,10) + 1: '0001';
				    $maxSerialNo = $maxSerialNo != '9999' ? str_pad($maxSerialNo, 4, '0', STR_PAD_LEFT) : '0001';

				    //Combing all to get unique order number
				    $reportNumber = REPORT_PREFIX.$sectionName.'-'.$reportDYear.$reportMonth.$reportDay.$maxSerialNo;

				    //echo '<pre>';print_r($reportNumber);die;
				    return $reportNumber;
			}
	    }

	    /*************************
	    *Generating Report Number
	    *Save report number
	    *************************/
	    function updateGenerateReportNumberDate($orderId,$reportDate,$backReportDate=NULL){
			if(!empty($orderId)){
				    $dataSave   	= $reportData = array();
				    $orderData 		= DB::table('order_master')->where('order_master.order_id','=',$orderId)->first();
				    $reportDetailData 	= DB::table('order_report_details')->where('order_report_details.report_id','=',$orderId)->first();
				    if(!empty($orderData->order_id)){
						if(empty($reportDetailData->report_no) && empty($reportDetailData->report_date)){
							    $reportData['report_no']   = $this->generateReportNumber($reportDate,$orderData->product_category_id,$orderData->division_id);
							    $reportData['report_date'] = $reportDate;
							    return DB::table('order_report_details')->where('report_id',$orderId)->update($reportData);
						}else if(!empty($backReportDate) && !empty($reportDetailData->report_no) && !empty($reportDetailData->report_date)){
							    $reportData['report_no']   = $this->generateReportNumber($reportDate,$orderData->product_category_id,$orderData->division_id);
							    $reportData['report_date'] = $reportDate;
							    return DB::table('order_report_details')->where('report_id',$orderId)->update($reportData);
						}
				    }
			}
			return false;
	    }

	    /*************************
	    *Update order status
	    *while saving a report
	    *************************/
	    public function updateReportOrderStatusLog($orderId){
		    global $order,$report,$models,$invoice,$mail,$numbersToWord;
		    $reportData = $order->getOrder($orderId);
		    if($reportData){
			    !empty($reportData->status) && $reportData->status == '7' ? $order->updateOrderStausLog($orderId,'8') : $order->updateOrderLog($orderId,'8');
			    return true;
		    }
		    return false;
	    }

	    /*************************
	    * Update analyst/tester job/order assigned status
	    *
	    *************************/
	    public function updateAnalystJobAssignedStatus($order_id,$order_parameter_id,$employee_id){
			if(defined('IS_TESTER') && IS_TESTER){
				$whereCondition = array('schedulings.order_id' => $order_id,'schedulings.order_parameter_id' => $order_parameter_id,'schedulings.employee_id' => $employee_id);
			}else{
				$whereCondition = array('schedulings.order_id' => $order_id,'schedulings.order_parameter_id' => $order_parameter_id);
			}
			if(DB::table('schedulings')->where($whereCondition)->update(['status' => '3' ,'notes' => 'Completed', 'completed_at' => defined('CURRENTDATETIME') ? CURRENTDATETIME : date('Y-m-d H:i:s')])){
				    return true;
			}else{
				    return false;
			}
	    }

	    /*************************
	    * Get user whose task status is uncompleted
	    *
	    *************************/
	    public function getUserRoleIdTaskUncompleted($role_ids){
		    if(!empty($role_ids)){
			    return DB::table('order_status')
			    ->whereIn('order_status.role_id',$role_ids)
			    ->pluck('order_status.order_status_id')
			    ->toArray();
		    }
	    }

	    /*************************
	    * Get user whose task status is completed
	    *
	    *************************/
	    public function getUserOrderIdTaskCompleted($role_ids,$user_id){
			if(!empty($role_ids) && !empty($user_id)){
				    return DB::table('order_status')
						->join('order_process_log','order_process_log.opl_order_status_id','order_status.order_status_id')
						->whereIn('order_status.role_id',$role_ids)
						->where('order_process_log.opl_user_id',$user_id)
						->groupBy('order_process_log.opl_order_id')
						->pluck('order_process_log.opl_order_id')
						->toArray();
			}
	    }

	    /*************************
	    * Get user whose task status is completed
	    * updated on 19-JAN-2018
	    *************************/
	    public function getOrderStageWithOrWithoutAmendment($order_id){

			global $order,$report,$models,$invoice,$mail,$numbersToWord;
	    
			$reportData = $order->getOrder($order_id);			
			if(!empty($reportData->status) && $reportData->status == '7'){
	    
				    $orderSampleType  = !empty($reportData->order_sample_type) && in_array($reportData->order_sample_type,array('1','2')) ? true : false;
	    			    $amendedOrderData = DB::table('order_process_log')->where('order_process_log.opl_amend_status','1')->where('order_process_log.opl_order_id',$order_id)->orderBy('order_process_log.opl_id','DESC')->limit(1)->first();
				    $checkInvoice     =  DB::table('order_process_log')->join('invoice_hdr_detail','invoice_hdr_detail.order_id','=','order_process_log.opl_order_id')->where('order_process_log.opl_order_id', '=', $order_id)->where('order_process_log.opl_order_status_id','8')->where('order_process_log.opl_amend_status','1')->where('invoice_hdr_detail.invoice_hdr_status','1')->whereNotNull('order_process_log.opl_user_id')->first();
				    
				    if(!empty($amendedOrderData)){
						if(empty($checkInvoice) && empty($orderSampleType)){
							    return array('7','8');	
						}else{
							    return array('7','9');		
						}
				    }else{
						return $orderSampleType ? array('7','9') : array('7','8');
				    }				    
			}
			return array(0,0);
	    }
	    
	    /*************************
	    *Update Report Type On Report Generation
	    *Praveen Singh
	    *Date : 10-01-2018
	    *************************/
	    function updateReportTypeOnReportGeneration($orderId,$reportType){
			$reportDetailData = DB::table('order_report_details')->where('order_report_details.report_id','=',$orderId)->first();
			return !empty($reportDetailData) && !empty($reportType) ? DB::table('order_report_details')->where('order_report_details.report_id',$orderId)->update(['order_report_details.report_type' => $reportType]) : false;
	    }

	    /*************************
	    *Get all parent product categories
	    *Date : 06-02-2018
	    *************************/
	    public function getParentProductCategories(){
			$colArr =   array();
			$catData = DB::table('product_categories')->where('product_categories.parent_id','0');
			if(empty($colArr)){
				$data =  $catData->pluck('p_category_id')->toArray();
			}else{
				$data = $catData->select('p_category_id')->get();
			}
			return !empty($data) ? $data : array();
	    }

	    /*************************
	    *Checking Back Date Booking Allowed in Pharma Department
	    *Date : 06-02-2018
	    *************************/
	    public function checkBackDateBookingAllowed($orderList){
			$orderDate = strtotime(date(DATEFORMAT,strtotime($orderList->order_date)));
			$bookingDate = strtotime(date(DATEFORMAT,strtotime($orderList->booking_date)));
			return $orderList->product_category_id == '2' && $orderDate != $bookingDate ? 1 : 0;
	    }

	    /*************************
	    *Checking Order Date And Report Data Validation
	    *Date : 06-02-2018
	    *************************/
	    public function checkOrderDateAndReportDataValidation($orderId,$reportDate){
			$orderData = DB::table('order_master')->where('order_master.order_id','=',$orderId)->first();
			if(!empty($orderData->order_date)){
				    $orderDate  = strtotime(date(DATEFORMAT,strtotime($orderData->order_date)));
				    $reportDate = strtotime(date(DATEFORMAT,strtotime($reportDate)));
				    return $reportDate >= $orderDate ? '1' : '0';
			}else{
				    return false;
			}
	    }

	    /****
	    ***** Check quality standard of report
	    *****/
	    public function getStandardQualityStampOrNot($orderDetail){
			$greenStandardQualityCustomers =  array('740','750');
			$order_id = !empty($orderDetail->order_id) ? $orderDetail->order_id :'0';
			if(!empty($orderDetail->order_report_id) && $orderDetail->customer_type == '1' && $orderDetail->product_category_id == '2'){
				    $reportDetail = DB::table('order_report_details')
						->join('order_report_note_remark_default','order_report_note_remark_default.remark_name','=','order_report_details.remark_value')
						->whereIn('order_report_note_remark_default.is_display_stamp', [1, 2])
						->whereColumn('order_report_note_remark_default.remark_name','order_report_details.remark_value')
						->where('order_report_details.report_id','=',$order_id)
						->where('order_report_note_remark_default.product_category_id','=',$orderDetail->product_category_id)
						->select('order_report_note_remark_default.is_display_stamp')
						->first();
				    if(!empty($reportDetail)){
					 $reportDetail->stampType =  in_array($orderDetail->customer_id,$greenStandardQualityCustomers) ?  true :false;	
				    }
				    return $reportDetail;
			}else{
				    return false;
			}
	    }
	    
	    /*************************
	    *Saving Microbilogical Name other than Pharma Department
	    *Date : 02-05-2018
	    *Created By:Praveen Singh
	    *************************/
	    public function updateMicroBiologicalName($postedData,$productCategoryId){
			
			global $order,$models;
			
			if(!empty($postedData['report_id']) && !empty($productCategoryId) && $productCategoryId != '2'){				    
				    $isOrderBookingAmended	 = $order->isBookingOrderAmendedOrNot($postedData['report_id']);
				    $orderData 			 = DB::table('order_master')->select('order_master.order_id','order_master.division_id')->where('order_master.order_id','=',$postedData['report_id'])->first();
				    $orderReportDetail           = DB::table('order_report_details')->where('order_report_details.report_id','=',$postedData['report_id'])->whereNull('order_report_details.report_microbiological_name')->first();
				    $hasMicrobiologicalEquipment = DB::table('order_parameters_detail')->where('order_parameters_detail.equipment_type_id','22')->where('order_parameters_detail.order_id','=',$postedData['report_id'])->first();
				    if(empty($isOrderBookingAmended)){
						if(!empty($orderReportDetail) && !empty($hasMicrobiologicalEquipment)){
							    $microbiologistData = DB::table('users')->join('role_user', 'users.id', '=', 'role_user.user_id')->where('role_user.role_id','15')->where('users.division_id',$orderData->division_id)->first();
							    if(!empty($microbiologistData->name)){
									$reportMicrobiologicalSign = strtolower(preg_replace('/[_]+/','_',preg_replace("/[^a-zA-Z]/", "_", $microbiologistData->name)).'.png');
									return DB::table('order_report_details')->where('order_report_details.report_id',$postedData['report_id'])->update(['order_report_details.report_microbiological_name' => $microbiologistData->name, 'order_report_details.report_microbiological_sign' => $reportMicrobiologicalSign]);    
							    }else{
								    return false;    
							    }
						}
				    }
			}
			return true;
	    }
	    
	    /*************************
	    *Saving Microbilogical Name other than Pharma Department
	    *Date : 02-05-2018
	    *Created By:Praveen Singh
	    *************************/
	    public function updateSaveTestReportHeaderFooterContent($reportId){
			
			global $order,$models;
			
			if(!empty($reportId)){
				    $orderData         = DB::table('order_master')->select('order_master.order_id','order_master.division_id','order_master.product_category_id')->where('order_master.order_id','=',$reportId)->first();
				    $orderReportHeader = DB::table('order_report_details')->where('order_report_details.report_id','=',$reportId)->whereNull('order_report_details.header_content')->first();
				    $orderReportFooter = DB::table('order_report_details')->where('order_report_details.report_id','=',$reportId)->whereNull('order_report_details.footer_content')->first();
				    if(!empty($orderReportHeader) && !empty($orderReportFooter)){
						list($header_content,$footer_content) = $order->getDynamicHeaderFooterTemplate('1',$orderData->division_id,$orderData->product_category_id);
						if($header_content && $footer_content){
							    return DB::table('order_report_details')->where('order_report_details.report_id',$reportId)->update(['order_report_details.header_content' => $header_content, 'order_report_details.footer_content' => $footer_content]);    
						}else{
							    return false;	    
						}						
				    }else{
						return true;	
				    }				    
			}			
			return false;
	    }
	    
	    /*************************
	    *Updating Report Reviewing Date
	    *Created on:12-June-2018
	    *Created By:Praveen Singh
	    *************************/
	    function updateReportReviewingDate($formData,$reviewingDate){
			
			global $order,$report,$models;
			
			if(!empty($formData['report_id']) && !empty($reviewingDate)){
				    $orderData 	= DB::table('order_master')->where('order_master.order_id','=',$formData['report_id'])->first();
				    $reportData = DB::table('order_report_details')->where('order_report_details.report_id','=',$formData['report_id'])->first();
				    if(!empty($orderData->order_no) && !empty($reportData->report_no)){
						//CASE 1:Review Date Updated if Order is not amended
						//CASE 2:Review Date Updated if Order is amended and checkbox is checked
						if(!empty($order->isBookingOrderAmendedOrNot($formData['report_id']))){
							    $flag = !empty($formData['is_amended_no']) || !empty($reportData->is_amended_no) ? '1' : '0';
						}else{
							    $flag = '1';
						}						
						if($flag){
							    return DB::table('order_report_details')->where('order_report_details.report_id',$formData['report_id'])->update(['order_report_details.reviewing_date' => $reviewingDate,'order_report_details.reviewed_by' => USERID]);
						}					
				    }
			}
			return false;
	    }
	    
	    /*************************
	    *Updating Report Finalizing Date Date
	    *Created on:12-June-2018
	    *Created By:Praveen Singh
	    *************************/
	    function updateReportFinalizingDate($formData,$finalizingDate){
			
			global $order,$report,$models;
			
			if(!empty($formData['order_id']) && !empty($finalizingDate)){
				    $orderData 	= DB::table('order_master')->where('order_master.order_id','=',$formData['order_id'])->first();
				    $reportData = DB::table('order_report_details')->where('order_report_details.report_id','=',$formData['order_id'])->first();
				    if(!empty($orderData->order_no) && !empty($reportData->report_no)){
						//CASE 1:Finalizing Date Updated if Order is not amended
						//CASE 2:Finalizing Date Updated if Order is amended with prefix 'A'
						if(!empty($order->isBookingOrderAmendedOrNot($formData['order_id']))){
							    $flag = !empty($reportData->is_amended_no) ? '1' : '0'; 
						}else{
							    $flag = '1';
						}
						if($flag){
							    return DB::table('order_report_details')->where('order_report_details.report_id',$formData['order_id'])->update(['order_report_details.finalizing_date' => $finalizingDate,'order_report_details.finalized_by' => USERID]);
						}					
				    }
			}
			return false;
	    }
	    
	    /*************************
	    *Updating Report Approving Date Date
	    *Created on:12-June-2018
	    *Created By:Praveen Singh
	    *************************/
	    function updateReportApprovingDate($reportId,$approvingDate){
			
			global $order,$report,$models;
			
			if(!empty($reportId) && !empty($approvingDate)){
				    $orderData 	= DB::table('order_master')->where('order_master.order_id','=',$reportId)->first();
				    $reportData = DB::table('order_report_details')->where('order_report_details.report_id','=',$reportId)->first();
				    if(!empty($orderData->order_no) && !empty($reportData->report_no)){
						//CASE 1:Approving Date Updated if Order is not amended
						//CASE 2:Approving Date Updated if Order is amended with prefix 'A'
						if(!empty($order->isBookingOrderAmendedOrNot($reportId))){
							    $flag = !empty($reportData->is_amended_no) ? '1' : '0'; 
						}else{
							    $flag = '1';
						}						
						if($flag){
							    return DB::table('order_report_details')->where('order_report_details.report_id',$reportId)->update(['order_report_details.approving_date' => $approvingDate,'order_report_details.approved_by' => USERID]);
						}					
				    }
			}
			return false;
	    }
	    
	    /**
	     *Update last confirm date of the order by section incharge
	     * in order reports table
	     ***/
	    public function updateReportInchargeReviewingDate($order_id){
			$inchargeReviewingDate = DB::table('order_incharge_dtl')->where('order_id','=',$order_id)->select('oid_confirm_date')->orderBy('oid_confirm_date','DESC')->first();
			if(!empty($inchargeReviewingDate->oid_confirm_date)){
				    //Updating oipd_status of order_incharge_process_dtl to 2
				    DB::table('order_incharge_process_dtl')->where('oipd_order_id',$order_id)->update(['order_incharge_process_dtl.oipd_status' => '2']);
				    
				    //Updating incharge_reviewing_date in order Master
				    return DB::table('order_master')->where('order_id','=',$order_id)->update(['incharge_reviewing_date' => $inchargeReviewingDate->oid_confirm_date]);
			}else{
				    return false;
			}
	    }

	    /*************************
	    *quality Stamp On Web View
	    *Created on:25-June-2018
	    *Created By:
	    *************************/
	    function qualityStampOnWebView($orderList){
			$checkReportQuality = $this->getStandardQualityStampOrNot($orderList);
			if(!empty($checkReportQuality)){
			    foreach($checkReportQuality as $key=>$value){
				 $orderList->$key = $value;
			    }	
			}
			return $orderList;
	    }
	    
	    /****************************************************
	    *get Summary Statistics Log
	    *Created on:17-Aug-2018
	    *Created By:Praveen Singh
	    *****************************************************/
	    public function summaryStatistics($role_ids,$userWiseRoles,$user_id,$division_id,$department_ids,$equipment_type_ids){
			
			global $order,$report,$models;
			
			$returnData = array();
			
			if(empty($userWiseRoles)){
				    $userWiseRolesData = DB::table('order_status')
						->join('roles', 'roles.id', '=', 'order_status.role_id')
						->select('order_status.*','roles.name as role_name')
						->where('order_status.status','1')
						->whereNotIn('order_status.order_status_id',array('1','4','10','11'))
						->get();
				    if(!empty($userWiseRolesData)){
						foreach($userWiseRolesData as $value){
							    if($value->order_status_id == '9'){ 		//Dispatcher
									$dispatchingOrderDaily = DB::table('order_master')
										    ->select('order_master.order_id','order_master.order_no')
										    ->join('customer_master','customer_master.customer_id','order_master.customer_id')
										    ->join('customer_billing_types','customer_billing_types.billing_type_id','order_master.billing_type_id')
										    ->leftJoin('order_dispatch_dtl', function($join){
											$join->on('order_dispatch_dtl.order_id', '=', 'order_master.order_id');
											$join->where('order_dispatch_dtl.amend_status','0');
										    })
										    ->whereIn('order_master.status',array('8',$value->order_status_id))
										    ->where('order_master.billing_type_id','=','1')
										    ->whereNull('order_dispatch_dtl.order_id')
										    ->count();
												
									$dispatchingOrderMonthly = DB::table('order_master')
										    ->join('customer_master','customer_master.customer_id','order_master.customer_id')
										    ->join('customer_billing_types','customer_billing_types.billing_type_id','order_master.billing_type_id')
										    ->leftJoin('order_dispatch_dtl', function($join){
											$join->on('order_dispatch_dtl.order_id', '=', 'order_master.order_id');
											$join->where('order_dispatch_dtl.amend_status','0');
										    })
										    ->where('customer_master.billing_type','=','4')
										    ->whereIn('order_master.status',array('8',$value->order_status_id))
										    ->whereNull('order_dispatch_dtl.order_id')
										    ->count();
						
									$returnData[$value->order_status_name.'(Daily)']   = $dispatchingOrderDaily;
									$returnData[$value->order_status_name.'(Monthly)'] = $dispatchingOrderMonthly;
							    }else{
									$returnData[$value->order_status_name] = DB::table('order_master')->where('order_master.status',$value->order_status_id)->where('order_master.status','<>','10')->count();
							    }
						}
				    }
			}else{
				    $userWiseRolesData = DB::table('order_status')
							->join('roles', 'roles.id', '=', 'order_status.role_id')
							->select('order_status.*','roles.name as role_name')
							->where('order_status.status','1')
							->whereNotIn('order_status.order_status_id',array('1','10','11'))
							->whereIn('order_status.order_status_id',$userWiseRoles)
							->get();
				    if(!empty($userWiseRolesData)){
						foreach($userWiseRolesData as $value){
							    if($value->order_status_id == '3'){ 		//For Tester
									$returnData[$value->order_status_name] = count(DB::table('order_master')
										    ->join('schedulings','schedulings.order_id','order_master.order_id')
										    ->where('schedulings.employee_id','=',$user_id)
										    ->where('schedulings.status','<>','3')
										    ->where('order_master.status',$value->order_status_id)
										    ->where('order_master.division_id',$division_id)
										    ->whereIn('order_master.product_category_id',$department_ids)
										    ->groupBy('order_master.order_id')
										    ->get());
							    }else if($value->order_status_id == '4'){ 		//For Section Incharge
									$returnData[$value->order_status_name] = DB::table('order_master')
										    ->whereIn('order_master.status',array('3','4'))
										    ->where('order_master.division_id',$division_id)
										    ->whereIn('order_master.product_category_id',$department_ids)
										    ->whereIn('order_master.order_id',$report->getSectionInchargeOrderDetail($user_id,$equipment_type_ids))
										    ->count();
							    }else if($value->order_status_id == '9'){ //Dispatcher
					
									$dispatchingOrderDaily = DB::table('order_master')
												->select('order_master.order_id','order_master.order_no')
												->join('customer_master','customer_master.customer_id','order_master.customer_id')
												->join('customer_billing_types','customer_billing_types.billing_type_id','order_master.billing_type_id')
												->leftJoin('order_dispatch_dtl', function($join){
												    $join->on('order_dispatch_dtl.order_id', '=', 'order_master.order_id');
												    $join->where('order_dispatch_dtl.amend_status','0');
												})
												->where('order_master.billing_type_id','=','1')
												->whereIn('order_master.status',array('8',$value->order_status_id))
												->where('order_master.division_id',$division_id)
												->whereIn('order_master.product_category_id',$department_ids)
												->whereNull('order_dispatch_dtl.order_id')
												->count();
												
									$dispatchingOrderMonthly = DB::table('order_master')
										    ->select('order_master.order_id','order_master.order_no')
										    ->join('customer_master','customer_master.customer_id','order_master.customer_id')
										    ->join('customer_billing_types','customer_billing_types.billing_type_id','order_master.billing_type_id')
										    ->leftJoin('order_dispatch_dtl', function($join){
											$join->on('order_dispatch_dtl.order_id', '=', 'order_master.order_id');
											$join->where('order_dispatch_dtl.amend_status','0');
										    })
										    ->where('customer_master.billing_type','=','4')
										    ->whereIn('order_master.status',array('8',$value->order_status_id))
										    ->where('order_master.division_id',$division_id)
										    ->whereIn('order_master.product_category_id',$department_ids)
										    ->whereNull('order_dispatch_dtl.order_id')
										    ->count();
						
									$returnData[$value->order_status_name.'(Daily)']   = $dispatchingOrderDaily;
									$returnData[$value->order_status_name.'(Monthly)'] = $dispatchingOrderMonthly;
							    }else{
									$returnData[$value->order_status_name] = DB::table('order_master')->where('order_master.division_id',$division_id)->whereIn('order_master.product_category_id',$department_ids)->where('order_master.status',$value->order_status_id)->where('order_master.status','<>','10')->count();
							    }
						}
				    }
			}
			return $returnData;
	    }
	    
	    /***
	    *** check current status of incharge order
	    *** if 1 do not show coonfirm button again
	    *** if 0 show confirm button 
	    ***/
	    public function currentInchargeOrderStatus($order_id,$user_id){
			$confirmStatus = '';
			$inchargeStatusObj = DB::table('order_incharge_dtl')->where('order_incharge_dtl.order_id','=',$order_id);
			defined('IS_SECTION_INCHARGE') && IS_SECTION_INCHARGE ? $inchargeStatusObj->where('order_incharge_dtl.oid_employee_id','=',$user_id) : '';
			$inchargeStatus = $inchargeStatusObj->where('order_incharge_dtl.oid_status','0')->whereNull('order_incharge_dtl.oid_confirm_by')->first();
			return !empty($inchargeStatus) ? '1' : '0';
	    }
	    
	    /**
	    * Updating Order Amended Detail
	    * Date : 16-July-2018
	    * Author : Praveen Singh
	    * @param  \Illuminate\Http\Request  $request
	    * @return \Illuminate\Http\Response
	    */
	    function updateOrderAmendDetail($orderId,$currentOrderStage){
			if(!empty($orderId) && !empty($currentOrderStage)){
				    
				    //Updating Log Detail
				    DB::table('order_process_log')->where('order_process_log.opl_order_id','=',$orderId)->where('order_process_log.opl_order_status_id','>','4')->update(['order_process_log.opl_amended_by' => USERID, 'order_process_log.opl_amend_status' => '1']);
				    
				    //Updating Order Dispatch Detail	
				    DB::table('order_dispatch_dtl')->where('order_id','=',$orderId)->update(['amend_status' => '1']);
				    
				    //Saving Order Amend Detail
				    $dataSave 			 	= array();
				    $dataSave['oad_order_id'] 	 	= $orderId;
				    $dataSave['oad_amended_stage'] 	= $currentOrderStage;
				    $dataSave['oad_amended_date'] 	= CURRENTDATETIME;
				    $dataSave['oad_amended_by'] 	= USERID;
				    return !empty($dataSave) && DB::table('order_amended_dtl')->insert($dataSave) ? true : false;
			}
			return false;
	    }
	    
	    /*************************
	    *Saving od data in order_incharge_process_dtl table
	    *Created on:02-Aug-2018
	    *Created By:Praveen Singh
	    *************************/
	    function getErrorParametersDetail($orderId){
			
			global $order,$models;

			$error_parameter_array = array();
			
			$error_parameter_ids = DB::table('order_process_log')
				    ->where('order_process_log.opl_order_id',$orderId)
				    ->whereNotNull('order_process_log.error_parameter_ids')
				    ->select('order_process_log.error_parameter_ids','order_process_log.note')
				    ->where('order_process_log.opl_order_status_id','3')
				    ->get();			
			if(!empty($error_parameter_ids)){
				    foreach($error_parameter_ids as $key => $error_parameter_str){
						$error_parameter_ids_arr = explode(',',$error_parameter_str->error_parameter_ids);
						foreach($error_parameter_ids_arr as $key => $error_parameter){
							    $error_parameter_array[$error_parameter] = trim(strip_tags($error_parameter_str->note));
						}
						
				    }
			}
			return $error_parameter_array;
	    }
	    
	    /**********************************************************
	    *reset Section Incharge Visibility
	    *Created on:02-Aug-2018
	    *Created By:Praveen Singh
	    **********************************************************/
	    function resetOrderSectionInchargeDetail($orderId,$analysisArr){
			if(!empty($orderId) && !empty($analysisArr) && is_array($analysisArr)){
				    $equipmentTypeIds = DB::table('order_parameters_detail')
						->where('order_id',$orderId)
						->whereNotNull('order_parameters_detail.equipment_type_id')
						->whereIn('order_parameters_detail.analysis_id',$analysisArr)
						->groupBy('order_parameters_detail.equipment_type_id')
						->pluck('order_parameters_detail.equipment_type_id')
						->all();
				    $dataSave = array('order_incharge_dtl.oid_confirm_date' => NULL,'order_incharge_dtl.oid_confirm_by' => NULL,'order_incharge_dtl.oid_status' => '0');
				    return !empty($equipmentTypeIds) ? DB::table('order_incharge_dtl')->where('order_incharge_dtl.order_id','=',$orderId)->whereIn('order_incharge_dtl.oid_equipment_type_id',$equipmentTypeIds)->update($dataSave) : false;
			}
	    }
	    
	    /*********************************************************
	    *Saving od data in order_incharge_process_dtl table
	    *Created on:02-Aug-2018
	    *Created By:Praveen Singh
	    ************************************************************/
	    function updateOrderInchargeProcessDetail($formData){			
			if(!empty($formData['report_id']) && !empty($formData['analysis_id']) && is_array($formData['analysis_id'])){
				    if(!empty($formData['oipd_incharge_id']) && defined('IS_SECTION_INCHARGE') && !empty(IS_SECTION_INCHARGE)){ 			//In case of Section Incharge
						foreach($formData['analysis_id'] as $key => $analysisId){
							    $dataSave = array();
							    $dataSave['oipd_order_id'] 		= $formData['report_id'];
							    $dataSave['oipd_analysis_id'] 	= $analysisId;
							    $dataSave['oipd_incharge_id']	= $formData['oipd_incharge_id'];
							    $dataSave['oipd_user_id'] 		= USERID;
							    $dataSave['oipd_date'] 		= CURRENTDATETIME;
							    $dataSave['oipd_status'] 		= '1';
							    DB::table('order_incharge_process_dtl')->insertGetId($dataSave);
						}
						//Updating Order Incharge Detail
						$dataSave 	  = array('order_incharge_dtl.oid_confirm_date' => NULL,'order_incharge_dtl.oid_confirm_by' => NULL,'order_incharge_dtl.oid_status' => '0');
						$equipmentTypeIds = DB::table('order_parameters_detail')->where('order_id',$formData['report_id'])->whereNotNull('order_parameters_detail.equipment_type_id')->whereIn('order_parameters_detail.analysis_id',$formData['analysis_id'])->groupBy('order_parameters_detail.equipment_type_id')->pluck('order_parameters_detail.equipment_type_id')->all();
						$orderInchargeDtl = DB::table('order_incharge_dtl')->where('order_incharge_dtl.order_id','=',$formData['report_id'])->where('order_incharge_dtl.oid_id',$formData['oipd_incharge_id'])->first();
						!empty($equipmentTypeIds) && !empty($orderInchargeDtl->oid_employee_id) ? DB::table('order_incharge_dtl')->where('order_incharge_dtl.order_id','=',$formData['report_id'])->where('order_incharge_dtl.oid_employee_id',$orderInchargeDtl->oid_employee_id)->whereIn('order_incharge_dtl.oid_equipment_type_id',$equipmentTypeIds)->update($dataSave) : '';
						return true;
				    }else{ 							//In case of Administrator
						//Updating Order Incharge Detail
						return $this->resetOrderSectionInchargeDetail($formData['report_id'],$formData['analysis_id']);
				    }
			} 
	    }
	    
	    /*************************
	    *Saving od data in order_incharge_process_dtl table
	    *Created on:02-Aug-2018
	    *Created By:Praveen Singh
	    *************************/
	    function updateNeedModifInOrderInchargeProcessDtl($orderId,$analysisIds){
			$orderInchargeIdData = DB::table('order_incharge_process_dtl')->where('order_incharge_process_dtl.oipd_order_id',$orderId)->whereIn('order_incharge_process_dtl.oipd_analysis_id',$analysisIds)->where('order_incharge_process_dtl.oipd_status','1')->get()->toArray();
			if(!empty($orderInchargeIdData)){
				    //Updating oipd_status of order_incharge_process_dtl to 2
				    return DB::table('order_incharge_process_dtl')->where('order_incharge_process_dtl.oipd_order_id',$orderId)->whereIn('order_incharge_process_dtl.oipd_analysis_id',$analysisIds)->update(['order_incharge_process_dtl.oipd_status' => '2']);
			}
	    }
	    
	    /*************************
	    *Saving od data in order_incharge_process_dtl table
	    *Created on:02-Aug-2018
	    *Created By:Praveen Singh
	    *************************/
	    function getSectionInchargeOrderDetail($user_id,$equipment_type_ids){
			$returnData = array();
			$orderDetail = DB::table('order_incharge_dtl')->select('order_id','oid_equipment_type_id')->where('order_incharge_dtl.oid_status','0')->where('order_incharge_dtl.oid_employee_id','=',$user_id)->whereIn('order_incharge_dtl.oid_equipment_type_id',$equipment_type_ids)->get()->toArray();
			if(!empty($orderDetail)){
				    $equipment_type_ids = DB::table('order_incharge_dtl')->where('order_incharge_dtl.oid_status','0')->where('order_incharge_dtl.oid_employee_id','=',$user_id)->whereIn('order_incharge_dtl.oid_equipment_type_id',$equipment_type_ids)->groupBy('order_incharge_dtl.oid_equipment_type_id')->pluck('order_incharge_dtl.oid_equipment_type_id')->all();
				    foreach($orderDetail as $key => $values){
						$checkUpdateOrderStatus = DB::table('order_parameters_detail')->where('order_parameters_detail.order_id',$values->order_id)->whereIn('order_parameters_detail.equipment_type_id',$equipment_type_ids)->whereNull('order_parameters_detail.test_result')->first();
						if(empty($checkUpdateOrderStatus))$returnData[$values->order_id] = $values->order_id;
				    }
			}
			//echo '<pre>';print_r($returnData);die;
			return array_values($returnData);
	    }
	    
	    /****************************************************
	    *validate Confirm/NeedModification Action By Section Incharge
	    *Created on:17-Aug-2018
	    *Created By:Praveen Singh
	    *****************************************************/
	    public function validateConfirmNeedModificationActionBySI($formData){
			
			$equipmentTypeIdArr                 = !empty($formData['equipment_type_id']) ? array_unique($formData['equipment_type_id']) : array();
			$orderId 	    		    = !empty($formData['report_id']) ? trim($formData['report_id']) : '0';
			$orderSectionInchargeIds 	    = DB::table('order_incharge_dtl')->where('order_incharge_dtl.order_id',$orderId)->whereIn('order_incharge_dtl.oid_equipment_type_id',$equipmentTypeIdArr)->pluck('order_incharge_dtl.oid_id')->all();
			$needModificationActionByAnySIOrNot = DB::table('order_incharge_process_dtl')->where('order_incharge_process_dtl.oipd_order_id',$orderId)->whereIn('order_incharge_process_dtl.oipd_incharge_id',$orderSectionInchargeIds)->where('order_incharge_process_dtl.oipd_status','1')->first();
			$confirmActionByAnySIOrNot 	    = DB::table('order_incharge_dtl')->where('order_incharge_dtl.order_id',$orderId)->whereIn('order_incharge_dtl.oid_equipment_type_id',$equipmentTypeIdArr)->whereNull('order_incharge_dtl.oid_confirm_by')->where('order_incharge_dtl.oid_status','=','0')->pluck('order_incharge_dtl.oid_id')->all();
			if(empty($needModificationActionByAnySIOrNot) && !empty($confirmActionByAnySIOrNot)){
				    return true;
			}else{
				    return false;
			}
	    }
	    
	    /****************************************************
	    *get Order Equipment Incharge Detail
	    *Created on:17-Aug-2018
	    *Created By:Praveen Singh
	    *****************************************************/
	    public function updateConfirmStatusOfSectionIncharge($formData,$user_id){
			
			global $order,$report,$models;
			
			$dataSave = array();
			
			$equipmentTypeIdArr = !empty($formData['equipment_type_id']) ? array_unique($formData['equipment_type_id']) : array();
			$orderId 	    = !empty($formData['report_id']) ? trim($formData['report_id']) : '0';
			
			if(!empty($orderId) && !empty($equipmentTypeIdArr) && is_array($equipmentTypeIdArr) && !empty($user_id)){
				    
				    //Updating Confirm Status of Section Incharge wrto Equipment Detail
				    $dataSave = array('order_incharge_dtl.oid_confirm_date' => CURRENTDATETIME,'order_incharge_dtl.oid_confirm_by' => $user_id,'order_incharge_dtl.oid_status' => '1');
				    DB::table('order_incharge_dtl')->where('order_incharge_dtl.order_id','=',$orderId)->whereNull('order_incharge_dtl.oid_confirm_by')->where('order_incharge_dtl.oid_status','=','0')->whereIn('order_incharge_dtl.oid_equipment_type_id',$equipmentTypeIdArr)->update($dataSave);
				    
				    //1 if atleast any one Section Incharge doesnot confirm the report
				    //2 if all Section Incharge confirm the report
				    return $order->hasOrderConfirmedByAllSectionIncharges($orderId);
			}
			return false;
	    }
	    
	    /*************************
	    *function to update smaple name
	    * on editing a report(on reviewer end)
	    *************************/
	    public function updateSampleNameAliasByReviewer($orderId,$sampleDescriptionName){
	
			$orderData 	     = DB::table('order_master')->where('order_id','=',$orderId)->select('order_master.product_id','order_master.sample_description_id')->first();
			$productId 	     = !empty($orderData->product_id) ? $orderData->product_id : '0';
			$sampleDescriptionId = !empty($orderData->sample_description_id) ? $orderData->sample_description_id : '0';
			
			$sampleAliasData = DB::table('product_master_alias')->where('product_master_alias.product_id','=',$productId)->where('product_master_alias.c_product_name','=',trim($sampleDescriptionName))->first();
			if(!empty($sampleAliasData)){
				    return $sampleAliasData->c_product_id;
			}else{
				    $dataSave			  = array();
				    $dataSave['c_product_name']   = trim($sampleDescriptionName);
				    $dataSave['product_id'] 	  = $productId;
				    $dataSave['created_by'] 	  = USERID;
				    $dataSave['view_type'] 	  = '1';
				    $dataSave['c_product_status'] = '1';
				    return DB::table('product_master_alias')->insertGetId($dataSave);
			}
	    }
	    
	    /*************************************
	    * Get list of companies on page load.
	    * Date : 01-03-17
	    * Author : Praveen Singh
	    ************************************/
	    public function validateInvoivingRateAtReviewer($invoicingArray){
	
			global $order,$models;
		
			$order_id 	   	= !empty($invoicingArray['order_id']) ? $invoicingArray['order_id'] : '0';
			$sample_description_id  = !empty($invoicingArray['sample_description_id']) ? $invoicingArray['sample_description_id'] : '0';
			$orderData    	   	= DB::table('order_master')->where('order_master.order_id','=',$order_id)->first();
			$customer_id       	= !empty($orderData->customer_id) ? $orderData->customer_id : '0';
			$customer_city       	= !empty($orderData->customer_city) ? $orderData->customer_city : '0';
			$invoicing_type_id 	= !empty($orderData->invoicing_type_id) ? $orderData->invoicing_type_id : '0';
			$division_id          	= !empty($orderData->division_id) ? $orderData->division_id : '0';
			$product_category_id  	= !empty($orderData->product_category_id) ? $orderData->product_category_id : '0';
			$order_sample_type  	= !empty($orderData->order_sample_type) ? $orderData->order_sample_type : '0';
		    
			if($invoicing_type_id == '3'){		//Customer Wise Product or Fixed rate party
				    
				    if(!empty($order_sample_type)){
						return true;
				    }else{    
						//In case of fixed Rate Party
						$invoicingData = DB::table('customer_invoicing_rates')
							    ->where('customer_invoicing_rates.invoicing_type_id','=',$invoicing_type_id)
							    ->where('customer_invoicing_rates.cir_division_id','=',$division_id)
							    ->where('customer_invoicing_rates.cir_product_category_id','=',$product_category_id)
							    ->where('customer_invoicing_rates.cir_customer_id','=',$customer_id)
							    ->whereNull('customer_invoicing_rates.cir_c_product_id')
							    ->first();
			
						//If Product ID is not null,then Customer Wise Product
						if(empty($invoicingData)){
							    $invoicingData = DB::table('customer_invoicing_rates')
									->where('customer_invoicing_rates.invoicing_type_id','=',$invoicing_type_id)
									->where('customer_invoicing_rates.cir_division_id','=',$division_id)
									->where('customer_invoicing_rates.cir_product_category_id','=',$product_category_id)
									->where('customer_invoicing_rates.cir_customer_id','=',$customer_id)
									->where('customer_invoicing_rates.cir_city_id','=',$customer_city)
									->where('customer_invoicing_rates.cir_c_product_id','=',$sample_description_id)
									->first();
							    return !empty($invoicingData->invoicing_rate) ? true : false;
						}else{
							    return true;
						}
				    }
			}else{
				    return true;
			}
	    }
				
	    /**********************************************
	    * Update parameter details of parameters having no equipment type on reviewer-end 
	    * Created by :Ruby
	    * Created by :27-Aug-2018
	    **********************************************/
	    public function updateOrderParameterDataByReviewer($orderParameterDetailData){
			$flag = array();
			if(!empty($orderParameterDetailData)){
				    foreach($orderParameterDetailData as $analysis_id => $parameterData){
						$analysis_id         = !empty($analysis_id) ? str_replace("'","",$analysis_id) : '0';
						$flag[$analysis_id]  = DB::table('order_parameters_detail')->where('order_parameters_detail.analysis_id',$analysis_id)->update(['order_parameters_detail.test_result' => $parameterData]);
				    }
			}
			return $flag;
	    }
	    
	    /**************************************************************
	    * generate Update NABL Code Number
	    * Created by :Praveen Singh
	    * Created by :30-Aug-2018
	    ***************************************************************/
	    public function __generateNablCodeNumber($orderId){
			
			$orderData    	      = DB::table('order_master')->where('order_master.order_id','=',$orderId)->first();
			$reportData    	      = $this->getOrderReportDetails($orderId);
			$division_id          = !empty($orderData->division_id) ? $orderData->division_id : '0';
			$product_category_id  = !empty($orderData->product_category_id) ? $orderData->product_category_id : '0';			
			
			//1-6 : Integration of Accreditation Cerificate Number according to Branch.
			$accreditationCertiData    = DB::table('order_accreditation_certificate_master')->where('order_accreditation_certificate_master.oac_division_id','=',$division_id)->where('order_accreditation_certificate_master.oac_status','1')->first();
			$accreditationCerificateNo = !empty($accreditationCertiData->oac_name) ? trim($accreditationCertiData->oac_name) : '';
			
			//7-8 : Integration of financial year(Report Approving Year) like '18'
			$financialYear	= !empty($reportData->approving_date) ? date('y',strtotime($reportData->approving_date)) : date('y');
			
			//9 : Integration of multilocation code '0' for main location and '1','2','3'.. for sub-location.
			$multilocationCode = isset($accreditationCertiData->oac_multi_location_lab_value) && strlen($accreditationCertiData->oac_multi_location_lab_value) ? trim($accreditationCertiData->oac_multi_location_lab_value) : '0';
			
			//10-17 : Integration of 8 digit code according to branch wise.
			$maxNablCodeData = DB::table('order_report_details')->join('order_master','order_report_details.report_id','order_master.order_id')->select('order_report_details.order_report_id','order_report_details.nabl_no')->where('order_master.division_id',$division_id)->orderBy('order_report_details.nabl_no','DESC')->limit(1)->first();
			$maxSerialNo 	 = !empty($maxNablCodeData->nabl_no) ? substr($maxNablCodeData->nabl_no,9,8) + 1 : '00000001';
			$maxSerialNo 	 = $maxSerialNo != '999999999' ? str_pad($maxSerialNo, 8, '0', STR_PAD_LEFT) : '00000001';
			
			//18 : Integration of 'F'/'P'.F if all Test Parmeter of an order has NABL Scope defined else for mix 'P'.			
			$finalNablScopeDigit = $this->__getFullyPartialNullNablScopeReport($orderId);
			
			return $accreditationCerificateNo.$financialYear.$multilocationCode.$maxSerialNo.$finalNablScopeDigit;
	    }
	    
	    /****************************************************************
	    * Getting Fully/Partial/Null Order NABL Scope
	    * Created by :Praveen Singh
	    * Created by :27-Sept-2018
	    ****************************************************************/
	    public function __getFullyPartialNullNablScopeReport($orderId){
			
			$finalScopeDigit = '';
			
			//System will not considered standard parameter(like Reference to protocol,Description etc.) in the calculation of "F"  & "P".
			//20 : Integration of 'F'/'P'.F if all Test Parmeter of an order has NABL Scope defined else for mix 'P'.
			$orderParameterDetail = DB::table('order_parameters_detail')->whereNotNull('order_parameters_detail.equipment_type_id')->whereNotNull('order_parameters_detail.order_parameter_nabl_scope')->where('order_parameters_detail.order_id','=',$orderId)->pluck('order_parameters_detail.order_parameter_nabl_scope','order_parameters_detail.test_parameter_id')->all();
			if(in_array('1',$orderParameterDetail) && in_array('0',$orderParameterDetail)){
				    $finalScopeDigit = 'P';
			}else if(in_array('1',$orderParameterDetail) && !in_array('0',$orderParameterDetail)){
				    $finalScopeDigit = 'F';
			}
			return $finalScopeDigit;
	    }
	    
	    /****************************************************************
	    * Getting Fully/Partial/Null Order NABL Scope
	    * Created by :Praveen Singh
	    * Created by :27-Sept-2018
	    ****************************************************************/
	    public function __validateNablCodeGenerationAppliciability($orderId,$validApprovingDate){
			return DB::table('order_report_details')->whereNotNull('order_report_details.approving_date')->where(DB::raw("DATE(order_report_details.approving_date)"),'>=',$validApprovingDate)->where('order_report_details.report_id',$orderId)->first();
	    }
	    
	    /****************************************************************
	    * Generation and Updatation of NABL Code Number
	    * Created by :Praveen Singh
	    * Created by :30-Aug-2018
	    ****************************************************************/
	    public function updateGenerateNablCodeNoInReport($orderId){
			
			global $order,$models;
			
			//To generate a NABL Code below cases must be staisfy
			//CASE 1 : Order Status must be in Approving Stage
			//CASE 2 : Report No must be generated
			//CASE 3 : NABL No. sholud be blank
			//CASE 4 : NABL Scope must be 'F : Fully || P : Partial'
			
			$nablCodeActivationDate	= defined('NABL_CODE_ACTIVATION_DATE') ? trim(NABL_CODE_ACTIVATION_DATE) : '2018-10-01';
			$reportGeneratibility   = $this->__validateNablCodeGenerationAppliciability($orderId,$nablCodeActivationDate);
			if(!empty($reportGeneratibility)){
				    $nablCodeLimit = defined('NABL_CODE_GENERATION_LIMIT') ? trim(NABL_CODE_GENERATION_LIMIT) : '18';
				    $orderData	   = $order->getOrderDetail($orderId);
				    $reportData	   = $this->getOrderReportDetails($orderId);
				    if(!empty($orderData->status) && $orderData->status == '7' && !empty($reportData->report_no) && empty($reportData->nabl_no)){
						$nablScope = $this->__getFullyPartialNullNablScopeReport($orderId);
						$nablNo    = !empty($nablScope) ? $this->__generateNablCodeNumber($orderId) : '';
						return !empty($nablNo) && strlen($nablNo) == $nablCodeLimit ? DB::table('order_report_details')->where('order_report_details.report_id',$orderId)->update(['order_report_details.nabl_no' => $nablNo]) : false;
				    }
			}
			return true;
	    }
	    
	    /****************************************************************
	    * Has Order Applicable For Nabl Scope
	    * Created by :Praveen Singh
	    * Created by :07-Sept-2018
	    ****************************************************************/
	    public function hasOrderApplicableForNablScope($orderId){
			
			$nablCodeLimit	   = defined('NABL_CODE_GENERATION_LIMIT') ? trim(NABL_CODE_GENERATION_LIMIT) : '18';
			$savedNableUlrNo   = DB::table('order_report_details')->where('order_report_details.report_id',$orderId)->whereNotNull('order_report_details.nabl_no')->first();
			$nablScopeDigit    = $this->__getFullyPartialNullNablScopeReport($orderId);
			$unSavedNableUlrNo = $this->__generateNablCodeNumber($orderId);
			
			if(!empty($savedNableUlrNo)){
				    return strlen($savedNableUlrNo->nabl_no) == $nablCodeLimit ? substr($savedNableUlrNo->nabl_no, -1) : '2';	//Display the Right Log Checkbox
			}else{
				    if(!empty($nablScopeDigit)){						
						if(strlen($unSavedNableUlrNo) == $nablCodeLimit){
							    return $nablScopeDigit;		//Display the Right Log Checkbox
						}else{
							    return '3'; 			//Acceration Number missing,Alert the Message	
						}
				    }else{
						return '2'; 					//NABL Scope Missing,then Hide the Right Log Checkbox	   
				    }
			}
	    }
	    
	    /****************************************************************
	    * Has Order Applicable For Nabl Scope
	    * Created by :Praveen Singh
	    * Created by :07-Sept-2018
	    ****************************************************************/
	    public function hasOrderApplicableForNablScopeAsteriskSymbol($orderId){
			
			$nablCodeLimit	   = defined('NABL_CODE_GENERATION_LIMIT') ? trim(NABL_CODE_GENERATION_LIMIT) : '18';
			$savedNableUlrNo   = DB::table('order_report_details')->where('order_report_details.report_id',$orderId)->whereNotNull('order_report_details.nabl_no')->first();
			$nablScopeDigit    = $this->__getFullyPartialNullNablScopeReport($orderId);
			$unSavedNableUlrNo = $this->__generateNablCodeNumber($orderId);
			
			if(!empty($savedNableUlrNo)){
				    return strlen($savedNableUlrNo->nabl_no) == $nablCodeLimit ? '1' : '0';	//Display the Right Log Checkbox
			}else{
				    if(!empty($nablScopeDigit)){						
						if(strlen($unSavedNableUlrNo) == $nablCodeLimit){
							    return '1';				//Display the Right Log Checkbox
						}else{
							    return '0'; 			//Acceration Number missing,Alert the Message	
						}
				    }else{
						return '0'; 					//NABL Scope Missing,then Hide the Right Log Checkbox	   
				    }
			}
	    }
	    
	    /*************************
	    *Getting Non NABL and Outsource Sample Symbol in Test Report(TR)
	    *Created By:Praveen Singh
	    *Created on:29-Nov-2018
	    *************************/
	    function getNonNablAndOutsourceSymbolTR_v1($values,$nablTestParameterDetail){
			
			global $order,$models;
	    
			$values->non_nabl_category_symbol = $values->non_nabl_parameter_symbol = '';
			
			if(!empty($nablTestParameterDetail[$values->test_para_cat_id])){
				    if(empty(array_filter($nablTestParameterDetail[$values->test_para_cat_id]))){	//If Category has only non-nabl scope parameter
						$values->non_nabl_category_symbol = '';
				    }else if(empty($values->order_parameter_nabl_scope)){				//If not then individual checking of Test Parameter Scope
						$values->non_nabl_parameter_symbol = '&#x2A;';
				    }
			}
			//If any Test parameter is tested as Outsource Company
			if(!empty($values->test_performed_by) && $values->test_performed_by == '100'){
				    $values->non_nabl_parameter_symbol = !empty($values->non_nabl_parameter_symbol) ? $values->non_nabl_parameter_symbol.'&#47;'.'&#x2A;&#x2A;' : '&#x2A;&#x2A;';
			}
	    }
	    
	    /*************************
	    *Getting Non NABL and Outsource Sample Symbol in Test Report(TR)
	    *Created By:RUBY
	    *Created on:20-Feb-2019
	    *Modified By :Praveen Singh
	    *Modified On : 22-Feb-2019
	    *************************/
	    function getNonNablAndOutsourceSymbolTR($values,$nablTestParameterDetail,$orderNablScopeSymbol){
			
			global $order,$models;
			
			$values->non_nabl_category_symbol = $values->non_nabl_parameter_symbol = '';
			
			if(!empty($orderNablScopeSymbol)){
				    if(empty($values->order_parameter_nabl_scope) && strlen($values->order_parameter_nabl_scope) > '0'){				//If not then individual checking of Test Parameter Scope
						$values->non_nabl_parameter_symbol = '&#x2A;';
				    }
			}
			//If any Test parameter is tested as Outsource Company
			if(!empty($values->test_performed_by) && $values->test_performed_by == '100'){
				    $values->non_nabl_parameter_symbol = !empty($values->non_nabl_parameter_symbol) ? $values->non_nabl_parameter_symbol.'&#47;'.'&#x2A;&#x2A;' : '&#x2A;&#x2A;';
			}
	    }
	    
	    /****************************************************************
	    * Getting Fully NABL Scope/Partial NABL Scope/Outsource Sample Scope
	    * Created by :Praveen Singh
	    * Created On :13-Dec-2018
	    ****************************************************************/
	    public function getFullyPartialNablOutsourceSampleScope($orderId){
			$orderParameterCount   = DB::table('order_parameters_detail')->whereNotNull('order_parameters_detail.equipment_type_id')->where('order_parameters_detail.order_id','=',$orderId)->count();
			$partialNablScopeI     = DB::table('order_parameters_detail')->whereNotNull('order_parameters_detail.equipment_type_id')->where('order_parameters_detail.order_id','=',$orderId)->whereNotNull('order_parameters_detail.order_parameter_nabl_scope')->where('order_parameters_detail.order_parameter_nabl_scope','=','1')->whereIn('order_parameters_detail.order_parameter_nabl_scope',array('0','1'))->count();
			$partialNablScopeII    = DB::table('order_parameters_detail')->whereNotNull('order_parameters_detail.equipment_type_id')->where('order_parameters_detail.order_id','=',$orderId)->whereNotNull('order_parameters_detail.order_parameter_nabl_scope')->where('order_parameters_detail.order_parameter_nabl_scope','=','0')->whereIn('order_parameters_detail.order_parameter_nabl_scope',array('0','1'))->count();
			$outsourceSampleScope  = DB::table('order_parameters_detail')->where('order_parameters_detail.order_id','=',$orderId)->where('order_parameters_detail.test_performed_by','100')->count();
			if(($partialNablScopeI && $partialNablScopeII) || $outsourceSampleScope){
				    return true;
			}else{
				    return false;
			}
	    }
	    
}
