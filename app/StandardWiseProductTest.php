<?php

namespace App;
use DB;
use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use HttpOz\Roles\Traits\HasRole;
use HttpOz\Roles\Contracts\HasRole as HasRoleContract;
use Illuminate\Database\Eloquent\Model;

class StandardWiseProductTest extends Authenticatable implements HasRoleContract
{
    use Notifiable;
    
    /**
     * Third Party Service for user role ...
     * URI https://github.com/httpoz/roles
     */	
    use Notifiable, HasRole;
	
    protected $table = 'product_test_hdr';
	
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
	 
    protected $fillable = [
        'test_code', 'product_id', 'test_standard_id', 'wef', 'upto', 'created_by'
    ];

    // delete the user role table entry when delete user
    public function product_test_dtl()
    {
	return $this->has_many('product_test_dtl');
    }
    
    // delete the user role table entry when delete user
    public function product_test_parameter_bom()
    {
	return $this->has_many('product_test_parameter_bom');
    }

    //autogenerate code
    public function getAutoGeneratedCode($product_id,$test_standard_id){
	
	//getting product and stanard name
	$maxTestId    = DB::table('product_test_hdr')->max('test_id') + 1;  
	$productData  = DB::table('product_master')->where('product_id','=',$product_id)->first(); 
	$standardData = DB::table('test_standard')->where('test_std_id','=',$test_standard_id)->first(); 
	return strtoupper(str_replace(' ','-',strtolower($productData->product_name).'-'.strtolower($standardData->test_std_name).'-'.$maxTestId));
    }	
    
    function getTestProductSection($test_id){
	$data = DB::table('product_test_hdr')
			->join('product_master','product_master.product_id','product_test_hdr.product_id')
			->join('product_categories','product_master.p_category_id','product_categories.p_category_id')
			->join('product_categories as parent_category','product_categories.parent_id','parent_category.p_category_id')				 
			->join('product_categories as product_section','product_section.p_category_id','parent_category.parent_id')	
			->select('product_section.p_category_id')
			->where('product_test_hdr.test_id','=',$test_id)
			->first(); 
	return !empty($data) ? $data->p_category_id : '';
    }
    
    function getTestParameterId($test_parameter_name,$product_category_id){ 
	$data = DB::table('test_parameter')
			->join('test_parameter_categories','test_parameter.test_parameter_category_id','test_parameter_categories.test_para_cat_id')
			->where('test_parameter.test_parameter_name','=',$test_parameter_name)
			->where('test_parameter_categories.product_category_id','=',$product_category_id)
			->first(); 
	//print_r($data);
	return !empty($data) ? $data->test_parameter_id : '';
    }
    
    public function getParameterEquipmentId($product_category_id,$test_parameter_id,$equipment_name){
		$data = array();
		if(!empty($equipment_name)){
			$data = DB::table('test_parameter_equipment_types')
						->join('equipment_type','test_parameter_equipment_types.equipment_type_id','equipment_type.equipment_id')
						->join('test_parameter','test_parameter_equipment_types.test_parameter_id','test_parameter.test_parameter_id')
						->join('test_parameter_categories','test_parameter.test_parameter_category_id','test_parameter_categories.test_para_cat_id')
						->select('equipment_type.equipment_id')
						->where('test_parameter_categories.product_category_id','=',$product_category_id)
						->where('test_parameter.test_parameter_id','=',$test_parameter_id)
						->where('equipment_type.equipment_name','=',$equipment_name)
						->first();
		}
		return !empty($data)? $data->equipment_id : '0';
    } 
	
    public function getParameterMethodId($product_category_id,$equipment_id,$method_name){
	$methodtListObj = DB::table('method_master')->select('method_master.method_id');
	if($product_category_id != 2){
	    $methodtListObj->where('method_master.equipment_type_id','=',$equipment_id);
	    $methodtListObj->where('method_master.product_category_id','=',$product_category_id);				
	}
	$methodtData =	$methodtListObj->where('method_master.method_name','=',$method_name)->first();
	return !empty($methodtData)? $methodtData->method_id : '0';
    }
    
    /***************************************
    * Description : Updating Product Test Code 
    * modifed on  : 06-Jan-2020
    * Modified By : Praveen Singh
    ***************************************/ 
    public function updateProductTestCode($postedData){
	if(!empty($postedData['test_id']) && !empty($postedData['product_id']) && !empty($postedData['test_standard_id'])){
	    //getting product and stanard name 
	    $productData  = DB::table('product_master')->where('product_id','=',$postedData['product_id'])->first(); 
	    $standardData = DB::table('test_standard')->where('test_std_id','=',$postedData['test_standard_id'])->first(); 
	    $testCode     = strtoupper(str_replace(' ','-',strtolower($productData->product_name).'-'.strtolower($standardData->test_std_name).'-'.$postedData['test_id']));
	    return DB::table('product_test_hdr')->where('product_test_hdr.test_id',$postedData['test_id'])->update(['product_test_hdr.test_code' => $testCode]);
	}
	return true;
    }
}
