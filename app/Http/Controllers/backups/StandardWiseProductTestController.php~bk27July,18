<?php
namespace App\Http\Controllers;
use App\Models;
use Illuminate\Http\Request;
use App\Http\Requests;
use Auth;
use App\ProductCategory;
use App\TestParameterCategory;
use App\StandardWiseProductTest;
use Validator;
use Route;
use DB;
use App\Module;
use App\TestParameters;
use App\ProductTestParameter;

class StandardWiseProductTestController extends Controller
{
	/**
	 * protected Variable.
	 */
	protected $auth;
	
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        global $models,$standardWiseProductTest,$productTestParameter,$testParameters;
		$standardWiseProductTest = new StandardWiseProductTest();
		$models = new Models();
		$testParameters = new TestParameters();
		$productTestParameter = new ProductTestParameter();
		
		$this->middleware('auth'); 
		$this->middleware(function ($request, $next) {
            $this->session = Auth::user();
			parent::__construct($this->session);
			//Checking current request is allowed or not
			$allowedAction = array('index','navigation');
			$actionData    = explode('@',Route::currentRouteAction());
			$action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])): '0';			
			if(defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action,$allowedAction)){
				return redirect('dashboard')->withErrors('Permission Denied!');
			}
            return $next($request);
		 });
    }	
    /**
     * Display a listing of the resource.
	 *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {	
		$user_id            = defined('USERID') ? USERID : '0';
        $division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';		
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';		
        $equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';
		
        return view('master.standard_wise_product_test.index',['title' => 'Standard Wise Product Test','_standard_wise_product_test' => 'active','user_id' => $user_id,'division_id' => $division_id,'equipment_type_ids' => $equipment_type_ids]);
    }    
	
	/************************************
	* Description : create new standard-product-test of test parameter category
	* Date        : 01-09-17
	* Author      : nisha
	* Parameter   : \Illuminate\Http\Request  $request
	* @return     : \Illuminate\Http\Response
	************************************/
    public function createProductTest(Request $request)
    {
		
		global $standardWiseProductTest;
		$returnData = array();
		$user_id=\Auth::user()->id;
		if ($request->isMethod('post') && !empty($user_id)) {
			if(!empty($request['data']['formData'])){  
				$newPostData = array();
				parse_str($request['data']['formData'], $newPostData);    
				if(empty($newPostData['product_id'])){
					$returnData = array('error' => config('messages.message.productRequired'));
				}else if(empty($newPostData['test_standard_id'])){
					$returnData = array('error' => config('messages.message.testStdNameRequired'));
				}else{
				    //check if product_test_hdr already exist or not
					$newPostData['test_code']=$standardWiseProductTest->getAutoGeneratedCode($newPostData['product_id'],$newPostData['test_standard_id']);
					$test_code = strtolower($newPostData['test_code']);					
					if(empty($this->isExist($newPostData['test_code']))){ 
						if(!empty($newPostData['wef']))
						{
							if(empty($newPostData['upto'])){
								$returnData = array('error' => config('messages.message.uptoRequired'));
							}else{
								if(strtotime($newPostData['upto']) > strtotime($newPostData['wef'])) {
									 $created = StandardWiseProductTest::create([
										'test_code' => strtoupper($test_code),
										'product_id' => $newPostData['product_id'],
										'test_standard_id' => $newPostData['test_standard_id'],
										'wef' => $newPostData['wef'],
										'upto' => $newPostData['upto'], 
										'created_by' => $user_id,
									   ]);
									//check if product_test_hdr created add data in product_test_hdr table
									if(!empty($created)){ 
										$returnData = array('success' => config('messages.message.productTestSaved'),'test_id' => $created->id);
									}else{
										$returnData = array('error' => config('messages.message.productTestNotSaved'));
									}	   
								}else{
								   $returnData = array('error' => config('messages.message.invalidUptoDate'));									   
								}
							}			
						}else{
							   $created = StandardWiseProductTest::create([
									'test_code' => strtoupper($test_code),
									'product_id' => $newPostData['product_id'],
									'test_standard_id' => $newPostData['test_standard_id'],
									'created_by' => $user_id,
								   ]);
								//check if product_test_hdr created add data in product_test_hdr table
								if(!empty($created)){ 
									$returnData = array('success' => config('messages.message.productTestSaved'),'test_id' => $created->id);
								}else{
									$returnData = array('error' => config('messages.message.productTestNotSaved'));
								}
						} 
					}else{
						$returnData = array('error' => config('messages.message.productTestExist'));
					}
				}
			}else{
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		}else{
			$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
		} 
		return response()->json($returnData);		
    }

	/************************************
	* Description : isExist Is used to check the product_test_hdr duplicate entry by code
	* Date        : 01-09-17
	* Author      : nisha
	* Parameter   : \Illuminate\Http\Request  $request
	* @return     : \Illuminate\Http\Response
	************************************/
    public function isExist($test_code) 
    { 
	if(!empty($test_code)){
	    $data = DB::table('product_test_hdr')
				    ->where('product_test_hdr.test_code', '=', $test_code)
				    ->first(); 
	    if(@$data->test_id){
		    return $data->test_id;
	    }else{
		    return false;
	    }
	}else{
	    return false;
	}
    }
    
    /************************************
    * Description : Get list of standard_product_test on page load
    * Date        : 01-09-17
    * Author      : nisha
    * Parameter   : \Illuminate\Http\Request  $request
    * @return     : \Illuminate\Http\Response
    ************************************/
    public function getProductTestList(Request $request,$p_category_id){
		
	global $models;
	
	$user_id            		= defined('USERID') ? USERID : '0';
	$department_ids     		= defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
	$role_ids           		= defined('ROLE_IDS') ? ROLE_IDS : '0';
	$equipment_type_ids 		= defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';
	$request['product_category_id'] = !empty($request['product_category_id']) ? array($request['product_category_id']) : $department_ids;
	
	$testParametersObj = DB::table('product_test_hdr')
	    ->join('test_standard','test_standard.test_std_id','product_test_hdr.test_standard_id')
	    ->join('product_master','product_master.product_id','product_test_hdr.product_id')
	    ->join('product_categories','product_master.p_category_id','product_categories.p_category_id')
	    ->leftJoin('product_categories as parent_category','product_categories.parent_id','parent_category.p_category_id')
	    ->leftJoin('product_categories as product_section','product_section.p_category_id','parent_category.parent_id')				 
	    ->join('users','product_test_hdr.created_by','users.id');
	
	if(!empty($request['product_category_id']) && is_array($request['product_category_id'])){
	    $testParametersObj->whereIn('product_categories.p_category_id',$request['product_category_id']);
	    $testParametersObj->orWhereIn('product_section.p_category_id',$request['product_category_id']);
	}
	//Filtering records according to search keyword
	if(!empty($request['keyword']) && strlen($request['keyword']) > 1){
	    $keyword = $request['keyword'];
	    $testParametersObj->where(function($testParametersObj) use ($models,$keyword){
		return $testParametersObj->where('product_test_hdr.test_code','like','%'.$keyword.'%')
			->Orwhere('product_test_hdr.test_code','like','%'.$keyword.'%')
			->Orwhere('product_categories.p_category_name','=','%'.$keyword.'%')
			->Orwhere('product_master.product_name','like','%'.$keyword.'%')
			->Orwhere('test_standard.test_std_name','like','%'.$keyword.'%')
			->Orwhere('product_test_hdr.wef','like','%'.$models->convertDateFormat($keyword).'%')
			->Orwhere('product_test_hdr.upto','like','%'.$models->convertDateFormat($keyword).'%')
			->Orwhere('users.name','like','%'.$keyword.'%')
			->Orwhere('product_section.p_category_name','like','%'.$keyword.'%')
			->Orwhere('product_test_hdr.created_at','like','%'.date("Y-m-d", strtotime($keyword)).'%')
			->Orwhere('product_test_hdr.updated_at','like','%'.$keyword.'%');
	    });
	}
	
	$testParametersObj->select('product_test_hdr.*','test_standard.test_std_name','product_master.product_name','product_categories.p_category_name','product_categories.p_category_id','users.name as createdBy','parent_category.p_category_name as parent_category_name','parent_category.parent_id','product_section.p_category_name as product_section_name');
	$testParameters = $testParametersObj->get();
	
	if(!empty($testParameters)){
	    foreach($testParameters as $values){
		$values->parameter_count = DB::table('product_test_dtl')->where('product_test_dtl.test_id',$values->test_id)->count();
	    }
	    $models->formatTimeStampFromArray($testParameters,DATETIMEFORMAT);
	}
	
	//echo '<pre>';print_r($testParameters);die;
	return response()->json(['allList' => $testParameters]);
    }   
	
	/************************************
	* Description : Get list of standard_product_test using multisearch
	* Date        : 01-09-17
	* Author      : nisha
	* Parameter   : \Illuminate\Http\Request  $request
	* @return     : \Illuminate\Http\Response
	************************************/
    public function getProductTestListMultisearch(Request $request)
    {
			global $models;
			$searchArry=$request['data']['formData'];  
			$testParametersObj =  DB::table('product_test_hdr')
				->join('test_standard','test_standard.test_std_id','product_test_hdr.test_standard_id')
				->join('product_master','product_master.product_id','product_test_hdr.product_id')
				->join('product_categories','product_master.p_category_id','product_categories.p_category_id')
				->join('product_categories as parent_category','product_categories.parent_id','parent_category.p_category_id')				 
				->join('product_categories as product_section','product_section.p_category_id','parent_category.parent_id')				 
				->join('users','product_test_hdr.created_by','users.id');

				if(!empty($searchArry['search_test_code'])){
					$testParametersObj->where('product_test_hdr.test_code','like','%'.$searchArry['search_test_code'].'%');
				}
				if(!empty($searchArry['search_p_category_id'])){
					$testParametersObj->where('product_categories.p_category_id','=',$searchArry['search_p_category_id']);
				}
				if(!empty($searchArry['search_product_name'])){
					$testParametersObj->where('product_master.product_name','like','%'.$searchArry['search_product_name'].'%');
				}
				if(!empty($searchArry['search_test_std_name'])){
					$testParametersObj->where('test_standard.test_std_name','like','%'.$searchArry['search_test_std_name'].'%');
				}
				if(!empty($searchArry['search_wef'])){
					$testParametersObj->where('product_test_hdr.wef','like','%'.$models->convertDateFormat($searchArry['search_wef']).'%');
				}
				if(!empty($searchArry['search_upto'])){
					$testParametersObj->where('product_test_hdr.upto','like','%'.$models->convertDateFormat($searchArry['search_upto']).'%');
				}
				if(!empty($searchArry['search_created_by'])){
					$testParametersObj->where('users.name','like','%'.$searchArry['search_created_by'].'%');
				}
				if(!empty($searchArry['search_product_section_name'])){
					$testParametersObj->where('product_section.p_category_name','like','%'.$searchArry['search_product_section_name'].'%');
				}
				if(!empty($searchArry['search_created_at'])){
					$testParametersObj->where('product_test_hdr.created_at','like','%'.date("Y-m-d", strtotime($searchArry['search_created_at'])).'%');
				}
				if(!empty($searchArry['search_updated_at'])){
					$testParametersObj->where('product_test_hdr.updated_at','like','%'.$searchArry['search_updated_at'].'%');
				}
				
			$testParameters=$testParametersObj->select('product_test_hdr.*','test_standard.test_std_name','product_master.product_name','product_categories.p_category_name','product_categories.p_category_id','users.name as createdBy','parent_category.p_category_name as parent_category_name','parent_category.parent_id','product_section.p_category_name as product_section_name')->get();

			$models->formatTimeStampFromArray($testParameters,DATETIMEFORMAT);
			
			return response()->json([
			   'allList' => $testParameters,
			]);
    }   	
	
	/************************************
	* Description : Show the form for editing the Test Parameters and get previous saved data
	* Date        : 01-09-17
	* Author      : nisha
	* Parameter   : \Illuminate\Http\Request  $request  (int  $request['data']['id'])
	* @return     : \Illuminate\Http\Response
	************************************/
    public function editProductTest(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')) {
			if(!empty($request['data']['id'])){
				$testStandardData = DB::table('product_test_hdr')
									->join('product_master', 'product_test_hdr.product_id', 'product_master.product_id')
									->where('product_test_hdr.test_id', '=', $request['data']['id'])
									->first();
				if($testStandardData->test_id){
					$returnData = array('responseData' => $testStandardData);				
				}else{
					$returnData = array('error' => config('messages.message.noRecordFound'));
				}
			}else{
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		}else{
				$returnData = array('error' => config('messages.message.provideAppData'));			
		}
		return response()->json(['returnData'=>$returnData]);		
    }
	
	public function getProTestData(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')) {
			if(!empty($request['data']['id'])){
				$testStandardData = DB::table('product_test_hdr')
									->join('product_master','product_master.product_id','product_test_hdr.product_id')
									->join('test_standard','test_standard.test_std_id','product_test_hdr.test_standard_id')
									->where('product_test_hdr.test_id', '=', $request['data']['id'])
									->first();
				if($testStandardData->test_id){
					$returnData = array('responseData' => $testStandardData);				
				}else{
					$returnData = array('error' => config('messages.message.noRecordFound'));
				}
			}else{
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		}else{
				$returnData = array('error' => config('messages.message.provideAppData'));			
		}
		return response()->json(['returnData'=>$returnData]);		
    }

	/************************************
	* Description : Update the specified resource in storage using test_id
	* Date        : 01-09-17
	* Author      : nisha
	* Parameter   : \Illuminate\Http\Request  $request  (int  $request['data']['id'])
	* @return     : \Illuminate\Http\Response
	************************************/
    public function updateProductTest(Request $request)
    {
        $returnData = array();
		if ($request->isMethod('post')) {
			if(!empty($request['data']['formData'])){    
				//pasrse searlize data 
				$newPostData = array();
				parse_str($request['data']['formData'], $newPostData);      
				if(empty($newPostData['test_id']))
				{
					$returnData = array('error' => config('messages.message.productTestIDRequired'));
				}else if(empty($newPostData['product_id'])){
					$returnData = array('error' => config('messages.message.productRequired'));
				}else if(empty($newPostData['test_standard_id'])){
					$returnData = array('error' => config('messages.message.testStdNameRequired'));
				}else{    
					$test_id=base64_decode($newPostData['test_id']);
					if(!empty($newPostData['wef'])){
						if(empty($newPostData['upto']))
						{
							$returnData = array('error' => config('messages.message.uptoRequired'));
						}else{
								if(strtotime($newPostData['upto']) > strtotime($newPostData['wef'])){ 
										$updated = DB::table('product_test_hdr')->where('test_id',$test_id)->update([
													'product_id' => $newPostData['product_id'],
													'test_standard_id' => $newPostData['test_standard_id'],
													'wef' => $newPostData['wef'],
													'upto' => $newPostData['upto'],
												   ]);
										if($updated){
											$returnData = array('success' => config('messages.message.productUpdated'));  
										}else{
											$returnData = array('success' => config('messages.message.savedNoChange'));  
										} 										 
								}else{
								   $returnData = array('error' => config('messages.message.invalidUptoDate'));									   
								}
							}		  	
					}else{
						$updated = DB::table('product_test_hdr')->where('test_id',$test_id)->update([
							'product_id' => $newPostData['product_id'],
							'test_standard_id' => $newPostData['test_standard_id']
						   ]);						
						if($updated){
							$returnData = array('success' => config('messages.message.productUpdated'));  
						}else{
							$returnData = array('success' => config('messages.message.savedNoChange'));  
						} 			
					}	
				}
			}else{
				$returnData = array('error' =>  config('messages.message.dataNotFound'));
			}
		}else{
			$returnData = array('error' => config('messages.message.dataNotFound'));
		} 
		return response()->json($returnData);
    }

	/************************************
	* Description : delete standard_product_test using test_id
	* Date        : 01-09-17
	* Author      : nisha
	* Parameter   : \Illuminate\Http\Request  $request  (int  $request['data']['id'])
	* @return     : \Illuminate\Http\Response
	************************************/
    public function deleteProductTest(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')){
			if(!empty($request['data']['id'])){
				try { 
					$test_standard = DB::table('product_test_hdr')->where('test_id', $request['data']['id'])->delete();
					if($test_standard){
						$returnData = array('success' => config('messages.message.productTestDeleted'));
					}else{
						$returnData = array('error' => config('messages.message.parameterNotDeleted'));					
					}
				}catch(\Illuminate\Database\QueryException $ex){ 
				   $returnData = array('error' => "Cannot delete or update a parent row: a foreign key constraint fails!");
				}
			}else{
				$returnData = array('error' => config('messages.message.noRecordFound'));
			}
		}
		return response()->json($returnData);
    }
	
	/**
	* Get list of ProductTestParameters on page load.
	* Date : 18-09-17
	* Author : nisha
	* @param  \Illuminate\Http\Request  $request
	* @return \Illuminate\Http\Response
	*/
	public function getProductTestAllParametersListChildView($test_id){
        
        global $order,$models;
        
		$productTestParametersList = DB::table('product_test_dtl')
					->join('product_test_hdr','product_test_dtl.test_id','product_test_hdr.test_id')
					->join('test_parameter','product_test_dtl.test_parameter_id','test_parameter.test_parameter_id')
					->join('test_parameter_categories','test_parameter_categories.test_para_cat_id','test_parameter.test_parameter_category_id')			
					->leftJoin('equipment_type','equipment_type.equipment_id','product_test_dtl.equipment_type_id')			
					->leftJoin('method_master','method_master.method_id','product_test_dtl.method_id')			
					->select('product_test_dtl.*','test_parameter.test_parameter_code','test_parameter.test_parameter_name','equipment_type.equipment_name','method_master.method_name','test_parameter_categories.test_para_cat_id','test_parameter_categories.test_para_cat_name','test_parameter_categories.category_sort_by')
					->where('product_test_dtl.test_id',$test_id)
					->orderBy('product_test_dtl.parameter_sort_by','asc')
					->get();
       
		$categoryWiseParamenter = array();
		if(!empty($productTestParametersList)){
			foreach($productTestParametersList as $key => $values){
				$categoryWiseParamenter[$values->test_para_cat_id]['categorySortBy']     = $values->category_sort_by;
				$categoryWiseParamenter[$values->test_para_cat_id]['categoryId']     = $values->test_para_cat_id;
				$categoryWiseParamenter[$values->test_para_cat_id]['categoryName']     = $values->test_para_cat_name;
				$categoryWiseParamenter[$values->test_para_cat_id]['categoryParams'][] = $values;
			}
			$categoryWiseParamenter = array_values($categoryWiseParamenter);
		}
		
		$categoryWiseParamenterSortedArr = $models->sortArrayAscOrder($categoryWiseParamenter);
		//print_r($categoryWiseParamenterSortedArr); die;
		return response()->json(['productTestParametersList' => $categoryWiseParamenterSortedArr]);
	}
	
	/**
     * save all parameters with children with sorting order
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function saveTestParametersOrdering(Request $request){
		$error    = '0';
        $message  = config('messages.message.updatedError');
        $data     = '';
        $dataSave = $formData = array();
		
		if(!empty($request['data'])){
			$productTestParametersSortedArr=$request['data'][0];
			$counter=0;
			foreach($productTestParametersSortedArr as $mKey=>$module){
			    $categoryData['category_sort_by'] = '';
				$counter++;
				$categoryData['category_sort_by'] = $counter; 
				$update = DB::table('test_parameter_categories')->where('test_parameter_categories.test_para_cat_id',$module['id'])->update($categoryData);
				$subCounter=0;
				foreach($module['items'] as $key=>$menu){
					 $subCounter++;	
					 $parametersData['parameter_sort_by']=$subCounter;
					 $update = DB::table('product_test_dtl')->where('product_test_dtl.product_test_dtl_id',$menu['id'])->update($parametersData);
				}
			}
			$error    = '1';
            $message = config('messages.message.updated'); 
		}
		return response()->json(['error' => $error,'message' => $message]);
	}
	
	/**
	* generate test parameter pdf.
	*
	* @param  int  $id
	* @return \Illuminate\Http\Response
	*/
    public function generateProductTestPdf(Request $request){
		
		global $order, $invoice, $models;
		
		$error 		= '0';
        $message 	= config('messages.message.error');
        $data 		= $testParametersData = '';
        $formData   = array();
		
        if($request->isMethod('post') && !empty($request->test_id)){
			$testParametersData = $models->generatePDF($request->test_id,$contentType='product_test');
			if(!empty($testParametersData)){
				foreach($testParametersData as $test_id => $value){
					if($test_id && $value){
						DB::table('product_test_hdr')->where('test_id', '=', $test_id)->update(['test_parameter_file' => $value]);
						$error 		  = '1';
						$message 	  = config('messages.message.fileGenerationMsg');
						$value = preg_replace('/(\/+)/','/',PRODUCT_TEST_PATH.$value);						
					}					
				}
			}
		}
		return response()->json(array('error' => $error, 'message' => $message, 'testParametersFile' => $value));
    }
	
	/**
	* upload product test header data
	*
	* @param  int  $id
	* @return \Illuminate\Http\Response
	*/
    public function uploadProductTestHeader(Request $request){
		global $models,$standardWiseProductTest; 
		
		$error 		= '0';
        $message 	= config('messages.message.error');
		$proData = array();
		$allowedFormat = array('application/vnd.ms-excel','application/csv','text/csv');
		
		if(empty($_FILES['productTestFile']['name'])){			 
			 $message = config('messages.message.fileNotSelected');	
		}else if(in_array($_FILES['productTestFile']['type'],$allowedFormat) && $_FILES['productTestFile']['size'] > '0'){
			$productTestData = $models->csvToArray($_FILES['productTestFile']['tmp_name']);
			
			if(!in_array('product_name*',$productTestData['header']) || !in_array('test_std_name*',$productTestData['header']) || !in_array('wef',$productTestData['header']) || !in_array('upto',$productTestData['header'])){			
				$message 	= config('messages.message.invalidFileCoulmn');
			}else{
				if(!empty($productTestData['data'])){
					foreach($productTestData['data'] as $key=>$data){ 
						$proData[$key]['product_id'] = !empty($data[0])? $models->getTableUniqueIdByName('product_master','product_name',$data[0],'product_id') :'0';
						$proData[$key]['test_standard_id'] = !empty($data[1])? $models->getTableUniqueIdByName('test_standard','test_std_name',$data[1],'test_std_id') :'0'; 
						$proData[$key]['wef'] = !empty($data[2])?$data[2]: ''; 
						$proData[$key]['upto'] = !empty($data[3])?$data[3]: '';
						
						//validations
						$rowNum = $key+2;
						if(empty($proData[$key]['product_id']) || empty($proData[$key]['test_standard_id'])){
							$messageArr[] = 'Error in row '.$rowNum;
						}				
						if(!empty($proData[$key]['wef'])){
							if(empty($proData[$key]['upto'])){
								$messageArr[] = config('messages.message.uptoRequired').' at row '.$rowNum;
							}else{
								if(strtotime($proData[$key]['upto']) < strtotime($proData[$key]['wef'])){
									$messageArr[] = config('messages.message.invalidUptoDate').' at row '.$rowNum;
								}
							}
						}
					}
				
					if(!empty($messageArr)){
						$message = implode(',',$messageArr); 
					}else{
						if(!empty($proData)){				
							foreach($proData as $key=>$newPostData){
								$newPostData['test_code'] = strtoupper($standardWiseProductTest->getAutoGeneratedCode($newPostData['product_id'],$newPostData['test_standard_id']));				
								$newPostData['created_by'] = \Auth::user()->id;
								if(!empty($newPostData)){
									DB::table('product_test_hdr')->insert($newPostData);
								}
							}					
							$error 		= '1';
							$message 	= config('messages.message.success');
						}else{			
							$message 	= config('messages.message.noRecordFound');
						}
					}
				}else{					
					$message 	= config('messages.message.provideAppData');
				}
			}
		}else{
			$message = config('messages.message.invalidFileType');
		}
        
		return response()->json(array('error' => $error, 'message' => $message));		
    }
	
	/**
	* upload product test details data
	*
	* @param  int  $id
	* @return \Illuminate\Http\Response
	*/
    public function uploadProductTestDetails(Request $request){
		global $models,$standardWiseProductTest,$productTestParameter,$testParameters; 
		
		$error 		= '0';
        $message 	= config('messages.message.error');
		$proData = array();
		$allowedFormat = array('application/vnd.ms-excel','application/csv','text/csv');
		$allowedFields = array('test_code*','test_parameter_name*','method_name*','equipment_name*','claim_dependent*','standard_value_type*','standard_value_from*','time_taken_days*','time_taken_mins*','cost_price*','selling_price*','description');
		
		if(empty($_FILES['productTestFile']['name'])){			 
			 $message = config('messages.message.fileNotSelected');	
		}else if(in_array($_FILES['productTestFile']['type'],$allowedFormat) && $_FILES['productTestFile']['size'] > '0'){
			$productTestData = $models->csvToArray($_FILES['productTestFile']['tmp_name']);
			
			//check csv file valid or not
			foreach($allowedFields as $headerVal){
				if(!in_array($headerVal,$productTestData['header'])){
					$headerMsgArr[] = $headerVal;             //invalid columns array
				}
			}
			
			if(!empty($headerMsgArr)){			
				$message = config('messages.message.invalidFileCoulmn');
			}else{
				if(!empty($productTestData['data'])){
					foreach($productTestData['data'] as $key=>$data){ 
						$equipmentsArr = array();
						$proData[$key]['test_id'] = !empty($data[0])? $models->getTableUniqueIdByName('product_test_hdr','test_code',$data[0],'test_id'):'0';
					    $productSectionId = $standardWiseProductTest->getTestProductSection($proData[$key]['test_id']);
						
						$proData[$key]['test_parameter_id'] = !empty($data[1])? $standardWiseProductTest->getTestParameterId($data[1],$productSectionId) :'0'; 
					    $proData[$key]['equipment_type_id'] = !empty($data[2])?$standardWiseProductTest->getParameterEquipmentId($productSectionId,$proData[$key]['test_parameter_id'],$data[2]):''; 
						$proData[$key]['method_id'] = !empty($data[3])?$standardWiseProductTest->getParameterMethodId($productSectionId,$proData[$key]['equipment_type_id'],$data[3]):''; 						
						if(!empty($data[4]) && strtolower($data[4]) == 'yes'){ 
							$proData[$key]['claim_dependent'] = 1;  }else{ $proData[$key]['claim_dependent'] = 0; 
						}
						if(!empty($data[5]) && strtolower($data[5]) == 'numeric'){ 
							$proData[$key]['standard_value_type'] = 'numeric';  }else{ $proData[$key]['standard_value_type'] = 'alphanumeric'; 
						}						
						$proData[$key]['standard_value_from'] = !empty($data[6])?$data[6]:''; 
						$proData[$key]['standard_value_to'] = !empty($data[7])?$data[7]:''; 
						$proData[$key]['time_taken_days'] = !empty($data[8])?$data[8]:''; 
						$proData[$key]['time_taken_mins'] = !empty($data[9])?$data[9]:''; 
						$proData[$key]['cost_price'] = !empty($data[10])?$data[10]:''; 
						$proData[$key]['selling_price'] = !empty($data[11])?$data[11]:''; 
						$proData[$key]['description'] = !empty($data[12])?$data[12]:''; 
						$proData[$key]['created_by'] = \Auth::user()->id;
						
						//validations
						$rowNum = $key+2;
						if(empty($proData[$key]['test_id']) || empty($proData[$key]['test_parameter_id']) || empty($proData[$key]['method_id']) || empty($proData[$key]['equipment_type_id'])){
							$messageArr[] = 'Error in row '.$rowNum;
						}
						if($proData[$key]['selling_price'] < $proData[$key]['cost_price']){
							$messageArr[] = 'Selling Price should be greater than cost price at row '.$rowNum;
						}
					}			
				    
					if(!empty($messageArr)){
						$message = implode(',',$messageArr); 
					}else{
						if(!empty($proData)){				
							foreach($proData as $key=>$newPostData){
								if(!empty($newPostData)){ 
									$newPostData['parameter_sort_by'] = $productTestParameter->getParameterSortNumber($newPostData['test_id']);
									try { 
										DB::table('product_test_dtl')->insert($newPostData);
									}catch(\Illuminate\Database\QueryException $ex){ 
									   //$returnData = array('error' => "Cannot delete or update a parent row: a foreign key constraint fails!");
									}									
								}
							}					
							$error 		= '1';
							$message 	= config('messages.message.success');
						}else{			
							$message 	= config('messages.message.noRecordFound');
						}
					}
				}else{					
					$message 	= config('messages.message.provideAppData');
				}
			}
		}else{
			$message = config('messages.message.invalidFileType');
		}
        
		return response()->json(array('error' => $error, 'message' => $message));		
    }
	
		/****12 dec,2017****/
	
	public function saveMoreProductTest(Request $request){
		global $models,$standardWiseProductTest;
			$newPostData 			= array();
			$formData 				= array();
			$categoryWiseParamenter = array();
			$error 		= '0';
			$message 	= config('messages.message.error');
		if(!empty($request['data']['formData'])){  
			parse_str($request['data']['formData'], $newPostData);
			if(!empty($newPostData)){
				if(empty($newPostData['product_id'])){					
					$message = config('messages.message.productRequired');
				}elseif(empty($newPostData['test_standard_id'])){
					$message = config('messages.message.testStdIdRequired');
				}elseif(empty($newPostData['test_parameters'])){
					$message = config('messages.message.testParameterRequired');
				}else{
					$paraIdArr = !empty($newPostData['test_parameters']) ?  array_filter($newPostData['test_parameters']) : array();
					$formData  = $models->unsetFormDataVariables($newPostData,array('_token','test_parameters')); 
					$formData['test_code']		=strtoupper($standardWiseProductTest->getAutoGeneratedCode($formData['product_id'],$formData['test_standard_id']));
					$formData['created_by']    	= USERID;
					$formData['status']    		= 1;
		
					$testId = DB::table('product_test_hdr')->insertGetId($formData);
					
					$productTestParametersList = DB::table('product_test_dtl')
						->select('product_test_dtl.*')
						->whereIn('product_test_dtl.product_test_dtl_id',$paraIdArr)
						->orderBy('product_test_dtl.parameter_sort_by','asc')
						->get();
				//echo'<pre>'; print_r($productTestParametersList); die;

					if(!empty($productTestParametersList)){
						foreach($productTestParametersList as $key => $values){

							$categoryWiseParamenter['test_id']  				= !empty($testId) ? $testId : '' ;
							$categoryWiseParamenter['parameter_sort_by']     	= $values->parameter_sort_by;
							$categoryWiseParamenter['method_id']     			= $values->method_id;
							$categoryWiseParamenter['test_parameter_id']     	= $values->test_parameter_id;
							$categoryWiseParamenter['claim_dependent']    		= $values->claim_dependent;
							$categoryWiseParamenter['equipment_type_id']     	= $values->equipment_type_id;
							$categoryWiseParamenter['time_taken_days'] 			= $values->time_taken_days;
							$categoryWiseParamenter['time_taken_mins'] 			= $values->time_taken_mins;
							$categoryWiseParamenter['cost_price'] 				= $values->cost_price;
							$categoryWiseParamenter['selling_price'] 			= $values->selling_price;
							$categoryWiseParamenter['description'] 				= $values->description;
							$categoryWiseParamenter['standard_value_type'] 		= $values->standard_value_type;
							$categoryWiseParamenter['standard_value_from'] 		= $values->standard_value_from;
							$categoryWiseParamenter['standard_value_to'] 		= $values->standard_value_to;
							$categoryWiseParamenter['created_by']    			= USERID;
							
							$updateTestDetail = DB::table('product_test_dtl')->insert($categoryWiseParamenter);
						}
					}
					$error 		= '1';
					$message 	= config('messages.message.success');
				}
			}
		}
		return response()->json(array('error' => $error, 'message' => $message));		
	}
	
	/***** 14 dec,2017 ***/
	public function getProductParentDetail($test_id){
		if(!empty($test_id)){ 
			$parentId = DB::table('product_master')
						->leftjoin('product_test_hdr','product_test_hdr.product_id','=','product_master.product_id')
						->leftjoin('product_categories','product_categories.p_category_id','=','product_master.p_category_id')
						->where('product_test_hdr.test_id','=',$test_id)->select('product_categories.parent_id')->first();
			$product_parent_id = !empty($parentId) ? $parentId->parent_id : '' ;
		}
		return response()->json(array('product_parent_id'=>$product_parent_id));
	}
}
