<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Requests;
use Auth;
use App\Company;
use App\Order;
use App\Models;
use App\InvoiceHdr;
use App\InvoiceHdrDetail;
use App\NumbersToWord;
use App\SendMail;
use App\Report;
use Session;
use Validator;
use Route;
use DB;
use PDF;

class InvoicesController extends Controller {

    /**
     * protected Variable.
     */
    protected $auth;

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct() {

        global $models, $order, $report,$invoice, $numbersToWord, $mail;

	$models         = new Models();
        $order          = new Order();
	$report 	= new Report();
        $invoice        = new invoiceHdr();
        $mail           = new SendMail();
        $numbersToWord  = new NumbersToWord();

        $this->middleware(function ($request, $next) {
            $this->auth = Auth::user();
            parent::__construct($this->auth);
            //Checking current request is allowed or not
            $allowedAction = array('index', 'navigation');
            $actionData = explode('@', Route::currentRouteAction());
            $action = !empty($actionData[1]) ? trim(strtolower($actionData[1])) : '0';
            if (defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action, $allowedAction)) {
                return redirect('dashboard')->withErrors('Permission Denied!');
            }
            return $next($request);
        });
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index() {

        global $order, $models, $invoice,$mail;

        $user_id            = defined('USERID') ? USERID : '0';
        $division_id        = defined('DIVISIONID') ? DIVISIONID : '0';
        $department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
        $role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';
        $equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';

        return view('sales.invoices.index', ['title' => 'Invoices', '_invoices' => 'active', 'user_id' => $user_id, 'division_id' => $division_id, 'equipment_type_ids' => $equipment_type_ids,'department_ids' => $department_ids]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function getBranchWiseInvoices(Request $request){

        global $order, $models, $invoice;

        $error       = '0';
        $message     = config('messages.message.error');
        $data        = '';
        $formData    = array();
        $currentDate = date('Y-m-d');

        //Assigning Condition according to the Role Assigned
	parse_str($request->formData, $formData);	
	//echo '<pre>';print_r($formData); die;

        $invoicesObj = DB::table('invoice_hdr')
	    ->join('invoice_hdr_detail', 'invoice_hdr_detail.invoice_hdr_id', 'invoice_hdr.invoice_id')
	    ->join('order_master','order_master.order_id','invoice_hdr_detail.order_id')
	    ->leftJoin('order_dispatch_dtl', function($join){
		$join->on('order_dispatch_dtl.order_id', '=', 'invoice_hdr_detail.order_id');
		$join->where('order_dispatch_dtl.amend_status','0');
	    })
	    ->join('order_report_details', 'order_report_details.report_id', 'invoice_hdr_detail.order_id')
	    ->join('divisions', 'divisions.division_id', 'invoice_hdr.division_id')
	    ->join('customer_master', 'customer_master.customer_id', 'invoice_hdr.customer_id')
	    ->leftJoin('city_db','city_db.city_id','customer_master.customer_city')
	    ->join('users as invoicedBy', 'invoicedBy.id', 'invoice_hdr.created_by')
	    ->leftJoin('users as dispatchBy', 'dispatchBy.id', 'order_dispatch_dtl.dispatch_by')
	    ->select('invoice_hdr.*','order_master.status as orderstatus','order_dispatch_dtl.dispatch_date','dispatchBy.name as dispatch_by','order_master.order_id', 'customer_master.customer_name', 'divisions.division_name', 'invoicedBy.name as invoiced_by', 'order_report_details.report_file_name','city_db.city_name as customer_city','order_master.order_no')
	    ->where('invoice_hdr.invoice_status', '1');

	$this->setConditionAccordingToRoleAssigned($invoicesObj,$formData);
	$this->getInvoicesMultisearch($invoicesObj,$formData);

        $invoiceList = $invoicesObj->groupBy('invoice_hdr.invoice_id')->orderBy('invoice_hdr.invoice_date', 'DESC')->get();

        //to formate created and updated date
	$models->formatTimeStampFromArray($invoiceList,DATETIMEFORMAT);

        //echo '<pre>';print_r($invoiceList); die;
        return response()->json(['invoiceList' => $invoiceList]);
    }
    
    /**
    * Show the form for creating a new resource.
    *
    * @return \Illuminate\Http\Response
    */
    public function generateBranchWiseInvoicesPdf(Request $request){
	
	global $order, $models, $invoice;

        $error       = '0';
        $message     = config('messages.message.error');
        $data        = '';
        $formData    = array();
        $currentDate = date('Y-m-d');
	
	if($request->isMethod('post') && !empty($request->generate_invoice_documents)){

	    //Assigning Condition according to the Role Assigned
	    $formData = $request->all();
	    //echo '<pre>';print_r($formData); die;
    
	    $invoicesObj = DB::table('invoice_hdr')
		->join('invoice_hdr_detail', 'invoice_hdr_detail.invoice_hdr_id', 'invoice_hdr.invoice_id')
		->join('order_master','order_master.order_id','invoice_hdr_detail.order_id')
		->join('order_report_details', 'order_report_details.report_id', 'invoice_hdr_detail.order_id')
		->join('divisions', 'divisions.division_id', 'invoice_hdr.division_id')
		->join('customer_master', 'customer_master.customer_id', 'invoice_hdr.customer_id')
		->join('users as invoicedBy', 'invoicedBy.id', 'invoice_hdr.created_by')
		->leftJoin('city_db','city_db.city_id','customer_master.customer_city')
		->leftJoin('order_dispatch_dtl', function($join){
		    $join->on('order_dispatch_dtl.order_id', '=', 'invoice_hdr_detail.order_id');
		    $join->where('order_dispatch_dtl.amend_status','0');
		})		
		->leftJoin('users as dispatchBy', 'dispatchBy.id', 'order_dispatch_dtl.dispatch_by')
		->select('invoice_hdr.invoice_id','invoice_hdr.invoice_no','divisions.division_name as branch','customer_master.customer_name','city_db.city_name as place','order_master.order_no as related_orders','invoice_hdr.invoice_date', 'invoice_hdr.net_total_amount','order_dispatch_dtl.dispatch_date','dispatchBy.name as dispatch_by','invoicedBy.name as invoiced_by')
		->where('invoice_hdr.invoice_status', '1');
    
	    $this->setConditionAccordingToRoleAssigned($invoicesObj,$formData);
	    $this->getInvoicesMultisearch($invoicesObj,$formData);
    
	    $invoiceList = $invoicesObj->groupBy('invoice_hdr.invoice_id')->orderBy('invoice_hdr.invoice_date', 'DESC')->get();
    
	    //to formate created and updated date
	    $models->formatTimeStampFromArray($invoiceList,DATETIMEFORMAT);
	    
	    if(!empty($invoiceList)){		
		
		//to get all invoice order list
		$invoice->getInvoiceOrdersList($invoiceList);
		
		$invoicesData 			= !empty($invoiceList) ? json_decode(json_encode($invoiceList),true) : array();
		$invoicesData 			= $models->unsetFormDataVariablesArray($invoicesData,array('canDispatchOrder'));
		$response['heading'] 		= 'Invoices List'.'('.count($invoicesData).')';
		$response['tableHead'] 		= !empty($invoicesData) ? array_keys(end($invoicesData)) : array();
		$response['tableBody'] 		= !empty($invoicesData) ? $invoicesData : array();
		$response['tablefoot']		= array();
		$response['mis_report_name']  	= 'invoice_document';
		
		if($request->generate_invoice_documents == 'PDF'){
		    $pdfHeaderContent  		= $models->getHeaderFooterTemplate();
		    $response['header_content']	= $pdfHeaderContent->header_content;
		    $response['footer_content']	= $pdfHeaderContent->footer_content;
		    return $models->downloadPDF($response,$contentType='invoicesheet');
		}elseif($request->generate_invoice_documents == 'Excel'){
		    return $models->generateExcel($response);
		}
	    }else{
		Session::put('errorMsg', config('messages.message.noRecordFound'));
		return redirect('dashboard');
	    }
	}	    
	Session::put('errorMsg', config('messages.message.fileDownloadErrorMsg'));
	return redirect('dashboard');
    }
   
    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function setConditionAccordingToRoleAssigned($invoicesObj,$formData){

	global $order,$models;

	$user_id            	= defined('USERID') ? USERID : '0';
	$department_ids     	= defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
	$role_ids           	= defined('ROLE_IDS') ? ROLE_IDS : '0';
        $equipment_type_ids 	= defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';
	$divisionId     	= !empty($formData['division_id']) ? $formData['division_id'] : '0';
	$invoiceDateFrom  	= !empty($formData['order_date_from']) ? $formData['order_date_from'] : '0';
	$invoiceDateTo    	= !empty($formData['order_date_to']) ? $formData['order_date_to'] : '0';
	$keyword        	= !empty($formData['keyword']) ? $formData['keyword'] : '0';

        //If logged in User is Invoicer ID:8 AND Order Status ID:8(INVOICE GENERATOR)
        if (defined('IS_INVOICE_GENERATOR') && IS_INVOICE_GENERATOR) {
            //$invoicesObj->OrWhere('invoice_hdr.created_by', $user_id);
        }
	//Filtering records according to division assigned
	if(!empty($divisionId) && is_numeric($divisionId)){
	    $invoicesObj->where('invoice_hdr.division_id', $divisionId);
	}
	//Filtering records according to department assigned
	if(!empty($department_ids) && is_array($department_ids)){
	    $invoicesObj->whereIn('invoice_hdr.product_category_id', $department_ids);
	}
	//Filtering records according to from and to order date
	if(!empty($invoiceDateFrom) && !empty($invoiceDateTo)){
	    $invoicesObj->whereBetween(DB::raw("DATE(invoice_hdr.invoice_date)"), array($invoiceDateFrom, $invoiceDateTo));
	}else if(!empty($invoiceDateFrom) && empty($invoiceDateTo)){
	    $invoicesObj->where(DB::raw("DATE(invoice_hdr.invoice_date)"),'>=', $invoiceDateFrom);
	}else if(empty($invoiceDateFrom) && !empty($invoiceDateTo)){
	    $invoicesObj->where(DB::raw("DATE(invoice_hdr.invoice_date)"),'<=', $invoiceDateTo);
	}else{
	    $invoicesObj->where(DB::raw("MONTH(invoice_hdr.invoice_date)"), date('m'));
	}
	//Filtering records according to search keyword
	if(!empty($keyword)){
            $invoicesObj->where('invoice_hdr.invoice_no','LIKE','%'.$keyword);
	}
    }

    /**
     * multisearch
     *
     * @return \Illuminate\Http\Response
     */
    public function getInvoicesMultisearch($invoicesObj,$searchArry) {

        global $order, $models;

	if (!empty($searchArry['search_order_no'])) {
            $invoicesObj->where('order_master.order_no', 'like', '%'.trim($searchArry['search_order_no']).'%');
        }
        if (!empty($searchArry['search_invoice_no'])) {
            $invoicesObj->where('invoice_hdr.invoice_no', 'like','%'. trim($searchArry['search_invoice_no']) .'%');
        }
        if (!empty($searchArry['search_division_id']) && is_numeric($searchArry['search_division_id'])) {
            $invoicesObj->where('divisions.division_name', 'like', '%' . trim($searchArry['search_division_id']) . '%');
        }
        if (!empty($searchArry['search_customer_name'])) {
            $invoicesObj->where('customer_master.customer_name', 'like', '%' . trim($searchArry['search_customer_name']) . '%');
        }
        if (!empty($searchArry['search_invoice_date'])) {
            $invoicesObj->where('invoice_hdr.invoice_date', 'like', '%' . $models->getFormatedDate($searchArry['search_invoice_date'],MYSQLDATFORMAT) . '%');
        }
        if (!empty($searchArry['search_net_total_amount'])) {
            $invoicesObj->where('invoice_hdr.net_total_amount', 'like', '%' . trim($searchArry['search_net_total_amount']) . '%');
        }
        if (!empty($searchArry['search_created_by'])) {
            $invoicesObj->where('invoicedBy.name', 'like', '%'.trim($searchArry['search_created_by']).'%');
        }
	if (!empty($searchArry['search_dispatch_pendency'])) {
            $invoicesObj->whereNull('order_dispatch_dtl.dispatch_date');
        }
	if(!empty($searchArry['search_dispatch_date'])){
	    $invoicesObj->where('order_dispatch_dtl.dispatch_date','LIKE','%'.$models->getFormatedDate($searchArry['search_dispatch_date'],MYSQLDATFORMAT).'%');
	}
	if(!empty($searchArry['search_dispatch_by'])){
	    $invoicesObj->where('dispatchBy.name','LIKE','%'.$searchArry['search_dispatch_by'].'%');
	}
    }

    /**
    * Show the form for creating a new resource.
    *
    * @return \Illuminate\Http\Response
    */
    public function getBillingTypeCustomerList(Request $request){

	global $order,$models;

	$billingTypeCustomerList = array();
	
	//Saving record in orders table
	if(!empty($request->formData) && $request->isMethod('post')){

	    //Parsing the Serialze Dta
	    parse_str($request->formData, $formData);
	    
	    $user_id            		= defined('USERID') ? USERID : '0';
	    $defaultDepartmentIds     		= defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
	    $defaultDivisionId        		= defined('DIVISIONID') ? DIVISIONID : '0';
	    $defaultUserDepartmentIds   	= defined('USER_DEPARTMENT_IDS') ? USER_DEPARTMENT_IDS : '0';
	    $formData['division_id']   		= !empty($formData['division_id']) ? $formData['division_id'] : $defaultDivisionId;
	    $formData['product_category_id']   	= !empty($formData['product_category_id']) ? array($formData['product_category_id']) : $defaultUserDepartmentIds;
	    $formData['billing_type']		= !empty($formData['billing_type']) ? $formData['billing_type'] : '0';
	    
	    if(!empty($formData['division_id']) && !empty($formData['billing_type'])){
		
		$billingTypeCustomerObj = DB::table('customer_master')
				->join('order_master', 'order_master.customer_id', 'customer_master.customer_id')
				->join('city_db','city_db.city_id','order_master.customer_city')
				->select('customer_master.customer_id',DB::raw('CONCAT(customer_master.customer_name,"/",city_db.city_name) AS customer_name'))
				->where('order_master.division_id', $formData['division_id'])
				->whereNull('order_master.order_sample_type')
				->where('order_master.status', '8');    //completed for report and ready for invoice generation
		
		if(!empty($formData['product_category_id']) && is_array($formData['product_category_id'])){
		    $billingTypeCustomerObj->whereIn('order_master.product_category_id', $formData['product_category_id']);	
		}
		if($formData['billing_type'] == '5'){ 		//Po-Wise
		    $billingTypeCustomerObj->where('order_master.billing_type_id','=',$formData['billing_type']);
		    $billingTypeCustomerObj->whereNotNull('order_master.po_no');
		}else{
		    $billingTypeCustomerObj->where('order_master.billing_type_id','=',$formData['billing_type']);
		}
		$billingTypeCustomerObj->groupBy('order_master.customer_id');
		$billingTypeCustomerObj->orderBy('customer_master.customer_name','ASC');
		$billingTypeCustomerList = $billingTypeCustomerObj->get();
	    }
	}

	//echo '<pre>';print_r($billingTypeCustomerList);die;
	return response()->json(['billingTypeCustomerList' => $billingTypeCustomerList]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function getCustomerBillingTypeOrders(Request $request) {

        global $order, $models, $invoice;

        $error               = '0';
        $message             = config('messages.message.error');
        $data  		     = $hasGenerateInvoiceButton    = '';
	$currentDate 	     = date('Y-m-d');
	$product_category_id = $division_id = $billing_type = $customer_id = '0';
	$formData            = $canGenerateInvoice = $customerBillingTypeOrders = array();

        //Listing of orders according to billing type
        if (!empty($request->formData) && $request->isMethod('post')) {

	    //Parsing the form Data
            parse_str($request->formData, $formData);
	    
	    if(empty($formData['customer_id'])){
		$error   = '0';
		$message = config('messages.message.customerSelectionRequired');
	    }else{
		$user_id            			= defined('USERID') ? USERID : '0';
		$defaultDepartmentIds     		= defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$defaultDivisionId        		= defined('DIVISIONID') ? DIVISIONID : '0';
		$defaultUserDepartmentIds   		= defined('USER_DEPARTMENT_IDS') ? USER_DEPARTMENT_IDS : '0';
		$formData['division_id']   		= !empty($formData['division_id']) ? $formData['division_id'] : $defaultDivisionId;
		$formData['product_category_id']   	= !empty($formData['product_category_id']) ? array($formData['product_category_id']) : $defaultUserDepartmentIds;
		$formData['billing_type']		= !empty($formData['billing_type']) ? $formData['billing_type'] : '0';
		$formData['customer_id']		= !empty($formData['customer_id']) ? $formData['customer_id'] : '0';	
		
		if(!empty($formData['division_id']) && !empty($formData['customer_id']) && !empty($formData['billing_type'])){
		
		    $division_id	 = !empty($formData['division_id']) ? $formData['division_id'] : '0';
		    $product_category_id = !empty($formData['product_category_id']) ? $formData['product_category_id'] : '0';
		    $billing_type	 = !empty($formData['billing_type']) ? $formData['billing_type'] : '0';
		    $customer_id	 = !empty($formData['customer_id']) ? $formData['customer_id'] : '0';
		    
		    $customerBillingTypeOrdersObj = DB::table('order_master')
			    ->leftJoin('customer_master as invocingTo_customer_master', 'invocingTo_customer_master.customer_id', 'order_master.invoicing_to')
			    ->join('product_master_alias','product_master_alias.c_product_id','order_master.sample_description_id')
			    ->join('order_report_details','order_report_details.report_id','=','order_master.order_id')
			    ->join('customer_discount_types','customer_discount_types.discount_type_id','=','order_master.discount_type_id')
			    ->where('order_master.customer_id', $formData['customer_id'])
			    ->whereNotIn('order_master.order_id',DB::table('invoice_hdr_detail')->pluck('order_id')->all())
			    ->where('order_master.status', '8')    //completed for report and ready for invoice generation
			    ->where('order_master.billing_type_id','=',$formData['billing_type'])
			    ->where('order_master.division_id', $formData['division_id']);
			    
		    if(!empty($formData['product_category_id']) && is_array($formData['product_category_id'])){
			$customerBillingTypeOrdersObj->whereIn('order_master.product_category_id', $formData['product_category_id']);	
		    }		 
		    if($formData['billing_type'] == '1') {              	//Daily
			$customerBillingTypeOrdersObj->where(DB::raw("DATE(order_master.order_date)"), '<=', $currentDate);
		    }else if($formData['billing_type'] == '2') {      	//Regular
			$customerBillingTypeOrdersObj->where(DB::raw("DATE(order_master.order_date)"), '<=', $currentDate);
		    }else if($formData['billing_type'] == '3') {      	//Weekly
			list($weekFirstDate, $weekLastDate) = $invoice->getFirstAndLastDayOfWeek($currentDate, $format = 'Y-m-d');
			$customerBillingTypeOrdersObj->whereBetween(DB::raw("DATE(order_master.order_date)"), array($weekFirstDate, $weekLastDate));
		    }else if($formData['billing_type'] == '4') {      	//Monthly
			list($monthFirstDate, $monthLastDate) = $invoice->getFirstAndLastDayOfMonth($currentDate, $format = 'Y-m-d');
			$customerBillingTypeOrdersObj->where(DB::raw("DATE(order_master.order_date)"), '<=', $currentDate);
		    }else if($formData['billing_type'] == '5'){ 		//Po-Wise
			if(empty($formData['po_order'])){
			    $error = '0';
			    $message = config('messages.message.invoicePONumber');
			    return response()->json(['error' => $error, 'message' => $message]);
			}else{
			    $customerBillingTypeOrdersObj->whereIn("order_master.po_no", array_values($formData['po_order']));
			}
		    }
		 
		    $customerBillingTypeOrdersObj->select('order_master.*','order_report_details.report_date','order_report_details.report_no','order_report_details.report_file_name','product_master_alias.c_product_name as sample_description','customer_discount_types.discount_type','invocingTo_customer_master.customer_name as invocingto_customer_name');
		    $customerBillingTypeOrdersObj->orderBy('order_master.order_date', 'DESC');
		    $customerBillingTypeOrders = $customerBillingTypeOrdersObj->get();
		 
		    foreach($customerBillingTypeOrders as $values){
			list($perTotalAmount,$perTotalDiscount) = $invoice->getOrderInvoivingPrice($values->customer_id, $values->order_id, $values->discount_type_id, $values->discount_value);
			$values->totalAmount                    = number_format($perTotalAmount, 2);
			$values->netDiscount                    = number_format($perTotalDiscount, 2);
			$values->extra_amount                   = !empty($values->extra_amount) ? round($values->extra_amount) : '0.00';
			$values->netAmount                      = number_format($perTotalAmount + $values->extra_amount - $perTotalDiscount,2);
			$canGenerateInvoice[$values->order_id]  = $values->totalAmount;
		    }
		    $error                     			= !empty($customerBillingTypeOrders) ? '1' : '0';
		    $message                   			= $error ? '' : $message;
		    $hasGenerateInvoiceButton  			= !empty($canGenerateInvoice) && in_array('0.00',$canGenerateInvoice) ? '0' : '1';
		}
	    }
        }
	
	//echo '<pre>';print_r($customerBillingTypeOrders);echo '</pre>';die;
        return response()->json(['error' => $error, 'message' => $message, 'division_id' => $division_id,'product_category_id' => $product_category_id,'billing_type' => $billing_type, 'customer_id' => $customer_id, 'hasGenerateInvoiceButton' => $hasGenerateInvoiceButton, 'customerBillingTypeOrders' => $customerBillingTypeOrders]);
    }
    
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function getCustomerBillingTypeInvoices(Request $request) {

        global $order, $invoice;

        $error        = '0';
        $message      = config('messages.message.error');
        $data         = '';
        $currentDate  = date('Y-m-d');
        $billing_type = $customer_id = '';
        $formData     = $customerBillingTypeInvoices = array();

        //Listing of Invoices according to billing type
        if(!empty($request->formData) && $request->isMethod('post')){

            //Parsing Value of form data
            parse_str($request->formData, $formData);
	    
	    if(empty($formData['customer_id'])){
		$error   = '0';
		$message = config('messages.message.selectCustomerForInvoiceDisplay');
	    }else{
		$user_id            		= defined('USERID') ? USERID : '0';
		$defaultDepartmentIds     	= defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$defaultDivisionId        	= defined('DIVISIONID') ? DIVISIONID : '0';
		$defaultUserDepartmentIds   	= defined('USER_DEPARTMENT_IDS') ? USER_DEPARTMENT_IDS : '0';
		$formData['division_id']   	= !empty($formData['division_id']) ? $formData['division_id'] : $defaultDivisionId;
		$formData['product_category_id']= !empty($formData['product_category_id']) ? array($formData['product_category_id']) : $defaultUserDepartmentIds;
		$formData['billing_type']	= !empty($formData['billing_type']) ? $formData['billing_type'] : '0';
		$formData['customer_id']	= !empty($formData['customer_id']) ? $formData['customer_id'] : '0';
		
		if(!empty($formData['division_id']) && !empty($formData['customer_id']) && !empty($formData['billing_type'])){
    
		    $division_id  	 = $formData['division_id'];
		    $product_category_id = $formData['product_category_id'];
		    $billing_type 	 = $formData['billing_type'];
		    $customer_id  	 = $formData['customer_id'];
		
		    $customerBillingTypeInvoicesObj = DB::table('invoice_hdr')
			    ->join('customer_master', 'customer_master.customer_id', 'invoice_hdr.customer_id')
			    ->select('invoice_hdr.*', 'customer_master.customer_name')
			    ->where('invoice_hdr.customer_id', $customer_id)
			    ->where('invoice_hdr.division_id', $division_id)
			    ->where('invoice_hdr.invoice_type','=',$billing_type)
			    ->where('invoice_hdr.invoice_status', '1');
		    
		    if(!empty($product_category_id) && is_array($product_category_id)){
			$customerBillingTypeInvoicesObj->whereIn('invoice_hdr.product_category_id', $product_category_id);	
		    }
    
		    $customerBillingTypeInvoicesObj->orderBy('invoice_hdr.invoice_date', 'DESC');
		    $customerBillingTypeInvoices = $customerBillingTypeInvoicesObj->get();
		    $error   = '1';
		    $message = '';
		}
	    }
        }

        //echo '<pre>';print_r($customerBillingTypeInvoices);echo '</pre>';die;
        return response()->json(['error' => $error, 'message' => $message, 'billing_type' => $billing_type, 'customer_id' => $customer_id, 'customerInvoicesList' => $customerBillingTypeInvoices]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function generateInvoices(Request $request){

	global $order, $invoice,$models;

	$error          = '0';
	$message        = config('messages.message.error');
	$data           = '';
	$currentDate    = defined('CURRENTDATETIME') ? CURRENTDATETIME : date('Y-m-d H:i:s');
	$SGST           = defined('SGST') ? SGST : '0';
	$CGST           = defined('CGST') ? CGST : '0';
	$IGST           = defined('IGST') ? IGST : '0';

	//Parsing the form Data
	parse_str($request->formData, $formData);
	
	if(!empty($formData['order_id']) && is_array($formData['order_id']) && !empty($formData['division_id']) && isset($formData['product_category_id']) && !empty($formData['billing_type_id']) && !empty($formData['customer_id'])){
	    
	    $division_id 	 = !empty($formData['division_id']) ? $formData['division_id'] : '0';
	    $product_category_id = !empty($formData['product_category_id']) ? $formData['product_category_id'] : '0';
	    $billing_type_id 	 = !empty($formData['billing_type_id']) ? $formData['billing_type_id'] : '0';
	    $customer_id 	 = !empty($formData['customer_id']) ? $formData['customer_id'] : '0';
	    $order_ids 	 	 = !empty($formData['order_id']) ? $formData['order_id'] : array(0);
	    
	    if($billing_type_id == '1') {              //Daily
		$invoiceIds = $this->generateInvoiceDaily($currentDate,$order_ids,$customer_id,$division_id,$product_category_id,$billing_type_id, $SGST, $CGST, $IGST);
	    }else if ($billing_type_id == '2') {      //Regular
		$invoiceIds = $this->generateInvoicerRegular($currentDate,$order_ids,$customer_id,$division_id,$product_category_id,$billing_type_id, $SGST, $CGST, $IGST);
	    }else if ($billing_type_id == '3') {      //Weekly
		$invoiceIds = $this->generateInvoiceWeekly($currentDate,$order_ids,$customer_id,$division_id,$product_category_id,$billing_type_id, $SGST, $CGST, $IGST);
	    }else if ($billing_type_id == '4') {      //Monthly
		$invoiceIds = $this->generateInvoiceMonthly($currentDate,$order_ids,$customer_id,$division_id,$product_category_id,$billing_type_id, $SGST, $CGST, $IGST);
	    }else if ($billing_type_id == '5') {      //Monthly
		$invoiceIds = $this->generateInvoicePOWise($currentDate,$order_ids,$customer_id,$division_id,$product_category_id,$billing_type_id, $SGST, $CGST, $IGST);
	    }
	    if (!empty($invoiceIds)){
		$error   = '1';
		$message = config('messages.message.invoicesSuccess');
	    }
	}

        //echo '<pre>';print_r($invoices);echo '</pre>';die;
        return response()->json(['error' => $error, 'message' => $message, 'billing_type' => $billing_type_id, 'customer_id' => $customer_id]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function generateInvoiceDaily($currentDate,$order_ids,$customer_id,$division_id,$product_category_id,$billing_type_id, $SGST, $CGST, $IGST) {

        global $order, $invoice;

        $flag = $invoiceInfo = $invoiceHdrData = $invoiceHdrDetailInfo = $totalAmount = $totalDiscount = array();

        $orderInvoicesObj = DB::table('order_master')
                ->join('customer_master','customer_master.customer_id','order_master.customer_id')
                ->select('order_master.order_id', 'order_master.order_no', 'order_master.order_date', 'order_master.product_category_id','order_master.customer_id', 'order_master.division_id', 'order_master.discount_type_id', 'order_master.discount_value','order_master.surcharge_value','order_master.extra_amount','customer_master.customer_state','order_master.invoicing_to','order_master.billing_type_id')
                ->where('order_master.customer_id', $customer_id)
		->where('order_master.billing_type_id','=',$billing_type_id)
		->where('order_master.division_id', $division_id)
		->whereIn('order_master.order_id', $order_ids)
                ->where('order_master.status', '8');    //completed for report and ready for invoice generation
		
	if(!empty($product_category_id) && is_numeric($product_category_id)){
	    $orderInvoicesObj->where('order_master.product_category_id', $product_category_id);	
	}
	$orderInvoicesData = $orderInvoicesObj->orderBy('order_master.order_date', 'DESC')->get();
	
        if (!empty($orderInvoicesData)) {
            foreach ($orderInvoicesData as $key => $orders) {
		$invoice->updateCustomerStateDefinedInInvoicingToColumn($orders); //Updating Customer State According to Invocing-To Defined at the time of Order Booking
                list($perTotalAmount, $perTotalDiscount) = $invoice->getOrderInvoivingPrice($orders->customer_id,$orders->order_id, $orders->discount_type_id, $orders->discount_value);
                $orders->order_amount               = $perTotalAmount;
                $orders->order_discount             = $perTotalDiscount;
                $invoiceHdrData[$orders->order_id]  = $orders;
                $totalAmount[$key]                  = $perTotalAmount;
                $totalDiscount[$key]                = $perTotalDiscount;
                $totalSurchargeAmount[$key]         = $orders->surcharge_value;
                $totalExtraAmount[$key]             = $orders->extra_amount;
                $invoiceHdr                         = new invoiceHdr();
                $invoiceHdr->division_id            = $orders->division_id;
		$invoiceHdr->product_category_id    = $orders->product_category_id;
                $invoiceHdr->invoice_no             = $invoice->generateInvoiceNumber($currentDate,$orders->product_category_id,$orders->division_id);
                $invoiceHdr->invoice_date           = $currentDate;
                $invoiceHdr->invoice_type           = $orders->billing_type_id;
                $invoiceHdr->customer_id            = $orders->customer_id;
                $invoiceHdr->total_amount           = array_sum($totalAmount);
                $invoiceHdr->total_discount         = array_sum($totalDiscount);
                $invoiceHdr->surcharge_amount       = array_sum($totalSurchargeAmount);
                $invoiceHdr->extra_amount           = array_sum($totalExtraAmount);
                $invoiceHdr->net_amount             = $invoiceHdr->surcharge_amount + $invoiceHdr->extra_amount + ($invoiceHdr->total_amount - $invoiceHdr->total_discount);
                if($orders->customer_state == '13'){         //In case Haryana
                    $invoiceHdr->sgst_rate          = $SGST;
                    $invoiceHdr->sgst_amount        = ($invoiceHdr->net_amount * $SGST) / 100;
                    $invoiceHdr->cgst_rate          = $CGST;
                    $invoiceHdr->cgst_amount        = ($invoiceHdr->net_amount * $CGST) / 100;
                    $invoiceHdr->net_total_amount   = round($invoiceHdr->net_amount + $invoiceHdr->sgst_amount + $invoiceHdr->cgst_amount);
                }else{                                                  //In case outside Haryana
                    $invoiceHdr->igst_rate          = $IGST;
                    $invoiceHdr->igst_amount        = ($invoiceHdr->net_amount * $IGST) / 100;
                    $invoiceHdr->net_total_amount   = round($invoiceHdr->net_amount + $invoiceHdr->igst_amount);
                }
                $invoiceHdr->created_by             = USERID;
            }
            if (!empty($invoiceHdrData) && !empty($invoiceHdr->save()) && !empty($invoiceHdr->id)) {
                foreach ($invoiceHdrData as $key => $orderValue) {
                    $invoiceHdrDetail                   = new InvoiceHdrDetail();
                    $invoiceHdrDetail->invoice_hdr_id   = $invoiceHdr->id;
                    $invoiceHdrDetail->order_id         = $orderValue->order_id;
                    $invoiceHdrDetail->order_amount     = $orderValue->order_amount;
                    $invoiceHdrDetail->order_discount   = $orderValue->order_discount;
                    $invoiceHdrDetail->extra_amount     = $orderValue->extra_amount;
                    $invoiceHdrDetail->surcharge_amount = $orderValue->surcharge_value;
                    $invoiceHdrDetail->save();
                    if (!empty($invoiceHdrDetail->id)) {
                        //Manage order process log
                        $order->updateOrderStausLog($invoiceHdrDetail->order_id, '8');
			if(!empty($invoice->orderDispatchedStatus($invoiceHdrDetail->order_id))){
			    $order->updateOrderStatusToNextPhase($invoiceHdrDetail->order_id, '11');
			}else{
			    $order->updateOrderStatusToNextPhase($invoiceHdrDetail->order_id, '9');
			}
                        $invoiceHdrDetailInfo[$invoiceHdrDetail->order_id] = $invoiceHdrDetail->order_id;
                    }
                }
                if (!empty($invoiceHdrDetailInfo)){
                    $flag[] = $invoiceHdr->id;
                }
            }
        }

        //echo '<pre>';print_r($invoiceInfo);echo '</pre>';die;
        return $flag;
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function generateInvoicerRegular($currentDate,$order_ids,$customer_id,$division_id,$product_category_id,$billing_type_id, $SGST, $CGST, $IGST) {

        global $order, $invoice;

        $flag = array();

        $orderInvoicesObj = DB::table('order_master')
                ->join('customer_master','customer_master.customer_id','order_master.customer_id')
                ->select('order_master.order_id', 'order_master.order_no', 'order_master.order_date', 'order_master.product_category_id','order_master.customer_id', 'order_master.division_id', 'order_master.discount_type_id', 'order_master.discount_value','order_master.surcharge_value','order_master.extra_amount','customer_master.customer_state','order_master.invoicing_to','order_master.billing_type_id')
                ->where('order_master.customer_id', $customer_id)
		->where('order_master.billing_type_id','=',$billing_type_id)
		->where('order_master.division_id', $division_id)
		->whereIn('order_master.order_id', $order_ids)
                ->where('order_master.status', '8');                 //completed for report and ready for invoice generation
                
	if(!empty($product_category_id) && is_numeric($product_category_id)){
	    $orderInvoicesObj->where('order_master.product_category_id', $product_category_id);	
	}	
	$orderInvoicesData = $orderInvoicesObj->orderBy('order_master.order_date', 'DESC')->get();

        if (!empty($orderInvoicesData)) {
            foreach ($orderInvoicesData as $key => $orders) {
		$invoice->updateCustomerStateDefinedInInvoicingToColumn($orders); //Updating Customer State According to Invocing-To Defined at the time of Order Booking
                list($perTotalAmount, $perTotalDiscount) = $invoice->getOrderInvoivingPrice($orders->customer_id, $orders->order_id, $orders->discount_type_id, $orders->discount_value);
                $orders->order_amount           	 = $perTotalAmount;
                $orders->order_discount         	 = $perTotalDiscount;
                $invoiceHdr                    		 = new invoiceHdr();
                $invoiceHdr->division_id        	 = $orders->division_id;
		$invoiceHdr->product_category_id    	 = $orders->product_category_id;
                $invoiceHdr->invoice_no         	 = $invoice->generateInvoiceNumber($currentDate,$orders->product_category_id,$orders->division_id);
                $invoiceHdr->invoice_date       	 = $currentDate;
                $invoiceHdr->invoice_type       	 = $orders->billing_type_id;
                $invoiceHdr->customer_id        	 = $orders->customer_id;
                $invoiceHdr->total_amount       	 = $perTotalAmount;
                $invoiceHdr->total_discount     	 = $perTotalDiscount;
                $invoiceHdr->surcharge_amount   	 = !empty($orders->surcharge_value) ? $orders->surcharge_value : '0.00';
                $invoiceHdr->extra_amount       	 = !empty($orders->extra_amount) ? $orders->extra_amount : '0.00';
                $invoiceHdr->net_amount         	 = $invoiceHdr->surcharge_amount + $invoiceHdr->extra_amount + ($invoiceHdr->total_amount - $invoiceHdr->total_discount);
                if($orders->customer_state == '13'){     //In case Haryana
                    $invoiceHdr->sgst_rate         	 = $SGST;
                    $invoiceHdr->sgst_amount       	 = ($invoiceHdr->net_amount * $SGST) / 100;
                    $invoiceHdr->cgst_rate         	 = $CGST;
                    $invoiceHdr->cgst_amount       	 = ($invoiceHdr->net_amount * $CGST) / 100;
                    $invoiceHdr->net_total_amount  	 = round($invoiceHdr->net_amount + $invoiceHdr->sgst_amount + $invoiceHdr->cgst_amount);
                }else{                                                  //In case outside Haryana
                    $invoiceHdr->igst_rate         	 = $IGST;
                    $invoiceHdr->igst_amount       	 = ($invoiceHdr->net_amount * $IGST) / 100;
                    $invoiceHdr->net_total_amount  	 = round($invoiceHdr->net_amount + $invoiceHdr->igst_amount);
                }
                $invoiceHdr->created_by = USERID;
                if(!empty($invoiceHdr->save()) && !empty($invoiceHdr->id)) {
                    $invoiceHdrDetail                   = new InvoiceHdrDetail();
                    $invoiceHdrDetail->invoice_hdr_id   = $invoiceHdr->id;
                    $invoiceHdrDetail->order_id         = $orders->order_id;
                    $invoiceHdrDetail->order_amount     = $orders->order_amount;
                    $invoiceHdrDetail->order_discount   = $orders->order_discount;
                    $invoiceHdrDetail->extra_amount     = $orders->extra_amount;
                    $invoiceHdrDetail->surcharge_amount = $orders->surcharge_value;
                    $invoiceHdrDetail->save();
                    if(!empty($invoiceHdrDetail->id)) {
			//Manage order process log
			$order->updateOrderStausLog($invoiceHdrDetail->order_id, '8');
			if(!empty($invoice->orderDispatchedStatus($invoiceHdrDetail->order_id))){
			    $order->updateOrderStatusToNextPhase($invoiceHdrDetail->order_id, '11');
			}else{
			    $order->updateOrderStatusToNextPhase($invoiceHdrDetail->order_id, '9');
			}
			$flag[] = $invoiceHdr->id;
                    }
                }
            }
        }

        //echo '<pre>';print_r($invoiceInfo);echo '</pre>';die;
        return $flag;
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function generateInvoiceWeekly($currentDate,$order_ids,$customer_id,$division_id,$product_category_id,$billing_type_id, $SGST, $CGST, $IGST) {

        global $order, $invoice;

        $flag = $invoiceInfo = $invoiceHdrData = $invoiceHdrDetailInfo = $totalAmount = $totalDiscount = array();

        $orderInvoicesObj = DB::table('order_master')
                ->join('customer_master','customer_master.customer_id','order_master.customer_id')
                ->select('order_master.order_id', 'order_master.order_no', 'order_master.order_date', 'order_master.product_category_id','order_master.customer_id', 'order_master.division_id', 'order_master.discount_type_id', 'order_master.discount_value','order_master.surcharge_value','order_master.extra_amount','customer_master.customer_state','order_master.invoicing_to','order_master.billing_type_id')
                ->where('order_master.customer_id', $customer_id)
		->where('order_master.billing_type_id','=',$billing_type_id)
		->where('order_master.division_id', $division_id)
		->whereIn('order_master.order_id', $order_ids)
                ->where('order_master.status', '8');    //completed for report and ready for invoice generation
        
	if(!empty($product_category_id) && is_numeric($product_category_id)){
	    $orderInvoicesObj->where('order_master.product_category_id', $product_category_id);	
	}	
	$orderInvoicesData = $orderInvoicesObj->orderBy('order_master.order_date', 'DESC')->get();

        if (!empty($orderInvoicesData)) {
            foreach ($orderInvoicesData as $key => $orders) {
		$invoice->updateCustomerStateDefinedInInvoicingToColumn($orders); //Updating Customer State According to Invocing-To Defined at the time of Order Booking
                list($perTotalAmount, $perTotalDiscount) = $invoice->getOrderInvoivingPrice($orders->customer_id, $orders->order_id, $orders->discount_type_id, $orders->discount_value);
                $orders->order_amount                    = $perTotalAmount;
                $orders->order_discount                  = $perTotalDiscount;
                $invoiceHdrData[$orders->order_id]       = $orders;
                $totalAmount[$key]                       = $perTotalAmount;
                $totalDiscount[$key]                     = $perTotalDiscount;
                $totalSurchargeAmount[$key]              = $orders->surcharge_value;
                $totalExtraAmount[$key]                  = $orders->extra_amount;
                $invoiceHdr                              = new invoiceHdr();
                $invoiceHdr->division_id                 = $orders->division_id;
		$invoiceHdr->product_category_id    	 = $orders->product_category_id;
                $invoiceHdr->invoice_no                  = $invoice->generateInvoiceNumber($currentDate,$orders->product_category_id,$orders->division_id);
                $invoiceHdr->invoice_date                = $currentDate;
                $invoiceHdr->invoice_type                = $orders->billing_type_id;
                $invoiceHdr->customer_id                 = $orders->customer_id;
                $invoiceHdr->total_amount                = array_sum($totalAmount);
                $invoiceHdr->total_discount              = array_sum($totalDiscount);
                $invoiceHdr->surcharge_amount            = array_sum($totalSurchargeAmount);
                $invoiceHdr->extra_amount                = array_sum($totalExtraAmount);
                $invoiceHdr->net_amount                  = $invoiceHdr->surcharge_amount + $invoiceHdr->extra_amount + ($invoiceHdr->total_amount - $invoiceHdr->total_discount);
                if($orders->customer_state == '13'){         	//In case Haryana
                    $invoiceHdr->sgst_rate        	 = $SGST;
                    $invoiceHdr->sgst_amount      	 = ($invoiceHdr->net_amount * $SGST) / 100;
                    $invoiceHdr->cgst_rate        	 = $CGST;
                    $invoiceHdr->cgst_amount      	 = ($invoiceHdr->net_amount * $CGST) / 100;
                    $invoiceHdr->net_total_amount 	 = round($invoiceHdr->net_amount + $invoiceHdr->sgst_amount + $invoiceHdr->cgst_amount);
                }else{                                                  //In case outside Haryana
                    $invoiceHdr->igst_rate        	 = $IGST;
                    $invoiceHdr->igst_amount      	 = ($invoiceHdr->net_amount * $IGST) / 100;
                    $invoiceHdr->net_total_amount 	 = round($invoiceHdr->net_amount + $invoiceHdr->igst_amount);
                }
                $invoiceHdr->created_by		  	 = USERID;
            }
            if(!empty($invoiceHdrData) && !empty($invoiceHdr->save()) && !empty($invoiceHdr->id)) {
                foreach ($invoiceHdrData as $key => $orderValue) {
                    $invoiceHdrDetail                   = new InvoiceHdrDetail();
                    $invoiceHdrDetail->invoice_hdr_id   = $invoiceHdr->id;
                    $invoiceHdrDetail->order_id         = $orderValue->order_id;
                    $invoiceHdrDetail->order_amount     = $orderValue->order_amount;
                    $invoiceHdrDetail->order_discount   = $orderValue->order_discount;
                    $invoiceHdrDetail->extra_amount     = $orderValue->extra_amount;
                    $invoiceHdrDetail->surcharge_amount = $orderValue->surcharge_value;
                    $invoiceHdrDetail->save();
                    if (!empty($invoiceHdrDetail->id)) {
                        //Manage order process log
                        $order->updateOrderStausLog($invoiceHdrDetail->order_id, '8');
			if(!empty($invoice->orderDispatchedStatus($invoiceHdrDetail->order_id))){
			    $order->updateOrderStatusToNextPhase($invoiceHdrDetail->order_id, '11');
			}else{
			    $order->updateOrderStatusToNextPhase($invoiceHdrDetail->order_id, '9');
			}
                        $invoiceHdrDetailInfo[$invoiceHdrDetail->order_id] = $invoiceHdrDetail->order_id;
                    }
                }
                if (!empty($invoiceHdrDetailInfo)) {
                    $flag[] = $invoiceHdr->id;
                }
            }
        }

        //echo '<pre>';print_r($invoiceInfo);echo '</pre>';die;
        return $flag;
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function generateInvoiceMonthly($currentDate,$order_ids,$customer_id,$division_id,$product_category_id,$billing_type_id, $SGST, $CGST, $IGST) {

        global $order, $invoice;

        $flag = $invoiceInfo = $invoiceHdrData = $invoiceHdrDetailInfo = $totalAmount = $totalDiscount = array();
	
        $orderInvoicesObj = DB::table('order_master')
		->join('customer_master','customer_master.customer_id','order_master.customer_id')
		->select('order_master.order_id', 'order_master.order_no', 'order_master.order_date', 'order_master.product_category_id','order_master.customer_id', 'order_master.division_id', 'order_master.discount_type_id', 'order_master.discount_value','order_master.surcharge_value','order_master.extra_amount','customer_master.customer_state','order_master.invoicing_to','order_master.billing_type_id')
		->where('order_master.customer_id', $customer_id)
		->where('order_master.billing_type_id','=',$billing_type_id)
		->where('order_master.division_id', $division_id)
		->whereIn('order_master.order_id', $order_ids)
		->where('order_master.status', '8');   //completed for report and ready for invoice generation
		
	if(!empty($product_category_id) && is_numeric($product_category_id)){
	    $orderInvoicesObj->where('order_master.product_category_id', $product_category_id);	
	}	
	$orderInvoicesData = $orderInvoicesObj->orderBy('order_master.order_date', 'DESC')->get();
		
	if (!empty($orderInvoicesData)) {
            foreach ($orderInvoicesData as $key => $orders) {
		$invoice->updateCustomerStateDefinedInInvoicingToColumn($orders); //Updating Customer State According to Invocing-To Defined at the time of Order Booking
                list($perTotalAmount,$perTotalDiscount) = $invoice->getOrderInvoivingPrice($orders->customer_id, $orders->order_id, $orders->discount_type_id, $orders->discount_value);
                $orders->order_amount                   = $perTotalAmount;
                $orders->order_discount                 = $perTotalDiscount;
                $invoiceHdrData[$orders->order_id]      = $orders;
                $totalAmount[$key]                      = $perTotalAmount;
                $totalDiscount[$key]                    = $perTotalDiscount;
                $totalSurchargeAmount[$key]             = $orders->surcharge_value;
                $totalExtraAmount[$key]                 = $orders->extra_amount;
                $invoiceHdr                             = new invoiceHdr();
                $invoiceHdr->division_id                = $orders->division_id;
		$invoiceHdr->product_category_id    	= $orders->product_category_id;
                $invoiceHdr->invoice_no                 = $invoice->generateInvoiceNumber($currentDate,$orders->product_category_id,$orders->division_id);
                $invoiceHdr->invoice_date               = $currentDate;
                $invoiceHdr->invoice_type               = $orders->billing_type_id;
                $invoiceHdr->customer_id                = $orders->customer_id;
                $invoiceHdr->total_amount               = array_sum($totalAmount);
                $invoiceHdr->total_discount             = array_sum($totalDiscount);
                $invoiceHdr->surcharge_amount           = array_sum($totalSurchargeAmount);
                $invoiceHdr->extra_amount               = array_sum($totalExtraAmount);
                $invoiceHdr->net_amount                 = $invoiceHdr->surcharge_amount + $invoiceHdr->extra_amount + ($invoiceHdr->total_amount - $invoiceHdr->total_discount);
                if($orders->customer_state == '13'){         //In case Haryana
                    $invoiceHdr->sgst_rate        	= $SGST;
                    $invoiceHdr->sgst_amount      	= ($invoiceHdr->net_amount * $SGST) / 100;
                    $invoiceHdr->cgst_rate        	= $CGST;
                    $invoiceHdr->cgst_amount      	= ($invoiceHdr->net_amount * $CGST) / 100;
                    $invoiceHdr->net_total_amount 	= round($invoiceHdr->net_amount + $invoiceHdr->sgst_amount + $invoiceHdr->cgst_amount);
                }else{                                                  //In case outside Haryana
                    $invoiceHdr->igst_rate        	= $IGST;
                    $invoiceHdr->igst_amount      	= ($invoiceHdr->net_amount * $IGST) / 100;
                    $invoiceHdr->net_total_amount 	= round($invoiceHdr->net_amount + $invoiceHdr->igst_amount);
                }
                $invoiceHdr->created_by           	= USERID;
            }
            if(!empty($invoiceHdrData) && !empty($invoiceHdr->save()) && !empty($invoiceHdr->id)) {
                foreach ($invoiceHdrData as $key => $orderValue) {
                    $invoiceHdrDetail                   = new InvoiceHdrDetail();
                    $invoiceHdrDetail->invoice_hdr_id   = $invoiceHdr->id;
                    $invoiceHdrDetail->order_id         = $orderValue->order_id;
                    $invoiceHdrDetail->order_amount     = $orderValue->order_amount;
                    $invoiceHdrDetail->order_discount   = $orderValue->order_discount;
                    $invoiceHdrDetail->extra_amount     = $orderValue->extra_amount;
                    $invoiceHdrDetail->surcharge_amount = $orderValue->surcharge_value;
                    $invoiceHdrDetail->save();
                    if (!empty($invoiceHdrDetail->id)) {
                        //Manage order process log
                        $order->updateOrderStausLog($invoiceHdrDetail->order_id, '8');
			if(!empty($invoice->orderDispatchedStatus($invoiceHdrDetail->order_id))){
			    $order->updateOrderStatusToNextPhase($invoiceHdrDetail->order_id, '11');
			}else{
			    $order->updateOrderStatusToNextPhase($invoiceHdrDetail->order_id, '9');
			}
                        $invoiceHdrDetailInfo[$invoiceHdrDetail->order_id] = $invoiceHdrDetail->order_id;
                    }
                }
                if (!empty($invoiceHdrDetailInfo)){
                    $flag[] = $invoiceHdr->id;
                }
            }
        }

        //echo '<pre>';print_r($invoiceInfo);echo '</pre>';die;
        return $flag;
    }

	 /**
     * function to generate invoice for customers having billing type PO-wise
     *
     * @return \Illuminate\Http\Response
     */
    public function generateInvoicePOWise($currentDate,$order_ids,$customer_id,$division_id,$product_category_id,$billing_type_id, $SGST, $CGST, $IGST) {

        global $order, $invoice;

        $flag = $invoiceInfo = $invoiceHdrData = $invoiceHdrDetailInfo = $totalAmount = $totalDiscount = array();

        $orderInvoicesObj = DB::table('order_master')
                ->join('customer_master','customer_master.customer_id','order_master.customer_id')
                ->select('order_master.po_no','order_master.order_id', 'order_master.order_no', 'order_master.order_date', 'order_master.product_category_id','order_master.customer_id', 'order_master.division_id', 'order_master.discount_type_id', 'order_master.discount_value','order_master.surcharge_value','order_master.extra_amount','customer_master.customer_state','order_master.invoicing_to','order_master.billing_type_id')
                ->where('order_master.customer_id', $customer_id)
		->where('order_master.billing_type_id','=',$billing_type_id)
		->where('order_master.division_id', $division_id)
		->whereIn('order_master.order_id', $order_ids)
		->whereNotNull('order_master.po_no')
                ->where('order_master.status', '8');    //completed for report and ready for invoice generation
	
	if(!empty($product_category_id) && is_numeric($product_category_id)){
	    $orderInvoicesObj->where('order_master.product_category_id', $product_category_id);	
	}	
	$orderInvoicesData = $orderInvoicesObj->orderBy('order_master.order_date', 'DESC')->get();

        if (!empty($orderInvoicesData)) {
            foreach ($orderInvoicesData as $key => $orders) {
		$invoice->updateCustomerStateDefinedInInvoicingToColumn($orders); //Updating Customer State According to Invocing-To Defined at the time of Order Booking
                list($perTotalAmount, $perTotalDiscount) = $invoice->getOrderInvoivingPrice($orders->customer_id,$orders->order_id, $orders->discount_type_id, $orders->discount_value);
                $orders->order_amount               = $perTotalAmount;
                $orders->order_discount             = $perTotalDiscount;
                $invoiceHdrData[$orders->order_id]  = $orders;
                $totalAmount[$key]                  = $perTotalAmount;
                $totalDiscount[$key]                = $perTotalDiscount;
                $totalSurchargeAmount[$key]         = $orders->surcharge_value;
                $totalExtraAmount[$key]             = $orders->extra_amount;
                $invoiceHdr                         = new invoiceHdr();
                $invoiceHdr->division_id            = $orders->division_id;
		$invoiceHdr->product_category_id    = $orders->product_category_id;
                $invoiceHdr->invoice_no             = $invoice->generateInvoiceNumber($currentDate,$orders->product_category_id,$orders->division_id);
                $invoiceHdr->invoice_date           = $currentDate;
                $invoiceHdr->invoice_type           = $orders->billing_type_id;
                $invoiceHdr->customer_id            = $orders->customer_id;
                $invoiceHdr->total_amount           = array_sum($totalAmount);
                $invoiceHdr->total_discount         = array_sum($totalDiscount);
                $invoiceHdr->surcharge_amount       = array_sum($totalSurchargeAmount);
                $invoiceHdr->extra_amount           = array_sum($totalExtraAmount);
                $invoiceHdr->net_amount             = $invoiceHdr->surcharge_amount + $invoiceHdr->extra_amount + ($invoiceHdr->total_amount - $invoiceHdr->total_discount);
                if($orders->customer_state == '13'){         //In case Haryana
                    $invoiceHdr->sgst_rate          = $SGST;
                    $invoiceHdr->sgst_amount        = ($invoiceHdr->net_amount * $SGST) / 100;
                    $invoiceHdr->cgst_rate          = $CGST;
                    $invoiceHdr->cgst_amount        = ($invoiceHdr->net_amount * $CGST) / 100;
                    $invoiceHdr->net_total_amount   = round($invoiceHdr->net_amount + $invoiceHdr->sgst_amount + $invoiceHdr->cgst_amount);
                }else{                                                  //In case outside Haryana
                    $invoiceHdr->igst_rate          = $IGST;
                    $invoiceHdr->igst_amount        = ($invoiceHdr->net_amount * $IGST) / 100;
                    $invoiceHdr->net_total_amount   = round($invoiceHdr->net_amount + $invoiceHdr->igst_amount);
                }
                $invoiceHdr->created_by             = USERID;
            }
            if (!empty($invoiceHdrData) && !empty($invoiceHdr->save()) && !empty($invoiceHdr->id)) {
                foreach ($invoiceHdrData as $key => $orderValue) {
                    $invoiceHdrDetail                   = new InvoiceHdrDetail();
                    $invoiceHdrDetail->invoice_hdr_id   = $invoiceHdr->id;
                    $invoiceHdrDetail->order_id         = $orderValue->order_id;
                    $invoiceHdrDetail->order_amount     = $orderValue->order_amount;
                    $invoiceHdrDetail->order_discount   = $orderValue->order_discount;
                    $invoiceHdrDetail->extra_amount     = $orderValue->extra_amount;
                    $invoiceHdrDetail->surcharge_amount = $orderValue->surcharge_value;
                    $invoiceHdrDetail->save();
                    if (!empty($invoiceHdrDetail->id)) {
			//Manage order process log
			$order->updateOrderStausLog($invoiceHdrDetail->order_id, '8');
			if(!empty($invoice->orderDispatchedStatus($invoiceHdrDetail->order_id))){
			    $order->updateOrderStatusToNextPhase($invoiceHdrDetail->order_id, '11');
			}else{
			    $order->updateOrderStatusToNextPhase($invoiceHdrDetail->order_id, '9');
			}
			$invoiceHdrDetailInfo[$invoiceHdrDetail->order_id] = $invoiceHdrDetail->order_id;
                    }
                }
                if (!empty($invoiceHdrDetailInfo)){
                    $flag[] = $invoiceHdr->id;
                }
            }
        }

        //echo '<pre>';print_r($invoiceInfo);echo '</pre>';die;
        return $flag;
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
	/**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function getInvoiceDetail($invoice_id) {

        global $order, $invoice, $numbersToWord;

        $error       = '0';
        $message     = config('messages.message.error');
        $data        = '';
        $invoiceData = array();

        if (!empty($invoice_id)) {

            $invoiceDetailList = DB::table('invoice_hdr')
                ->join('invoice_hdr_detail', 'invoice_hdr_detail.invoice_hdr_id', 'invoice_hdr.invoice_id')
                ->join('order_master', 'order_master.order_id', 'invoice_hdr_detail.order_id')
                ->join('product_master_alias','product_master_alias.c_product_id','order_master.sample_description_id')
                ->join('order_report_details', 'order_report_details.report_id', 'order_master.order_id')
                ->join('customer_master', 'customer_master.customer_id', 'invoice_hdr.customer_id')
                ->join('state_db','state_db.state_id','customer_master.customer_state')
                ->join('city_db','customer_master.customer_city','city_db.city_id')
		->join('users as invoiceByTb', 'invoiceByTb.id', 'invoice_hdr.created_by')
                ->leftjoin('customer_master as invoicing_master','invoicing_master.customer_id','order_master.invoicing_to')
                ->leftjoin('city_db as invoicingToCity','invoicingToCity.city_id','invoicing_master.customer_city')
                ->leftjoin('state_db as invoicingToState','invoicingToState.state_id','invoicing_master.customer_state')
		->leftJoin('template_dtl', function($join){
		    $join->on('template_dtl.division_id', '=', 'invoice_hdr.division_id');
		    $join->where('template_dtl.template_type_id','=','2');
		    $join->where('template_dtl.template_status_id','=','1');
		})
                ->select('customer_master.customer_name', 'customer_master.customer_email', 'customer_master.customer_address','customer_master.customer_state','customer_master.customer_city','customer_master.customer_gst_no','city_db.city_name as customer_city_name','state_db.state_name as customer_state_name','order_master.order_date', 'order_master.sample_description_id', 'order_master.batch_no', 'order_master.order_no', 'order_master.order_id', 'order_master.discount_type_id', 'order_master.discount_value','order_master.product_category_id','order_master.billing_type_id','order_master.po_no','invoice_hdr.*', 'order_report_details.report_file_name','order_report_details.report_no','product_master_alias.c_product_name as sample_description','order_master.invoicing_to as alternate_customer_address','invoice_hdr_detail.order_amount','invoice_hdr_detail.order_discount','invoicing_master.customer_address as altInvoicingAddress','invoicingToState.state_name as invoicing_state','invoicingToCity.city_name as invoicing_city','invoicing_master.customer_name as invoicingCustomerName','invoicing_master.customer_gst_no as invoicingCustomerGSTo','invoiceByTb.name as invoice_by','invoiceByTb.user_signature','template_dtl.header_content','template_dtl.footer_content')
                ->where('invoice_hdr.invoice_id', $invoice_id)
                ->where('invoice_hdr.invoice_status', '1')
                ->orderBy('order_master.order_no', 'ASC')
		->orderBy('order_master.order_no', 'ASC')
                ->get();

            if (!empty($invoiceDetailList)) {
                foreach ($invoiceDetailList as $key => $values) {

                    $invoiceData['invoiceHeader'] = array(
                        'invoice_id'            => $values->invoice_id,
                        'invoice_no'            => $values->invoice_no,
                        'customer_name'         => !empty($values->invoicingCustomerName) ? ucfirst($values->invoicingCustomerName) : ucfirst($values->customer_name),
                        'customer_city_name'    => !empty($values->invoicing_city) ? strtoupper($values->invoicing_city) : strtoupper($values->customer_city_name),
                        'customer_state_name'   => !empty($values->invoicing_state) ? strtoupper($values->invoicing_state) : strtoupper($values->customer_state_name),
                        'customer_address'      => !empty($values->altInvoicingAddress) ? $values->altInvoicingAddress : $values->customer_address,
                        'customer_gst_no'       => !empty($values->invoicingCustomerGSTo) ? strtoupper($values->invoicingCustomerGSTo) : strtoupper($values->customer_gst_no),
                        'invoice_date'          => date(DATEFORMAT,strtotime($values->invoice_date)),
			'order_no'          	=> $values->order_no,
			'billing_type'          => $values->billing_type_id,
			'invoice_by'		=> $values->invoice_by,
			'user_sign_path'	=> SITE_URL.SIGN_PATH,
			'user_signature'	=> $values->user_signature,
			'invoice_file_name'     => $values->invoice_file_name,
			'header_content' 	=> $values->header_content,
			'footer_content' 	=> $values->footer_content,
                        'invoice_file_name_without_hf' => $values->invoice_file_name_without_hf
                    );

		    if(!empty($values->billing_type_id) && !empty($values->po_no) && $values->billing_type_id == '5'){
			$invoiceData['invoiceBody'][$values->po_no][$key] = array(
			    'order_id'          => $values->order_id,
			    'po_no'          	=> $values->po_no,
			    'name_of_product'   => $values->sample_description,
			    'batch_no'          => $values->batch_no,
			    'order_no'          => $values->order_no,
			    'report_no'         => $values->report_no,
			    'report_file_name'  => $values->report_file_name,
			    'amount'            => $values->order_amount,
			    'product_category_id' => $values->product_category_id,
			);
		    }else{
			$invoiceData['invoiceBody'][$key] = array(
			    'order_id'          => $values->order_id,
			    'po_no'          	=> $values->po_no,
			    'name_of_product'   => $values->sample_description,
			    'batch_no'          => $values->batch_no,
			    'order_no'          => $values->order_no,
			    'report_no'         => $values->report_no,
			    'report_file_name'  => $values->report_file_name,
			    'amount'            => $values->order_amount,
			    'product_category_id' => $values->product_category_id,
			);
		    }

                    $invoiceData['invoiceFooter'] = array(
                        'total'              => $values->total_amount,
                        'discount'           => $values->total_discount,
                        'discount_text'      => !empty($values->discount_type_id) && $values->discount_type_id == '2' ? '('.$values->discount_value.'%)' : '0',
			'net_amount'         => !empty($values->total_discount) && round($values->total_discount) > '0' ? number_format((float) $values->total_amount - $values->total_discount, 2, '.', '') : '',
                        'surcharge_amount'   => $values->surcharge_amount,
                        'extra_amount'       => $values->extra_amount,
                        'sgst_rate'          => $values->sgst_rate,
                        'sgst_amount'        => $values->sgst_amount,
                        'cgst_rate'          => $values->cgst_rate,
                        'cgst_amount'        => $values->cgst_amount,
                        'igst_rate'          => $values->igst_rate,
                        'igst_amount'        => $values->igst_amount,
                        'net_total'          => number_format($values->net_total_amount, 2),
                        'net_total_in_words' => strtoupper($numbersToWord->number_to_word($values->net_total_amount))
                    );
                }
            }
            $error = '1';
            $message = '';
        }

       // echo '<pre>';print_r($invoiceData['invoiceBody']);echo '</pre>';die;
        return response()->json(['error' => $error, 'message' => $message, 'invoice_id' => $invoice_id, 'invoiceDetailList' => $invoiceData]);
    }

    /**
     * generate final report pdf
     *
     * $Request
     * @return \Illuminate\Http\Response
     */
    public function uploadInvoicePdf(Request $request) {

        global $order, $invoice, $models, $mail;

        $error    = '0';
        $message  = config('messages.message.error');
        $data     = array();
        $flag     = '0';
        $formData = array();

        //echo'<pre>'; print_($formData); die;
        if (!empty($request['invoice_file'])) {
            $formData = array_filter($request->all());
            if (!empty($formData['invoice_id'])) {
                $invoice_id = $invoice->getOrderInvoiceDetails($formData['invoice_id']);
                if (!empty($invoice_id->invoice_id)) {
                    $updated = DB::table('invoice_hdr')->where('invoice_id', '=', $invoice_id->invoice_id)->update(['invoice_file_name' => $formData['invoice_file_name']]);
                    if ($updated) {
                        //generate pdf file in public/images/sales/invoices folder
                        $invoice_file = $formData['invoice_file'];
                        list($type, $invoice_file) = explode(';', $invoice_file);
                        list(, $invoice_file) = explode(',', $invoice_file);
                        $invoice_file = base64_decode($invoice_file);
                        if (!file_exists(DOC_ROOT . INVOICE_PATH)) {
                            mkdir(DOC_ROOT . INVOICE_PATH, 0777, true);
                        }
                        $pdf = fopen(DOC_ROOT . INVOICE_PATH . $formData['invoice_file_name'], 'w');
                        fwrite($pdf, $invoice_file);
                        fclose($pdf);

                        //******************send mail to customers********************//
                        $mailTemplateType = "3";
                        $requiredData = array('invoice_id' => $invoice_id->invoice_id, 'mailTemplateType' => $mailTemplateType);
                        $mail->sendMail($requiredData);
                        //******************send mail to customers********************//

                        $message = config('messages.message.invoiceGenerated');
                        $error = 1;
                    }
                }
            }
        }
        return response()->json(array('error' => $error, 'message' => $message, 'formData' => $formData));
    }

    /**
    * Dispatch Order.
    *
    * @param  int  $id
    * @return \Illuminate\Http\Response
    */
    public function dispatchOrder(Request $request){

        global $order,$models;

        $error            = '0';
        $message          = config('messages.message.OrderDispatchedFailedMsg');
		$currentDateTime  = CURRENTDATETIME;
        $user_id          = defined('USERID') ? USERID : '0';
        $formData         = array();

        //Listing of Invoices according to billing type
        if(!empty($request->formData) && $request->isMethod('post')){

            //Parsing Value of form data
            parse_str($request->formData, $formData);

            if(empty($formData['dispatch_date'])){
                $message = config('messages.message.dispatchDateRequired');
            }else if(empty($formData['invoice_id'])){
                $message = config('messages.message.error');
            }else{
                try{
                    //Unsetting the variable from request data
                    $formData = $models->unsetFormDataVariables($formData,array('_token'));
                    $invoiceHdrDetail = DB::table('invoice_hdr_detail')->where('invoice_hdr_detail.invoice_hdr_id',$formData['invoice_id'])->get();

                    if(!empty($invoiceHdrDetail)){
                        foreach($invoiceHdrDetail as $invoiceHdr){

                            $orderDispatchDtl 	= DB::table('order_dispatch_dtl')->where('order_dispatch_dtl.order_id',$invoiceHdr->order_id)->where('order_dispatch_dtl.amend_status','=','0')->first();
                            $arNumber 		= !empty($formData['ar_bill_no']) ? $formData['ar_bill_no'] : NULL;
			    $dispatchDate 	= $order->getFormatedDateTime($formData['dispatch_date'], $format='Y-m-d');
			    
			    if(empty($orderDispatchDtl)){
                                $dataSave                   = array();
                                $dataSave['order_id']       = $invoiceHdr->order_id;
                                $dataSave['dispatch_by']    = $user_id;
                                $dataSave['ar_bill_no']     = $arNumber;
                                $dataSave['dispatch_date']  = $dispatchDate;

                                if(!empty($dataSave['order_id']) && DB::table('order_dispatch_dtl')->insertGetId($dataSave)){
                                    $error   = '1';
                                    $order->updateOrderStausLog($dataSave['order_id'], '11');       //update Order Status and Log
                                    $message = config('messages.message.OrderDispatchedMsg');
                                }
                            }else{
				DB::table('order_dispatch_dtl')->where('order_dispatch_dtl.amend_status','=','0')->where('order_dispatch_dtl.order_id',$invoiceHdr->order_id)->update(['ar_bill_no'=>$arNumber,'dispatch_date'=>$dispatchDate,'dispatch_by'=>$user_id]);
				$error   = '1';
				$order->updateOrderStausLog($invoiceHdr->order_id, '11');       //update Order Status and Log
				$message = config('messages.message.OrderDispatchedMsg');
			    }
                        }
                    }
                }catch(\Illuminate\Database\QueryException $ex){
                    $message = config('messages.message.savedError');
                }
            }
        }

	return response()->json(['error' => $error,'message' => $message]);
    }

    /********************************************************************
    * Description : update Customer State Defined In Invoicing-To Column of Order Master
    * Date        : 05-02-2018
    * Author      : Praveen Singh
    * Parameter   : \Illuminate\Http\Request  $request
    * @return     : \Illuminate\Http\Response
    ***********************************************************************/
    public function viewInvoiceOrderDetail(Request $request){

	global $order,$models;

	$error      = '0';
	$message    = config('message.message.error');
	$invoice_id = !empty($request['formData']) ? $request['formData'] : '' ;
	$returnData  = array();

	if($invoice_id){

	    $getOrderIds = DB::table('invoice_hdr_detail')
		->leftJoin('invoice_hdr','invoice_hdr.invoice_id','invoice_hdr_detail.invoice_hdr_id')
		->where('invoice_hdr_detail.invoice_hdr_id','=',$invoice_id)
		->select('invoice_hdr_detail.order_id','invoice_hdr.invoice_no')
		->get();

	    if(!empty($getOrderIds)){
		foreach($getOrderIds as $key => $value){
		    $returnData[$key] =  DB::table('order_master')
					->leftJoin('order_report_details','order_report_details.report_id','order_master.order_id')
					->leftJoin('invoice_hdr_detail','invoice_hdr_detail.order_id','order_master.order_id')
					->leftJoin('order_sample_priority','order_sample_priority.sample_priority_id','order_master.sample_priority_id')
					->leftJoin('order_status','order_status.order_status_id','order_master.status')
					->leftJoin('divisions','divisions.division_id','order_master.division_id')
					->leftJoin('customer_master','customer_master.customer_id','order_master.customer_id')
					->leftJoin('city_db','city_db.city_id','customer_master.customer_city')
					->leftJoin('product_master','product_master.product_id','order_master.product_id')
					->leftJoin('state_db','state_db.state_id','customer_master.customer_state')
					->leftJoin('product_master_alias','product_master_alias.c_product_id','order_master.sample_description_id')
					->leftJoin('samples','samples.sample_id','order_master.sample_id')
					->select('order_master.*','customer_master.customer_name','product_master_alias.c_product_name as sample_description','divisions.*','city_db.city_name','invoice_hdr_detail.order_amount','invoice_hdr_detail.order_discount','order_status.order_status_name','order_sample_priority.sample_priority_name','order_report_details.report_no')
					->where('order_master.order_id','=',$value->order_id)
					->first();

		    $invoiceNumber = $value->invoice_no;
		    $models->formatTimeStampFromArray($returnData,DATETIMEFORMAT);
		    $error = '1';
		}
	    }
	}

	//echo'<pre>';print_r($orderData); die;
	return response()->json(array('error' => $error,'message' => $message,'orderDetail' => $returnData,'invoiceNumber' => $invoiceNumber));
    }
    
    /********************************************************************
    * Description : update Customer State Defined In Invoicing-To Column of Order Master
    * Date        : 05-02-2018
    * Author      : Ruby Singh
    * Parameter   : \Illuminate\Http\Request  $request
    * @return     : \Illuminate\Http\Response
    ***********************************************************************/
    public function getPurchaseOrderDetail(Request $request){

	global $order,$models;

	$error      = '0';
	$message    = config('message.message.error');
	$returnData = array();
	
	//Saving record in orders table
	if(!empty($request->formData) && $request->isMethod('post')){

	    //Parsing the Serialze Dta
	    parse_str($request->formData, $formData);
	    
	    $user_id            		= defined('USERID') ? USERID : '0';
	    $defaultDepartmentIds     		= defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
	    $defaultDivisionId        		= defined('DIVISIONID') ? DIVISIONID : '0';
	    $defaultUserDepartmentIds   	= defined('USER_DEPARTMENT_IDS') ? USER_DEPARTMENT_IDS : '0';
	    $formData['division_id']   		= !empty($formData['division_id']) ? $formData['division_id'] : $defaultDivisionId;
	    $formData['product_category_id']   	= !empty($formData['product_category_id']) ? array($formData['product_category_id']) : $defaultUserDepartmentIds;
	    $formData['billing_type']		= !empty($formData['billing_type']) ? $formData['billing_type'] : '0';
	    
	    if(!empty($formData['division_id']) && !empty($formData['product_category_id']) && !empty($formData['billing_type']) && !empty($formData['customer_id'])){
		$returnData = DB::table('order_master')
			    ->select('order_master.po_no',DB::raw('CONCAT(order_master.po_no,"/",order_master.po_date) as purchaseOrder'))
			    ->whereNotNull('order_master.po_no')
			    ->where('order_master.customer_id','=',$formData['customer_id'])
			    ->where('order_master.division_id', $formData['division_id'])
			    ->whereIn('order_master.product_category_id', $formData['product_category_id'])
			    ->where('order_master.billing_type_id','=',$formData['billing_type'])
			    ->where('order_master.status','=','8')
			    ->whereNull('order_master.order_sample_type')
			    ->groupBy('order_master.po_no')
			    ->orderBy('order_master.po_no','ASC')			    
			    ->get();
	    }
	}

	$returnData = !empty($returnData) ? $returnData : array();
	$error      = !empty($returnData) ? '1' : '0';

	//echo'<pre>';print_r($returnData); die;
	return response()->json(array('error'=>$error,'message'=>$message,'purchaseOrderNoList' => $returnData));
    }
    
    /**
    * Display the specified resource.
    *
    * @param  int  $id
    * @return \Illuminate\Http\Response
    */
    public function viewInvoicingReport(Request $request,$order_id){

        global $order,$report,$models,$invoice;

        $error   = '0';
        $message = '';
        $data    = '';
        $rawTestProductStdParaList = $categoryWiseParamenter = $categoryWiseParamenterArr = array();

        if($order_id){

	    $error              	= '1';
	    $equipment_type_ids 	= defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : array();
	    $role_ids           	= defined('ROLE_IDS') ? ROLE_IDS : '0';
	    $user_id            	= defined('USERID') ? USERID : '0';
	    $orderList              	= $order->getOrder($order_id);
	    $testProductStdParaList 	= $order->getOrderParameters($order_id);
	    $allowedExceptionParameters = array('description','description(cl:3.2.1)','description(cl:3.2)');

	    list($invoicingRates,$invoicingParameterRates) = $invoice->getReportsInvoicingRates($orderList->customer_id,$orderList->order_id);
	    $orderList->invoiceRate =!empty($invoicingRates) ?  $invoicingRates : '0';
	    $invoicingParameterRate['invoiceRate'] = !empty($invoicingParameterRates) ? $invoicingParameterRates : array();
	    
	    //invoicing_type_id to formate order and Report date
	    $models->formatTimeStamp($orderList,DATETIMEFORMAT);

            if(!empty($testProductStdParaList)){
                foreach($testProductStdParaList as $key => $values){
		    //checking if desccription has been edited or not
		    if(!empty($values->test_parameter_name) && in_array(strtolower($values->test_parameter_name),$allowedExceptionParameters)){
			if(!empty($values->test_result) && strtolower($values->test_result) != 'n/a'){
			    $values->description = $values->test_result;
			}
		    }
		    if(!empty($values->test_parameter_name) && strtolower($values->test_parameter_name) == 'reference to protocol'){
			if(!empty($values->test_result) && strtolower($values->test_result) != 'n/a'){
			    $values->description = $values->test_result;
			}
		    }
		    $rawTestProductStdParaList[$values->analysis_id]  = $values;
                }
            }
	    
            if(!empty($rawTestProductStdParaList)){
                foreach($rawTestProductStdParaList as $analysis_id => $values){
		    $values->invoicingGroupName = $invoice->assignInvoicingGroupForAssigningRates($values);
                    $models->getRequirementSTDFromTo($values,$values->standard_value_from,$values->standard_value_to);
		    $categoryWiseParamenter[$values->test_para_cat_id]['categorySortBy']   	= $values->category_sort_by;
		    $categoryWiseParamenter[$values->test_para_cat_id]['categoryId']          	= $values->test_para_cat_id;
                    $categoryWiseParamenter[$values->test_para_cat_id]['categoryName']          = $values->test_para_cat_name;
		    $categoryWiseParamenter[$values->test_para_cat_id]['productCategoryName']   = str_replace(' ','',strtolower($values->test_para_cat_name));
		    foreach($invoicingParameterRate['invoiceRate'] as $invoiceRateKey => $val){if($invoiceRateKey == $values->invoicingGroupName){$values->invoicingRates = number_format($val,2);}}
		    $categoryWiseParamenter[$values->test_para_cat_id]['categoryParams'][] = $values;
                }
                $categoryWiseParamenterArr = $models->sortArrayAscOrder(array_values($categoryWiseParamenter));
            }
        }
        
	//echo'<pre>'; print_r($categoryWiseParamenterArr);die;
        return response()->json(['error'=> $error, 'message'=> $message, 'orderList'=> $orderList, 'orderParameterList' => $categoryWiseParamenterArr]);
    }
    
    /**
     * DELETE.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function deleteInvoice(Request $request, $invoice_id) {

        $error   = '0';
        $message = '';
        $data    = '';
        $currentDate    = defined('CURRENTDATETIME') ? CURRENTDATETIME : date('Y-m-d H:i:s');

        try {
            if(DB::table('invoice_hdr')->where('invoice_hdr.invoice_id', '=', $invoice_id)->delete()){
                $error = '1';
                $message = config('messages.message.invoiceDeleteMsg');
            } else {
                $message = config('messages.message.invoiceForeignKeConstFail');
            }
        } catch (\Illuminate\Database\QueryException $ex) {
            $message = config('messages.message.invoiceForeignKeConstFail');
        }
        return response()->json(['error' => $error, 'message' => $message]);
    }
}
