<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models;
use App\Http\Requests;
use Auth;
use App\Unit;
use Validator;
use Route;
use DB;

class UnitController extends Controller
{
	/**
	 * protected Variable.
	 */
	protected $auth;
	
	/**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        global $models;
		$models = new Models();
		$this->middleware('auth'); 
		$this->middleware(function ($request, $next) {
            $this->session = Auth::user();
			parent::__construct($this->session);
			//Checking current request is allowed or not
			$allowedAction = array('index','navigation');
			$actionData    = explode('@',Route::currentRouteAction());
			$action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])): '0';			
			if(defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action,$allowedAction)){
				return redirect('dashboard')->withErrors('Permission Denied!');
			}
            return $next($request);
		 });
    }	
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $user_id            = defined('USERID') ? USERID : '0';
        $division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';		
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';		
        $equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';
		
        return view('inventory.units.index',['title' => 'Units','_units' => 'active','user_id' => $user_id,'division_id' => $division_id,'equipment_type_ids' => $equipment_type_ids]);
    }
	
	//autogenerate code
	public function getAutoGeneratedCode(Request $request)
    {
		global $models;
		$prefix=!empty(config('messages.message.unitPrefix'))?config('messages.message.unitPrefix'):'UNIT';
		$code=$models->generateCode($prefix,'units_db','unit_code','unit_id');						  
		return response()->json(['uniqueCode' =>$code]);		
	}
	
    /** create new company
     *  Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function createUnit(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')) {
			if(!empty($request['data']['formData'])){  
				//pasrse searlize data 
				$newPostData = array();
				parse_str($request['data']['formData'], $newPostData);   
				if(empty($newPostData['unit_code']))
				{
					$returnData = array('error' => config('messages.message.unitCodeRequired'));
				}else if(empty($newPostData['unit_name'])){
					$returnData = array('error' => config('messages.message.unitNameRequired'));
				}else if(empty($newPostData['unit_desc'])){
					$returnData = array('error' => config('messages.message.unitDescRequired'));
				}else{ 
					// check if unit already exist or not 
					if(empty($this->isUnitExist($newPostData['unit_code'],$newPostData['unit_name']))){ 
						$created = Unit::create([
							'unit_code' => $newPostData['unit_code'],
							'unit_name' => $newPostData['unit_name'],
							'created_by' => \Auth::user()->id,
							'unit_desc' => $newPostData['unit_desc']
							]);						
						//check if users created add data in user detail
						if($created->id){ 
							$returnData = array('success' => config('messages.message.unitSaved'));
						}else{
							$returnData = array('error' => config('messages.message.unitNotSaved'));
						}
					}else{
						$returnData = array('error' => config('messages.message.unitExist'));
					}
				}
			}else{
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		}else{
			$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
		} 
		return response()->json($returnData);		
    }

    /**
     * Get list of units on page load.
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function getUnitsList()
    {	
		global $models;
		$units = DB::table('units_db') 
				->join('users','units_db.created_by','users.id')	
		        ->select('units_db.*','users.name as createdBy')->get();		
		$models->formatTimeStampFromArray($units,DATETIMEFORMAT);
		return response()->json([
		   'unitsList' => $units,
		]);
    }   


    /**
     * isUnitExist Is used to check the company duplicate entry by unit_code
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function isUnitExist($unit_code,$unit_name) 
    { 
		if(!empty($unit_code)){ 
			$unitData = DB::table('units_db')
						->where('units_db.unit_code', '=',$unit_code)
						->orwhere('units_db.unit_name', '=',$unit_name)
						->first();
			if(!empty($unitData)){
				return $unitData->unit_id;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
	
    
    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function editUnitData(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')) {
			if(!empty($request['data']['id'])){
				// get user by email id
				$unitData = DB::table('units_db')
							->where('units_db.unit_id', '=', $request['data']['id'])
							->first();
				
				if($unitData->unit_id){
					$returnData = array('responseData' => $unitData);				
				}else{
					$returnData = array('error' => config('messages.message.noRecordFound'));
				}
			}else{
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		}else{
				$returnData = array('error' => config('messages.message.provideAppData'));			
		}
		return response()->json($returnData);	
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function updateUnitData(Request $request)
    {
        $returnData = array();
		if ($request->isMethod('post')) {
			if(!empty($request['data']['formData'])){   
				//pasrse searlize data 
				$newPostData = array();
				parse_str($request['data']['formData'], $newPostData);   
				if(empty($newPostData['unit_id1']))
				{
					$returnData = array('error' => config('messages.message.unitCodeRequired'));
				}else if(empty($newPostData['unit_name1'])){
					$returnData = array('error' => config('messages.message.unitNameRequired'));
				}else if(empty($newPostData['unit_desc1'])){
					$returnData = array('error' => config('messages.message.unitDescRequired'));
				}else{ 
					if(strtolower(trim($newPostData['unit_name_old']))==strtolower(trim($newPostData['unit_name1']))){				
						$newPostData['unit_id1']=base64_decode($newPostData['unit_id1']);  
						$updated = DB::table('units_db')->where('unit_id',$newPostData['unit_id1'])->update([
							'unit_name' => $newPostData['unit_name1'],
							'unit_desc' => $newPostData['unit_desc1'],
						   ]);
						//check if data updated in Unit table 
					    $returnData = array('success' => config('messages.message.unitUpdated')); 
					}else{
						if(empty($this->unitExist($newPostData['unit_name1']))){	
							$newPostData['unit_id1']=base64_decode($newPostData['unit_id1']);  
							$updated = DB::table('units_db')->where('unit_id',$newPostData['unit_id1'])->update([
								'unit_name' => $newPostData['unit_name1'],
								'unit_desc' => $newPostData['unit_desc1'],
							   ]);
							//check if data updated in Unit table 
							$returnData = array('success' => config('messages.message.unitUpdated')); 
						}else{
							$returnData = array('error' => config('messages.message.unitExist'));
						}						
					}
				}
			}else{
				$returnData = array('error' =>  config('messages.message.dataNotFound'));
			}
		}else{
			$returnData = array('error' => config('messages.message.dataNotFound'));
		} 
		return response()->json($returnData);
    }
	public function unitExist($unit_name) 
    { 
		if(!empty($unit_name)){ 
			$unitData = DB::table('units_db')
						->where('units_db.unit_name', '=',$unit_name)
						->first();
			if(!empty($unitData)){
				return $unitData->unit_id;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function deleteUnit(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')){
			if(!empty($request['data']['id'])){
				try { 
					$unit = DB::table('units_db')->where('unit_id', $request['data']['id'])->delete();
					if($unit){
						$returnData = array('success' => config('messages.message.unitDeleted'));
					}else{
						$returnData = array('error' => config('messages.message.unitNotDeleted'));					
					}
				}catch(\Illuminate\Database\QueryException $ex){ 
				   $returnData = array('error' => config('messages.message.foreignKeyDeleteError'));
				}
			}else{
				$returnData = array('error' => config('messages.message.noRecordFound'));
			}
		}
		return response()->json($returnData);
    }
}
