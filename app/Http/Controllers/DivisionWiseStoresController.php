<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Http\Requests;
use Auth;
use App\DivisionWiseStore;
use App\Models;
use Validator;
use Route;
use DB;
use App\Helpers\Helper;
use App\Helpers\SimpleImage;
use File;

class DivisionWiseStoresController extends Controller
{
    /**
	* protected Variable.
	*/
	protected $auth;
	
	/**
	* Create a new controller instance.
	*
	* @return void
	*/
    public function __construct()
    {
		global $divisionWiseStore,$models;
		$divisionWiseStore = new  DivisionWiseStore();
		$models            = new  Models();
        $this->middleware('auth');
		$this->middleware(function ($request, $next) {
            $this->auth = Auth::user();
			parent::__construct($this->auth);
			//Checking current request is allowed or not
			$allowedAction = array('index','navigation');
			$actionData    = explode('@',Route::currentRouteAction());
			$action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])): '0';			
			if(defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action,$allowedAction)){
				return redirect('dashboard')->withErrors('Permission Denied!');
			}
            return $next($request);
        });
    }
    
    /**
	* Display a listing of the resource.
	*
	* @return \Illuminate\Http\Response
	*/
    public function index()
    {        
        $user_id            = defined('USERID') ? USERID : '0';
        $division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';		
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';		
        $equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';
		
        return view('inventory.division_wise_stores.index',['title' => 'Branch Wise Stores','_branchWiseStores' => 'active','user_id' => $user_id,'division_id' => $division_id,'equipment_type_ids' => $equipment_type_ids]);
	}
	
	//autogenerate code
	public function getAutoGeneratedCode(Request $request)
    {
		global $models;
		$prefix=!empty(config('messages.message.storePrefix'))?config('messages.message.storePrefix'):'STORE';
		$code=$models->generateCode($prefix,'division_wise_stores','store_code','store_id');						  
		return response()->json(['uniqueCode' =>$code]);		
	}
    /**
	* Display a listing of the resource.
	*
	* @return \Illuminate\Http\Response
	*/
    public function getDivisionStores($division_id)
    {
		global $divisionWiseStore,$models;
		
		$storeDataListObj = DB::table('division_wise_stores')				   
				   ->join('divisions','divisions.division_id','division_wise_stores.division_id')
		           ->join('users','division_wise_stores.created_by','users.id')	
				   ->select('division_wise_stores.*','divisions.division_name','users.name as createdBy');
				   
		if(!empty($division_id) && is_numeric($division_id)){
			$storeDataListObj->where('division_wise_stores.division_id',$division_id);
		}
		
		$storeDataList = $storeDataListObj->orderBy('division_wise_stores.store_id','DESC')->get();	
		
		//to formate created and updated date		   
		$models->formatTimeStampFromArray($storeDataList,DATETIMEFORMAT);    
		
		return response()->json(['storeDataList' => $storeDataList]);		
    }
    
    /** create new item
     *  Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
	public function createDivisionStore(Request $request)
	{
        global $divisionWiseStore,$models;
        
		$error    = '0';
        $message  = config('messages.message.error');
        $data     = '';
        $returnData = $formData = array();
		
		if ($request->isMethod('post') && !empty($request['formData'])){ 
				
            //pasrse searlize data 				
            parse_str($request['formData'], $formData);
            $formData = array_filter($formData);
            $user_id=\Auth::user()->id;
            if(empty($formData['store_code'])){
                $message = config('messages.message.storeCodeRequired');
            }elseif(empty($formData['store_name'])){
                $message = config('messages.message.storeNameRequired');
            }else if(empty($formData['division_id'])){
                $message = config('messages.message.divisionNameRequired');
            }else{
                unset($formData['_token']);				
                $formData['created_by']=$user_id;				
                //echo '<pre>';print_r($formData);die;                
                if(!empty($formData) && !$divisionWiseStore->isStoreCodeExist('store_code', $formData['store_code'])){						
                    $created = DB::table('division_wise_stores')->insertGetId($formData);
                    if($created){
                        $error    = '1';
                        $message = config('messages.message.saved');
                    }else{
                        $message = config('messages.message.savedError');
                    }									
                }else{
                    $message = config('messages.message.storeCodeExistError');
                }
            }			
		}
        
		return response()->json(['error'=> $error,'message'=> $message,'data'=> $data]);	
    }
    
    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function updateDivisionStore(Request $request)
    {
        global $divisionWiseStore,$models;
        
		$error    = '0';
        $message  = config('messages.message.error');
        $data     = '';
		$formData = array();
        
        if ($request->isMethod('post') && !empty($request['formData'])){
            
            //pasrse searlize data 				
            parse_str($request['formData'], $formData);           
            $store_id = !empty($formData['store_id']) ? $formData['store_id'] : '0';
            
            if(empty($formData['store_code'])){
                $message = config('messages.message.storeCodeRequired');
            }elseif(empty($formData['store_name'])){
                $message = config('messages.message.storeNameRequired');
            }else if(empty($formData['division_id'])){
                $message = config('messages.message.divisionNameRequired');
            }else{
                unset($formData['_token']);
                unset($formData['store_id']);	
                //echo '<pre>';print_r($formData);die;                
                if(!empty($store_id) && !empty($formData)){
                    if($divisionWiseStore->isStoreCodeExist('store_code', $formData['store_code']) <= 1){
                        DB::table('division_wise_stores')->where('division_wise_stores.store_id',$store_id)->update($formData);
                        $error    = '1';
                        $message = config('messages.message.saved');                    									
                    }else{
                        $message = config('messages.message.storeCodeExistError');
                    }
                }else{
                    $message = config('messages.message.savedError'); 
                }
            }			
		}
        
		return response()->json(['error'=> $error,'message'=> $message,'data'=> $data,'store_id' => $store_id]);
    }
    
    /**
    * Show the form for editing the specified resource.
    *
    * @param  int  $id
    * @return \Illuminate\Http\Response
    */
    public function viewDivisionStore(Request $request,$store_id)
    {
		$error    = '0';
        $message  = config('messages.message.error');
        $data     = '';
				
		if(!empty($store_id)){			
			$storeDetailList = DB::table('division_wise_stores')
						->join('divisions','divisions.division_id','division_wise_stores.division_id')
                        ->select('division_wise_stores.*','divisions.division_name')
						->where('division_wise_stores.store_id', '=', $store_id)
						->first();
            $message = '';
            $error   = !empty($storeDetailList) ? 1 : 0;
		}		
        
        return response()->json(array('error'=> $error,'message'=> $message,'storeDetailList'=> $storeDetailList));
    }
    
    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function deleteDivisionStore(Request $request,$store_id)
    {
		global $divisionWiseStore,$models;
		
		$error   = '0';
        $message = config('messages.message.error');
        $data    = '';
        
        try{
			$storeData = DB::table('division_wise_stores')->where('division_wise_stores.store_id',$store_id)->first();
			if(!empty($storeData)){				
				if(DB::table('division_wise_stores')->where('division_wise_stores.store_id','=',$store_id)->delete()){
					$error    = '1';
					$message = config('messages.message.deleted');      
				} 
			}else{
                $message = config('messages.message.storeDataNotFound');
            }
        }catch(\Illuminate\Database\QueryException $ex){
            $message = config('messages.message.storeForeignKeyConsFail');
        }             
		return response()->json(['error' => $error,'message' => $message]);
    }
    
  
    
}
