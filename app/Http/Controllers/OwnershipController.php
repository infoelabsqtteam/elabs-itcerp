<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models;
use App\Http\Requests;
use Auth;
use App\Ownership;
use Validator;
use Route;
use DB;

class OwnershipController extends Controller
{
	/**
	 * protected Variable.
	 */
	protected $auth;
	
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        global $models;
		$models = new Models();
		$this->middleware('auth'); 
		$this->middleware(function ($request, $next) {
            $this->session = Auth::user();
			parent::__construct($this->session);
			//Checking current request is allowed or not
			$allowedAction = array('index','navigation');
			$actionData    = explode('@',Route::currentRouteAction());
			$action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])): '0';			
			if(defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action,$allowedAction)){
				return redirect('dashboard')->withErrors('Permission Denied!');
			}
            return $next($request);
		 });
    }	
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $user_id            = defined('USERID') ? USERID : '0';
        $division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';		
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';		
        $equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';
		
		return view('master.customer_master.ownership_type.index',['title' => 'Ownerships','_ownerships' => 'active','user_id' => $user_id,'division_id' => $division_id,'equipment_type_ids' => $equipment_type_ids]);
    }

	//autogenerate code
	public function getAutoGeneratedCode(Request $request)
    {
		global $models;
		$prefix=!empty(config('messages.message.ownershipPrefix'))?config('messages.message.ownershipPrefix'):'OWNER';
		$code=$models->generateCode($prefix,'customer_ownership_type','ownership_code','ownership_id');						  
		return response()->json(['uniqueCode' =>$code]);		
	}
	
    /** create new ownership
     *  Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function createOwnership(Request $request)
    {	
		$returnData = array(); 
 		if ($request->isMethod('post')) {
			if(!empty($request['data']['formData'])){  
				//pasrse searlize data 
				$newPostData = array(); 
				parse_str($request['data']['formData'], $newPostData);  
				unset($newPostData['_token']);
				if(empty($newPostData['ownership_code']))
				{
					$returnData = array('error' => config('messages.message.ownershipCodeRequired'));
				}else if(empty($newPostData['ownership_name'])){
					$returnData = array('error' => config('messages.message.ownershipNameRequired'));
				}else{ 
					// check if ownership already exist or not 
					if($this->isOwnershipExist($newPostData['ownership_code'],$newPostData['ownership_name']) == 0){ 
							$ownership_name = strtolower($newPostData['ownership_name']);
						  $created = Ownership::create([
							'ownership_code' => $newPostData['ownership_code'],
							'ownership_name' => ucwords($ownership_name),
							'created_by' => \Auth::user()->id,
						   ]);
						
						//check if users created add data in user detail
						if($created->id){ 
							$returnData = array('success' => config('messages.message.ownershipSaved'));
						}else{
							$returnData = array('error' => config('messages.message.ownershipNotSaved'));
						}
					}else{
						$returnData = array('error' => config('messages.message.ownershipExist'));
					}
				}
			}else{
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		}else{
			$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
		} 
		return response()->json($returnData); 		
    }

    /**
     * Get list of ownerships on page load.
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function getOwnershipList()
    { 
		global $models;
		$ownerships = DB::table('customer_ownership_type')
					->join('users', 'customer_ownership_type.created_by', '=', 'users.id')
					->select('customer_ownership_type.*','users.name as createdBy')
					->get();	
		$models->formatTimeStampFromArray($ownerships,DATETIMEFORMAT);
		return response()->json([
		   'ownershipsList' => $ownerships,
		]);
    }   


    /**
     * isOwnershipExist Is used to check the ownership duplicate entry by ownership_code
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function isOwnershipExist($ownership_code,$ownership_name) 
    { 
		if(!empty($ownership_code)){
			$ownershipData = DB::table('customer_ownership_type')
						->where('customer_ownership_type.ownership_code', '=', $ownership_code)
						->orwhere('customer_ownership_type.ownership_name', '=', $ownership_name)
						->first(); 
			if(@$ownershipData->ownership_id){
				return $ownershipData->ownership_id;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
	
    
    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function editOwnershipData(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')) {
			if(!empty($request['data']['id'])){
				$ownershipData = DB::table('customer_ownership_type')
								->select('customer_ownership_type.*')
								->where('customer_ownership_type.ownership_id', '=', $request['data']['id'])
								->first();
				
				if($ownershipData->ownership_id){
					$returnData = array('responseData' => $ownershipData);				
				}else{
					$returnData = array('error' => config('messages.message.noRecordFound'));
				}
			}else{
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		}else{
				$returnData = array('error' => config('messages.message.provideAppData'));			
		}
		return response()->json($returnData);	
    }
    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function updateOwnershipData(Request $request)
    {
        $returnData = array();
		if ($request->isMethod('post')) {
			if(!empty($request['data']['formData'])){   
				//pasrse searlize data 
				$newPostData = array();
				parse_str($request['data']['formData'], $newPostData);   //print_r($newPostData); die;
				if(empty($newPostData['ownership_id']))
				{
					$returnData = array('error' => config('messages.message.ownershipCodeRequired'));
				}else if(empty($newPostData['ownership_name'])){
					$returnData = array('error' => config('messages.message.ownershipNameRequired'));
				}else{
					$newPostData['ownership_id']=base64_decode($newPostData['ownership_id']);
					$ownership_name = strtolower($newPostData['ownership_name']);
					$updated = DB::table('customer_ownership_type')->where('ownership_id',$newPostData['ownership_id'])->update([
						'ownership_name' => ucwords($ownership_name),
					   ]);
					//check if data updated in Ownership table 
                    $returnData = array('success' => config('messages.message.ownershipUpdated'));					 
				}
			}else{
				$returnData = array('error' =>  config('messages.message.dataNotFound'));
			}
		}else{
			$returnData = array('error' => config('messages.message.dataNotFound'));
		} 
		return response()->json($returnData);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function deleteOwnershipData(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')){
			if(!empty($request['data']['id'])){
				try { 
					$ownership = DB::table('customer_ownership_type')->where('ownership_id', $request['data']['id'])->delete();
					if($ownership){
						$returnData = array('success' => config('messages.message.ownershipDeleted'));
					}else{
						$returnData = array('error' => config('messages.message.ownershipNotDeleted'));					
					}
				}catch(\Illuminate\Database\QueryException $ex){ 
				   $returnData = array('error' => config('messages.message.foreignKeyDeleteError'));
				}
			}else{
				$returnData = array('error' => config('messages.message.noRecordFound'));
			}
		}
		return response()->json($returnData);
    }
}
