<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models;
use App\Http\Requests;
use App\Instance;
use Auth;
use Validator;
use Route;
use DB;
class InstanceController extends Controller
{
    /**
     * protected Variable.
     */
    protected $auth;

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        global $models,$instance;

        $models = new Models();
        $instance = new Instance();

        //Valodating User Session
        $this->middleware('auth');

        $this->middleware(function ($request, $next) {

            $this->session = Auth::user();
            parent::__construct($this->session);

            //Checking current request is allowed or not
            $allowedAction = array('index', 'navigation');
            $actionData    = explode('@', Route::currentRouteAction());
            $action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])) : '0';
            if (defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action, $allowedAction)) {
                return redirect('dashboard')->withErrors('Permission Denied!');
            }
            return $next($request);
        });
    }

    /*********************************
     * Display a listing of the resource.
     * Date : 29-Nov-2021
     * Author : Praveen Singh
     *********************************/
    public function index()
    {
        global $models,$instance;

        $user_id            = defined('USERID') ? USERID : '0';
        $division_id        = defined('DIVISIONID') ? DIVISIONID : '0';
        $department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
        $role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';
        $equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';

        return view('master.instance_master.index', ['title' => 'Instance Master', '_instance_master' => 'active', 'user_id' => $user_id, 'division_id' => $division_id, 'equipment_type_ids' => $equipment_type_ids]);
    }

    /*********************************
     * Auto Generate Code
     * Date : 29-Nov-2021
     * Author : Praveen Singh
     *********************************/
    public function getAutoGeneratedCode()
    {
        global $models,$instance;

        $prefix = !empty(config('messages.message.instancePrefix')) ? config('messages.message.instancePrefix') : 'D';
        $code   = $models->generateCode($prefix, 'instance_master', 'instance_code', 'instance_id');   //prefix,tableName,fieldName,primaryKey

        return response()->json(['uniqueCode' => $code]);
    }

    /*********************************
     * Laist All Instances
     * Date : 29-Nov-2021
     * Author : Praveen Singh
     *********************************/
    public function listMasters()
    {
        global $models,$instance;

        $masterDataObj = DB::table('instance_master')
            ->join('equipment_type', 'instance_master.equipment_type_id', 'equipment_type.equipment_id')
            ->join('product_categories', 'product_categories.p_category_id', 'instance_master.product_category_id')
            ->join('users', 'instance_master.created_by', 'users.id')
            ->select('instance_master.*','equipment_type.equipment_name', 'product_categories.p_category_name', 'users.name as createdBy');

        if (!empty($equipment_type_id)) {
            $masterDataObj->where('instance_master.equipment_type_id', '=', $equipment_type_id);
        }
        $masterDataList = $masterDataObj->orderBy('instance_master.instance_id', 'DESC')->get()->toArray();

        //Format Timestamps
        $models->formatTimeStampFromArray($masterDataList, DATETIMEFORMAT);

        return response()->json(['masterDataList' => $masterDataList]);
    }

    /*********************************
     * create New Column
     * Date : 29-Nov-2021
     * Author : Praveen Singh
     *********************************/
    public function createMaster(Request $request)
    {
        global $models,$instance;

        $error    = '0';
        $message  = config('messages.message.error');
        $data    = $formData = array();

        try {
            if (!empty($request->formData) && $request->isMethod('post')) {

                //pasrse searlize data 
                parse_str($request->formData, $formData);
                
                if (empty($formData['instance_code'])) {
                    $message = config('messages.message.required');
                } else if (empty($formData['instance_name'])) {
                    $message = config('messages.message.required');
                } else if (empty($formData['instance_desc'])) {
                    $message = config('messages.message.required');
                } else if (empty($formData['equipment_type_id'])) {
                    $message = config('messages.message.required');
                } else if (empty($formData['product_category_id'])) {
                    $message = config('messages.message.required');
                } elseif (!empty($instance->where('instance_code', $formData['instance_code'])->count())) {
                    $message = config('messages.message.existError');
                } else {

                    //Unsetting the variable from request data
                    $formData = $models->unsetFormDataVariables($formData, array('_token'));

                    //Saving the data in customer_gst_categories Master
                    $formData['created_by'] = USERID;
                    $instance_id = DB::table('instance_master')->insertGetId($formData);

                    //check if users created add data in user detail
                    if ($instance_id) {
                        $error    = '1';
                        $message = config('messages.message.success');
                    } else {
                        $message = config('messages.message.savedError');
                    }
                }
            } else {
                $message = config('messages.message.dataNotFoundToSaved');
            }
        } catch (\Illuminate\Database\QueryException $ex) {
            $message = config('messages.message.error');
        }
        return response()->json(['error' => $error, 'message' => $message]);
    }

    /*********************************
     * Edit Particular Column
     * Date : 29-Nov-2021
     * Author : Praveen Singh
     *********************************/
    public function editMaster($id)
    {
        global $models,$instance;

        $error    = '0';
        $message  = config('messages.message.error');
        $data    = $formData = array();

        if ($id) {
            $data  = DB::table('instance_master')->where('instance_master.instance_id', '=', $id)->first();
            $error = '1';
            $message  = '';
            if (empty($data)) {
                $error    = '0';
                $message = config('messages.message.noRecordFound');
            }
        } else {
            $message = config('messages.message.provideAppData');
        }
        return response()->json(['error' => $error, 'message' => $message, 'editMasterData' => $data]);
    }

    /*********************************
     * Update the specified resource in storage.
     * Date : 29-Nov-2021
     * Author : Praveen Singh
     *********************************/
    public function updateMaster(Request $request)
    {
        global $models,$instance;

        $error    = '0';
        $message  = config('messages.message.error');
        $data    = $formData = array();

        try {

            if (!empty($request->formData) && $request->isMethod('post')) {

                //pasrse searlize data 
                parse_str($request->formData, $formData);

                if (empty($formData['instance_id'])) {
                    $message  = config('messages.message.dataNotFound');
                } else if (empty($formData['instance_name'])) {
                    $message = config('messages.message.required');
                } else if (empty($formData['instance_desc'])) {
                    $message = config('messages.message.required');
                } else if (empty($formData['equipment_type_id'])) {
                    $message = config('messages.message.required');
                } else if (empty($formData['product_category_id'])) {
                    $message = config('messages.message.required');
                } else {
                    $updated = DB::table('instance_master')->where('instance_id', $formData['instance_id'])->update([
                        'instance_desc'        => $formData['instance_desc'],
                        'instance_name'        => $formData['instance_name'],
                        'equipment_type_id'    => $formData['equipment_type_id'],
                        'product_category_id'  => $formData['product_category_id']
                    ]);
                    if ($updated) {
                        $error    = '1';
                        $message = config('messages.message.updated');
                    } else {
                        $error    = '1';
                        $message = config('messages.message.savedNoChange');
                    }
                }
            } else {
                $message = config('messages.message.dataNotFound');
            }
        } catch (\Illuminate\Database\QueryException $ex) {
            $message = config('messages.message.error');
        }
        return response()->json(['error' => $error, 'message' => $message]);
    }

    /*********************************
     * Delete the specified resource in storage.
     * Date : 29-Nov-2021
     * Author : Praveen Singh
     *********************************/
    public function destroyMaster($id)
    {
        global $models,$instance;

        $error    = '0';
        $message  = config('messages.message.error');
        $data    = $formData = array();

        try {
            if ($id) {
                $instance = DB::table('instance_master')->where('instance_id', $id)->delete();
                if ($instance) {
                    $error    = '1';
                    $message = config('messages.message.deleted');
                } else {
                    $message = config('messages.message.deletedError');
                }
            }
        } catch (\Illuminate\Database\QueryException $ex) {
            $message = config('messages.message.foreignKeyDeleteError');
        }
        return response()->json(['error' => $error, 'message' => $message]);
    }
}
