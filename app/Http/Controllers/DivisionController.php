<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Http\Requests;
use Auth;
use App\Division;
use App\Item;
use App\Models;
use App\DivisionParameters;
use Validator;
use Route;
use DB;

class DivisionController extends Controller
{    
	    /**
	    * protected Variable.
	    */
	    protected $auth;
	    
	    /**
	    * Create a new controller instance.
	    *
	    * @return void
	    */
	    public function __construct()
	    {
			global $item,$models;
			
			$models = new Models();
			$item   = new  Item();
			$this->middleware('auth');
			$this->middleware('auth');
			$this->middleware(function ($request, $next) {
				    $this->session = Auth::user();
				    parent::__construct($this->session);
				    
				    //Checking current request is allowed or not
				    $allowedAction = array('index','navigation');
				    $actionData    = explode('@',Route::currentRouteAction());
				    $action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])): '0';			
				    if(defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action,$allowedAction)){
						return redirect('dashboard')->withErrors('Permission Denied!');
				    }
				    return $next($request);
			});
	    }	
	    
	    /**
	    * Display a listing of divisions.
	    *
	    * @return \Illuminate\Http\Response
	    */
	    public function index()
	    {
			$user_id            = defined('USERID') ? USERID : '0';
			$division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';		
			$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
			$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';		
			$equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';
			
			return view('master.division.index',['title' => 'Division','_division' => 'active','user_id' => $user_id,'division_id' => $division_id,'equipment_type_ids' => $equipment_type_ids]);
	    }
	    
	    //autogenerate code
	    public function getAutoGeneratedCode(Request $request)
	    {
		   global $models;
		   $prefix=!empty(config('messages.message.branchPrefix'))?config('messages.message.branchPrefix'):'BR';
		   $code=$models->generateCode($prefix,'divisions','division_code','division_id');						  
		   return response()->json(['uniqueCode' =>$code]);		
	    }	
	    
	    /** create new division
	    *  Show the form for creating a new resource.
	    *
	    * @return \Illuminate\Http\Response
	    */
	    public function createDivision(Request $request)
	    {
		   global $item,$models;
		   
		   $returnData = array();
		   
		   if ($request->isMethod('post') && !empty($request['data']['formData'])){
			   
			   //pasrse searlize data 
			   $newPostData = array();
			   parse_str($request['data']['formData'], $newPostData); 
				   
			   if(empty($newPostData['company_id'])){
				   $returnData = array('error' => config('messages.message.companyCodeRequired'));
			   }else if(empty($newPostData['division_code'])){
				   $returnData = array('error' => config('messages.message.divisionCodeRequired'));
			   }else if(empty($newPostData['division_name'])){
				   $returnData = array('error' => config('messages.message.divisionNameRequired'));
			   }else if(empty($newPostData['division_country'])){
				   $returnData = array('error' => config('messages.message.divisionCountryRequired'));
			   }else if(empty($newPostData['division_state'])){
				   $returnData = array('error' => config('messages.message.divisionStateRequired'));
			   }else if(empty($newPostData['division_city'])){
				   $returnData = array('error' => config('messages.message.divisionCityRequired'));
			   }if(empty($newPostData['division_address'])){
				   $returnData = array('error' => config('messages.message.divisionAddressRequired'));
			   }else if(empty($newPostData['division_PAN'])){
				   $returnData = array('error' => config('messages.message.divisionPANRequired'));
			   }else if(empty($newPostData['division_VAT_no'])){
				   $returnData = array('error' => config('messages.message.divisionVATRequired'));
			   }else{

				   // check if division already exist or not 
				   if($this->isCodeExist($newPostData['division_code']) == 0){
				    
					   $divisionName = strtolower($newPostData['division_name']);
					   $created = Division::create([
						   'company_id'	=> $newPostData['company_id'],
						   'division_code' => $newPostData['division_code'],
						   'division_name' => ucwords($divisionName),
						   'created_by' => \Auth::user()->id,
					      ]); 
					   //check if division created added in divisions table
					   if($created->id){  
						     $createdParameters = DivisionParameters::create([
							   'division_id' => $created->id,
							   'division_address' => $newPostData['division_address'],
							   'division_country' => $newPostData['division_country'],
							   'division_state' => $newPostData['division_state'],
							   'division_city' => $newPostData['division_city'],
							   'division_PAN' => $newPostData['division_PAN'],
							   'division_VAT_no' => $newPostData['division_VAT_no'],
						      ]);
						     
						     //Cloning all Item Master data according to branch
						     $item->copyItemMaster($created->id);
						     
						   $returnData = array('success' => config('messages.message.saved'));
					   }else{
						   $returnData = array('error' =>  config('messages.message.savedError'));
					   }
				   }else{
					   $returnData = array('error' => config('messages.message.divisionExist'));
				   }
			   }
		   }else{
			   $returnData = array('error' =>  config('messages.message.dataNotFound'));
		   } 
		   return response()->json($returnData);		
	    }
	    
	    /**
	    * isCodeExist Is used to check the duplicate entry 
	    * Date : 01-05-17
	    * Author : nisha
	    * @param  \Illuminate\Http\Request  $request
	    * @return \Illuminate\Http\Response
	    */
	    public function isCodeExist($code) 
	    { 
		   if(!empty($code)){
			   $deptData = DB::table('divisions')
						   ->where('divisions.division_code', '=', $code)
						   ->first(); 
			   if(@$deptData->division_id){
				   return $deptData->division_id;
			   }else{
				   return false;
			   }
		   }else{
			   return false;
		   }
	    }
	    
	    /**
	    * Get list of divisions on page load.
	    * Date : 02-03-17
	    * Author : nisha
	    * @param  \Illuminate\Http\Request  $request
	    * @return \Illuminate\Http\Response
	    */
	    public function getDivisionsList()
	    {
			global $models;
			
			$divisionsList = DB::table('divisions')
						     ->Join('company_master', 'divisions.company_id', '=', 'company_master.company_id')
						     ->Join('division_parameters', 'divisions.division_id', '=', 'division_parameters.division_id')
						     ->Join('city_db', 'division_parameters.division_city', '=', 'city_db.city_id')
						     ->join('users', 'divisions.created_by', '=', 'users.id')
						     ->select('divisions.*','company_master.*', 'division_parameters.*', 'city_db.*', 'users.name as createdBy')
						     ->get();
			$models->formatTimeStampFromArray($divisionsList,DATETIMEFORMAT);
	
			return response()->json(['divisionsList' => $divisionsList]);
	    }
	    
	    /**
	    * get divisions using multisearch.
	    * Date : 21-04-17
	    * Author : nisha
	    * @param  \Illuminate\Http\Request  $request
	    * @return \Illuminate\Http\Response
	    */
	    public function getDivisionsListMultisearch(Request $request)
	    { 
	       global $models;
		   $searchArry=$request['data']['formData'];  		
		   $divi = DB::table('divisions')
						     ->Join('company_master', 'divisions.company_id', '=', 'company_master.company_id')
						     ->Join('division_parameters', 'divisions.division_id', '=', 'division_parameters.division_id')
						     ->Join('city_db', 'division_parameters.division_city', '=', 'city_db.city_id')
						     ->join('users', 'divisions.created_by', '=', 'users.id')
						     ->select('divisions.*','divisions.created_at as created_at','divisions.updated_at as updated_at', 'company_master.*', 'division_parameters.*', 'city_db.*', 'users.name as createdBy');
					   if(!empty($searchArry['search_division_code'])){
						   $divi->where('divisions.division_code','like','%'.$searchArry['search_division_code'].'%');
					   }
					   if(!empty($searchArry['search_division_name'])){
						   $divi->where('divisions.division_name','like','%'.$searchArry['search_division_name'].'%');
					   }
					   if(!empty($searchArry['search_company_name'])){
						   $divi->where('divisions.company_name','like','%'.$searchArry['search_company_name'].'%');
					   }
					   if(!empty($searchArry['search_created_by'])){
						   $divi->where('users.name','like','%'.$searchArry['search_created_by'].'%');
					   }
					   if(!empty($searchArry['search_created_at'])){
						   $divi->where('divisions.created_at','like','%'.$searchArry['search_created_at'].'%');
					   }
					   if(!empty($searchArry['search_updated_at'])){
						   $divi->where('divisions.updated_at','like','%'.$searchArry['search_updated_at'].'%');
					   }
		    $divisionsList=$divi->get();
		     
		    $models->formatTimeStampFromArray($divisionsList,DATETIMEFORMAT);
			   
		   return response()->json([
		      'divisionsList' => $divisionsList,
		   ]);	
	    }
	    
	    /**
	    * Show the form for editing the specified division.
	    *
	    * @param  int  $id
	    * @return \Illuminate\Http\Response
	    */
	    public function editDivisionData(Request $request)
	    {
		   $returnData = array();
		   $companyData = DB::table('company_master')->select('company_id as id','company_name as name')->get();  //print_r( json_encode($companyData));die;
		   if ($request->isMethod('post')) {
			   if(!empty($request['data']['id'])){
				   // get user by email id
				   $deptData =DB::table('divisions')
							   ->Join('company_master', 'divisions.company_id', '=', 'company_master.company_id')
							   ->Join('division_parameters', 'divisions.division_id', '=', 'division_parameters.division_id')
							   ->Join('city_db', 'division_parameters.division_city', '=', 'city_db.city_id')
							   ->select('divisions.*','division_parameters.*','company_master.company_name','city_db.city_id','city_db.city_name')
							   ->where('divisions.division_id', '=', $request['data']['id'])
							   ->first();
				   if($deptData->division_id){
					   $returnData = array('responseData' => $deptData);				
				   }else{
					   $returnData = array('error' => config('messages.message.noRecordFound'));
				   }
			   }else{
				   $returnData = array('error' =>  config('messages.message.provideAppData'));
			   }
		   }else{
				   $returnData = array('error' => config('messages.message.provideAppData'));			
		   } 
		   //return response()->json($returnData);	
		   return response()->json(['returnData'=>$returnData,'companyData'=>$companyData]);	
	    }
	    
	    /**
	    * Update the specified division in storage.
	    *
	    * @param  \Illuminate\Http\Request  $request
	    * @param  int  $id
	    * @return \Illuminate\Http\Response
	    */
	    public function updateDivisionData(Request $request)
	    {
	    $returnData = array();
		   
		   if ($request->isMethod('post') && !empty($request['data']['formData'])) { 
	    
			   //pasrse searlize data 
			   $newPostData = array();
			   parse_str($request['data']['formData'], $newPostData);
			   
			   if(empty($newPostData['division_id'])){
				   $returnData = array('error' => 'Division Id is required!');
			   }else if(empty($newPostData['division_name1'])){
				   $returnData = array('error' => config('messages.message.divisionNameRequired'));
			   }else if(empty($newPostData['division_country1'])){
				   $returnData = array('error' => config('messages.message.divisionCountryRequired'));
			   }else if(empty($newPostData['division_state1'])){
				   $returnData = array('error' => config('messages.message.divisionStateRequired'));
			   }else if(empty($newPostData['division_city1'])){
				   $returnData = array('error' => config('messages.message.divisionCityRequired'));
			   }else if(empty($newPostData['division_address1'])){
				   $returnData = array('error' => config('messages.message.divisionAddressRequired'));
			   }else if(empty($newPostData['division_city1'])){
				   $returnData = array('error' => config('messages.message.divisionCityRequired'));
			   }else if(empty($newPostData['division_PAN1'])){
				   $returnData = array('error' => config('messages.message.divisionPANRequired'));
			   }else if(empty($newPostData['division_VAT1'])){
				   $returnData = array('error' => config('messages.message.divisionVATRequired'));
			   }else{  
				   $newPostData['division_id']=base64_decode($newPostData['division_id']);  
				   $divisionName 	= strtolower($newPostData['division_name1']);
				   
				   $updateDivision = DB::table('divisions')->where('division_id',$newPostData['division_id'])->update([
					   'division_name' => ucwords($divisionName),
				      ]);
				   $updateParameter= DB::table('division_parameters')
								     ->where('division_id',$newPostData['division_id'])
								     ->update([
										    'division_address' => $newPostData['division_address1'],
										    'division_country' => $newPostData['division_country1'],
										    'division_state' => $newPostData['division_state1'],
										    'division_city' => $newPostData['division_city1'],
										    'division_PAN' => $newPostData['division_PAN1'],
										    'division_VAT_no' => $newPostData['division_VAT1'],
									      ]);
				   //check if data updated in divisions table
				   if($updateParameter || $updateDivision){
					   $returnData = array('success' => config('messages.message.updated'));			
				   }else{
					   $returnData = array('success' => config('messages.message.savedNoChange'));
				   }                    	 
			   }
		   }else{
			   $returnData = array('error' => config('messages.message.provideAppData'));
		   } 
		   return response()->json($returnData);
	    }
	    
	    /**
	    * Remove the specified division from divisions table.
	    *
	    * @param  int  $id 
	    * @return \Illuminate\Http\Response
	    */
	    public function deleteDivision(Request $request)
	    {
		   $returnData = array();
		   if ($request->isMethod('post')){
			   if(!empty($request['data']['id'])){
				   try{
					   $divisions = DB::table('divisions')->where('division_id', $request['data']['id'])->delete();
					   if($divisions){
						   $returnData = array('success' => config('messages.message.divisionDeleted'));
					   }else{
						   $returnData = array('error' => config('messages.message.divisionNotDeleted'));					
					   }					
				   }catch(\Illuminate\Database\QueryException $ex){ 
					      $returnData = array('error' => config('messages.message.foreignKeyDeleteError'));
				   }
			   }else{
				   $returnData = array('error' =>config('messages.message.noRecordFound'));
			   }
		   }
		   return response()->json($returnData);
	    }
}
