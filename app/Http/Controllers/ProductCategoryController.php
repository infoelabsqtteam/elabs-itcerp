<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models;
use App\Http\Requests;
use Auth;
use App\ProductCategory;
use Validator;
use Route;
use DB;

class ProductCategoryController  extends Controller
{
	/**
	 * protected Variable.
	 */
	protected $auth;

	/**
	 * Create a new controller instance.
	 *
	 * @return void
	 */
	public function __construct()
	{
		global $models, $productCategory;
		$models = new Models();
		$productCategory = new ProductCategory();
		$this->middleware('auth');
		$this->middleware(function ($request, $next) {
			$this->session = Auth::user();
			parent::__construct($this->session);
			//Checking current request is allowed or not
			$allowedAction = array('index', 'navigation');
			$actionData    = explode('@', Route::currentRouteAction());
			$action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])) : '0';
			if (defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action, $allowedAction)) {
				return redirect('dashboard')->withErrors('Permission Denied!');
			}
			return $next($request);
		});
	}
	/**
	 * Display a listing of the resource.
	 *
	 * @return \Illuminate\Http\Response
	 */
	public function index()
	{
		$user_id            = defined('USERID') ? USERID : '0';
		$division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';
		$equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';

		return view('master.product_categories.index', ['title' => 'Product Categories', '_product_categories' => 'active', 'user_id' => $user_id, 'division_id' => $division_id, 'equipment_type_ids' => $equipment_type_ids]);
	}

	public function productCategoriesTreeView()
	{
		return view('master.product_categories.product_tree_view.index');
	}

	//get product catgeory popup tree view
	public function getProductCategoryTree()
	{

		$ProductCategory = new ProductCategory();
		$productCategoriesTree = $ProductCategory->categoryTree();

		return response()->json(['productCategoriesTree' => $productCategoriesTree]);
	}

	//autogenerate code
	public function getAutoGeneratedCode(Request $request)
	{
		global $models;
		$prefix = !empty(config('messages.message.proCatPrefix')) ? config('messages.message.proCatPrefix') : 'PC';
		$code = $models->generateCode($prefix, 'product_categories', 'p_category_code', 'p_category_id');   //prefix,tableName,fieldName,primaryKey						  
		return response()->json(['uniqueCode' => $code]);
	}

	/** create new product
	 *  Show the form for creating a new resource.
	 *
	 * @return \Illuminate\Http\Response
	 */
	public function createProductCategory(Request $request)
	{
		global $productCategory;
		$returnData = array();
		if ($request->isMethod('post')) {
			if (!empty($request['data']['formData'])) {
				//pasrse searlize data 
				$newPostData = array();
				parse_str($request['data']['formData'], $newPostData);
				if (empty($newPostData['p_category_code'])) {
					$returnData = array('error' => config('messages.message.productCatCodeRequired'));
				} else if (empty($newPostData['p_category_name'])) {
					$returnData = array('error' => config('messages.message.productCatNameRequired'));
				} else {
					if (!empty($newPostData['parent_id'])) {
						$level = $productCategory->getCategoryLevel($newPostData['parent_id']);
						$newPostData['level'] = $level + 1;
					} else {
						$newPostData['level'] = 0;
					}
					if (empty($this->isProductCategoryCodeExist($newPostData['p_category_code']))) {
						if (empty($this->isProductCategoryNameExist($newPostData))) {
							$created = ProductCategory::create([
								'p_category_code' => $newPostData['p_category_code'],
								'p_category_name' => $newPostData['p_category_name'],
								'parent_id' => $newPostData['parent_id'],
								'level' => $newPostData['level'],
								'created_by' => \Auth::user()->id,
							]);
							if ($created->id) {
								$returnData = array('success' => config('messages.message.productCatSaved'));
							} else {
								$returnData = array('error' => config('messages.message.productCatNotSaved'));
							}
						} else {
							$returnData = array('error' => config('messages.message.productNameExist'));
						}
					} else {
						$returnData = array('error' => config('messages.message.productCatExist'));
					}
				}
			} else {
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		} else {
			$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
		}
		return response()->json($returnData);
	}

	/**
	 * isProductCategoryExist Is used to check the duplicate entry by p_category_code
	 * Date : 01-16-17
	 * Author : nisha
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function isProductCategoryCodeExist($p_category_code)
	{
		if (!empty($p_category_code)) {
			$productData = DB::table('product_categories')
				->where('product_categories.p_category_code', '=', $p_category_code)
				->first();
			if (@$productData->p_category_id) {
				return $productData->p_category_id;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	public function isProductCategoryNameExist($data)
	{
		if (!empty($data)) {
			$p_category_name = $data['p_category_name'];
			$parent_id = $data['parent_id'];
			$productData = DB::table('product_categories')
				->where('product_categories.parent_id', '=', trim($parent_id))
				->where('product_categories.p_category_name', '=', trim($p_category_name))
				->first();
			if (@$productData->p_category_id) {
				return $productData->p_category_id;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	/**
	 * Get list of companies on page load.
	 * Date : 01-16-17
	 * Author : nisha
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function getProductCategoryList($parent_id)
	{
		global $models;
		$productsObj = DB::table('product_categories')
			->leftjoin('product_categories as category', 'product_categories.parent_id', 'category.p_category_id')
			->join('users', 'product_categories.created_by', '=', 'users.id')
			->select('product_categories.*', 'category.p_category_name as parent_cat', 'users.name as createdBy');
		if (!empty($parent_id) && is_numeric($parent_id)) {
			$productsObj->where('product_categories.parent_id', '=', $parent_id);
		}
		$products = $productsObj->orderBy('product_categories.p_category_name', 'ASC')->get();

		$models->formatTimeStampFromArray($products, DATETIMEFORMAT);
		return response()->json([
			'productsList' => $products,
		]);
	}
	/**
	 * get product categories using multisearch.
	 * Date : 21-04-17
	 * Author : nisha
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function getProductCategoryListMultisearch(Request $request)
	{
		$searchArry = $request['data']['formData'];
		global $models;
		$product = DB::table('product_categories')
			->leftjoin('product_categories as category', 'product_categories.parent_id', 'category.p_category_id')
			->join('users', 'product_categories.created_by', '=', 'users.id')
			->select('product_categories.*', 'category.p_category_name as parent_cat', 'users.name as createdBy');
		if (!empty($searchArry['search_p_category_code'])) {
			$product->where('product_categories.p_category_code', 'like', '%' . $searchArry['search_p_category_code'] . '%');
		}
		if (!empty($searchArry['search_p_category_name'])) {
			$product->where('product_categories.p_category_name', 'like', '%' . $searchArry['search_p_category_name'] . '%');
		}
		if (!empty($searchArry['search_parent_id'])) {
			$product->where('product_categories.parent_id', '=', $searchArry['search_parent_id']);
		}
		if (!empty($searchArry['search_parent_cat'])) {
			$product->where('category.p_category_name', 'like', '%' . $searchArry['search_parent_cat'] . '%');
		}
		if (isset($searchArry['search_level'])) {
			$product->where('product_categories.level', 'like', '%' . $searchArry['search_level'] . '%');
		}
		if (!empty($searchArry['search_created_by'])) {
			$product->where('users.name', 'like', '%' . $searchArry['search_created_by'] . '%');
		}
		if (!empty($searchArry['search_created_at'])) {
			$product->where('product_categories.created_at', 'like', '%' . $searchArry['search_created_at'] . '%');
		}
		if (!empty($searchArry['search_updated_at'])) {
			$product->where('product_categories.updated_at', 'like', '%' . $searchArry['search_updated_at'] . '%');
		}
		$productCatList = $product->get();
		$models->formatTimeStampFromArray($productCatList, DATETIMEFORMAT);
		return response()->json([
			'productsList' => $productCatList,
		]);
	}

	/**
	 * Show the form for editing the specified resource.
	 *
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function editProductCategoryData(Request $request)
	{
		$returnData = array();
		if ($request->isMethod('post')) {
			if (!empty($request['data']['id'])) {
				// get user by email id
				$productData = DB::table('product_categories')
					->leftjoin('product_categories as category', 'product_categories.parent_id', 'category.p_category_id')
					->where('product_categories.p_category_id', '=', $request['data']['id'])
					->select('product_categories.*', 'category.p_category_id as parent_id', 'category.p_category_name as parent_category_name', 'category.level as parent_category_level')
					->first();
				if ($productData->p_category_id) {
					$returnData = array('responseData' => $productData);
				} else {
					$returnData = array('error' => config('messages.message.noRecordFound'));
				}
			} else {
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		} else {
			$returnData = array('error' => config('messages.message.provideAppData'));
		}
		return response()->json($returnData);
	}
	/**
	 * Update the specified resource in storage.
	 *
	 * @param  \Illuminate\Http\Request  $request
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function updateProductCategoryData(Request $request)
	{
		global $productCategory;
		$returnData = array();
		if ($request->isMethod('post')) {
			if (!empty($request['data']['formData'])) {
				//pasrse searlize data 
				$newPostData = array();
				parse_str($request['data']['formData'], $newPostData);  //print_r($newPostData); die;
				unset($newPostData['_token']);
				unset($newPostData['parent_category_name']);
				if (empty($newPostData['p_category_id'])) {
					$returnData = array('error' => config('messages.message.productCatCodeRequired'));
				} else if (empty($newPostData['p_category_name'])) {
					$returnData = array('error' => config('messages.message.productCatNameRequired'));
				} else if (!isset($newPostData['parent_id']) && base64_decode($newPostData['p_category_id']) == $newPostData['parent_id']) {
					$returnData = array('error' => config('messages.message.ParentChildSame'));
				} else {
					if (!empty($newPostData['parent_id'])) {
						$level = $productCategory->getCategoryLevel($newPostData['parent_id']);
						$newPostData['level'] = $level + 1;
					} else {
						$newPostData['level'] = 0;
					}

					$newPostData['p_category_id'] = base64_decode($newPostData['p_category_id']);
					$category = $productCategory->categoryDetails($newPostData['p_category_id']);

					if (strtolower(trim($category->p_category_name)) == strtolower(trim($newPostData['p_category_name'])) && $category->parent_id == $newPostData['parent_id']) {
						$returnData = array('success' => config('messages.message.savedNoChange'));
					} else {
						if (empty($this->isCategoryExist($newPostData['p_category_name'], $newPostData['parent_id']))) {
							$updated = DB::table('product_categories')->where('p_category_id', $newPostData['p_category_id'])->update($newPostData);
							if ($updated) {
								$returnData = array('success' => config('messages.message.productUpdated'));
							} else {
								$returnData = array('success' => config('messages.message.savedNoChange'));
							}
						} else {
							$returnData = array('error' => config('messages.message.productCatExist'));
						}
					}
				}
			} else {
				$returnData = array('error' =>  config('messages.message.dataNotFound'));
			}
		} else {
			$returnData = array('error' => config('messages.message.dataNotFound'));
		}
		return response()->json($returnData);
	}

	/**
	 * isProductCategoryExist Is used to check the duplicate entry by p_category_code
	 * Date : 01-16-17
	 * Author : nisha
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function isCategoryExist($p_category_name, $parent_id)
	{
		return DB::table('product_categories')
			->where('product_categories.p_category_name', '=', $p_category_name)
			->where('product_categories.parent_id', '=', $parent_id)
			->count();
	}

	/**
	 * Remove the specified resource from storage.
	 *
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function deleteProductCategoryData(Request $request)
	{
		$returnData = array();
		if ($request->isMethod('post')) {
			if (!empty($request['data']['id'])) {
				try {
					$product = DB::table('product_categories')->where('p_category_id', $request['data']['id'])->delete();
					if ($product) {
						$returnData = array('success' => config('messages.message.productDeleted'));
					} else {
						$returnData = array('error' => config('messages.message.productNotDeleted'));
					}
				} catch (\Illuminate\Database\QueryException $ex) {
					$returnData = array('error' => config('messages.message.foreignKeyDeleteError'));
				}
			} else {
				$returnData = array('error' => config('messages.message.noRecordFound'));
			}
		}
		return response()->json($returnData);
	}

	/**
	 * upload product categores csv
	 *
	 * @param  
	 * @return \Illuminate\Http\Response
	 */
	public function uploadProductCategoryCSV(Request $request)
	{
		global $models, $productCategory;
		$prefix = !empty(config('messages.message.proCatPrefix')) ? config('messages.message.proCatPrefix') : 'PC';

		$error 		= '0';
		$message 	= config('messages.message.error');
		$proData = array();
		$allowedFormat = array('application/vnd.ms-excel', 'application/csv', 'text/csv');
		$allowedFields = array('product_category_name*', 'product_parent_category');

		if (empty($_FILES['productMasterFile']['name'])) {
			$message = config('messages.message.fileNotSelected');
		} else if (in_array($_FILES['productMasterFile']['type'], $allowedFormat) && $_FILES['productMasterFile']['size'] > '0') {
			$productTestData = $models->csvToArray($_FILES['productMasterFile']['tmp_name']);

			//check csv file valid or not
			foreach ($allowedFields as $headerVal) {
				if (!in_array($headerVal, $productTestData['header'])) {
					$headerMsgArr[] = $headerVal;             //invalid columns array
				}
			}

			if (!empty($headerMsgArr)) {
				$message = config('messages.message.invalidFileCoulmn');
			} else {
				if (!empty($productTestData['data'])) {
					foreach ($productTestData['data'] as $key => $data) {

						$proData[$key]['p_category_name'] = !empty($data[0]) ? $data[0] : '';
						$proData[$key]['parent_id'] = !empty($data[1]) ? $models->getTableUniqueIdByName('product_categories', 'p_category_name', $data[1], 'p_category_id') : '0';
						$proData[$key]['created_by'] = \Auth::user()->id;

						if (!empty($proData[$key]['parent_id'])) {
							$level = $productCategory->getCategoryLevel($proData[$key]['parent_id']);
							$proData[$key]['level'] = $level + 1;
						} else {
							$proData[$key]['level'] = 0;
						}

						//validations
						$rowNum = $key + 2;
						if (empty($proData[$key]['p_category_name'])) {
							$messageArr[] = 'Category name is required at row ' . $rowNum;
						}
						if ($productCategory->getCategoryLevel($proData[$key]['parent_id']) == 2) {
							$messageArr[] = 'Error in product category level at row ' . $rowNum;
						}
						if (!empty($this->isProductCategoryNameExist($proData[$key]))) {
							$messageArr[] = 'Duplicate record at row ' . $rowNum;
						}
					}
					if (!empty($messageArr)) {
						$message = implode(',', $messageArr);
					} else {
						if (!empty($proData)) {
							foreach ($proData as $key => $newPostData) {
								$newPostData['p_category_code'] = $models->generateCode($prefix, 'product_categories', 'p_category_code', 'p_category_id');     //autogenerate product code
								if (!empty($newPostData)) {
									DB::table('product_categories')->insert($newPostData);          //save final data
								}
							}
							$error 		= '1';
							$message 	= config('messages.message.success');
						} else {
							$message 	= config('messages.message.noRecordFound');
						}
					}
				} else {
					$message 	= config('messages.message.provideAppData');
				}
			}
		} else {
			$message = config('messages.message.invalidFileType');
		}

		return response()->json(array('error' => $error, 'message' => $message));
	}
}
