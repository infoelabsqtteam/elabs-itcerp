<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models;
use App\Http\Requests;
use Auth;
use App\Method;
use App\ProductCategory;
use Validator;
use Route;
use DB;

class MethodController extends Controller
{
	/**
	 * protected Variable.
	 */
	protected $auth;
	
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        global $models,$productCategory;
		$models = new Models();
		$productCategory = new ProductCategory();
		$this->middleware('auth'); 
		$this->middleware(function ($request, $next) {
            $this->session = Auth::user();
			parent::__construct($this->session);
			//Checking current request is allowed or not
			$allowedAction = array('index','navigation');
			$actionData    = explode('@',Route::currentRouteAction());
			$action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])): '0';			
			if(defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action,$allowedAction)){
				return redirect('dashboard')->withErrors('Permission Denied!');
			}
            return $next($request);
		 });
    }	
	
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $user_id            = defined('USERID') ? USERID : '0';
        $division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';		
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';		
        $equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';
		
        return view('master.method_master.index',['title' => 'Method Master','_method_master' => 'active','user_id' => $user_id,'division_id' => $division_id,'equipment_type_ids' => $equipment_type_ids]);
    }

	//autogenerate code
	public function getAutoGeneratedCode(Request $request)
    {
		global $models;
		$prefix=!empty(config('messages.message.methodPrefix'))?config('messages.message.methodPrefix'):'M';
		$code=$models->generateCode($prefix,'method_master','method_code','method_id');   //prefix,tableName,fieldName,primaryKey						  
		return response()->json(['uniqueCode' =>$code]);		
	}
	
    /** create new method
     *  Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function createMethod(Request $request)
    {
		$returnData = array();
		
		if ($request->isMethod('post') && !empty($request['data']['formData'])) {

			//pasrse searlize data 
			$newPostData = array();
			parse_str($request['data']['formData'], $newPostData);			
			if(empty($newPostData['method_code'])){
				$returnData = array('error' => config('messages.message.methodCodeRequired'));
			}else if(empty($newPostData['method_name'])){
				$returnData = array('error' => config('messages.message.methodNameRequired'));
			}else if(empty($newPostData['method_desc'])){
				$returnData = array('error' => config('messages.message.methodDescRequired'));
			}else if(empty($newPostData['equipment_type_id'])){
				$returnData = array('error' => config('messages.message.equipmentNameRequired'));
			}else if(empty($newPostData['product_category_id'])){
				$returnData = array('error' => config('messages.message.productCategoryIdRequired'));
			}else{				
				try{
					// check if method already exist or not 
					if(empty($this->isMethodExist($newPostData['method_code']))){ 
						//if(empty($this->isMethodNameExist($newPostData['method_name'],$newPostData['equipment_type_id']))){
							$created = Method::create([
								'method_code' 			=> $newPostData['method_code'],
								'method_desc' 			=> $newPostData['method_desc'],
								'method_name' 			=> $newPostData['method_name'],
								'equipment_type_id' 	=> $newPostData['equipment_type_id'],
								'product_category_id' 	=> $newPostData['product_category_id'],
								'created_by' 			=> USERID,
								'status'					=>$newPostData['status']
							]);					
							//check if users created add data in user detail
							if($created->id){ 
								$returnData = array('success' => config('messages.message.methodSaved'));
							}else{
								$returnData = array('error' => config('messages.message.methodNotSaved'));
							}
						/* }else{
							$returnData = array('error' => config('messages.message.methodNameExist'));
						} */
					}else{
						$returnData = array('error' => config('messages.message.methodExist'));
					}										
				}catch(\Illuminate\Database\QueryException $ex){ 
				   $returnData = array('error' => config('messages.message.methodNameExist'));
				} 
			}
		}else{
			$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
		} 
		return response()->json($returnData);		
    }
	/**
     * isMethodExist Is used to check the method duplicate entry by method_code
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function isMethodExist($method_code) 
    { 
		if(!empty($method_code)){
			$methodData = DB::table('method_master')
						->where('method_master.method_code', '=', $method_code)
						->first(); 
			if(@$methodData->method_id){
				return $methodData->method_id;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
    
	/**
     * isMethodNameExist Is used to check the method duplicate entry with equipment
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function isMethodNameExist($method_name,$equipment_type_id) 
    { 
		if(!empty($method_name) && !empty($equipment_type_id)){
			$methodData = DB::table('method_master')
						->where('method_master.method_name', '=', $method_name)
						->where('method_master.equipment_type_id', '=', $equipment_type_id)
						->first(); 
			if(@$methodData->method_id){
				return $methodData->method_id;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
	
    /**
     * Get list of companies on page load.
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function getMethodsList($equipment_type_id){
		
		global $models;
		
		$method = DB::table('method_master')
					->join('equipment_type','method_master.equipment_type_id','equipment_type.equipment_id')
					->join('product_categories', 'product_categories.p_category_id', '=', 'method_master.product_category_id')
					->join('users', 'method_master.created_by','users.id')
					->select('method_master.*','method_master.created_at as method_created_at','method_master.updated_at as method_updated_at','equipment_type.equipment_name','product_categories.p_category_name','users.name as createdBy');
					
		if(!empty($equipment_type_id)){
			$method->where('method_master.equipment_type_id','=',$equipment_type_id);	
		}		
		$methods=$method->where('method_master.status','1')->get();	
		$models->formatTimeStampFromArray($methods,DATETIMEFORMAT);
		
		return response()->json(['methodsList' => $methods]);
    }   

	/**
     * get methods using multisearch.
     * Date : 19-04-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function getMethodListMultiSearch(Request $request)
    { 
	    $searchArry=$request['data']['formData'];  		
		global $models;
		$method = DB::table('method_master')
					->join('equipment_type','method_master.equipment_type_id','equipment_type.equipment_id')
					->join('product_categories', 'product_categories.p_category_id', '=', 'method_master.product_category_id')
					->join('users', 'method_master.created_by','users.id')
					->select('method_master.*','method_master.created_at as method_created_at','method_master.updated_at as method_updated_at','equipment_type.equipment_name','product_categories.p_category_name','users.name as createdBy');
		
					if(!empty($searchArry['search_method_code'])){
						$method->where('method_master.method_code','like','%'.$searchArry['search_method_code'].'%');
					}
					if(!empty($searchArry['search_method_name'])){
						$method->where('method_master.method_name','like','%'.$searchArry['search_method_name'].'%');
					}
					if(!empty($searchArry['search_method_desc'])){
						$method->where('method_master.method_desc','like','%'.$searchArry['search_method_desc'].'%');
					}
					if(!empty($searchArry['search_equipment_type_id'])){
						$method->where('method_master.equipment_type_id','=',$searchArry['search_equipment_type_id']);
					}
					if(!empty($searchArry['search_p_category_name'])){
						$method->where('product_categories.p_category_name','like','%'.$searchArry['search_p_category_name'].'%');
					}
					if(!empty($searchArry['search_created_by'])){
						$method->where('users.name','like','%'.$searchArry['search_created_by'].'%');
					}
					if(!empty($searchArry['search_status'])){
						$method->where('method_master.status',$searchArry['search_status']);
					}
					if(!empty($searchArry['search_created_at'])){
						$method->where('method_master.created_at','like','%'.$searchArry['search_created_at'].'%');
					}
					if(!empty($searchArry['search_updated_at'])){
						$method->where('method_master.updated_at','like','%'.$searchArry['search_updated_at'].'%');
					}
		$methods=$method->get();	
		$models->formatTimeStampFromArray($methods,DATETIMEFORMAT);
		return response()->json([
		   'methodsList' => $methods,
		]);
    }	
    
    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function editMethodData(Request $request){
		
		$returnData = array();
		
		if ($request->isMethod('post')) {
			if(!empty($request['data']['id'])){
				//get user by email id
				$methodData = DB::table('method_master')
						->join('equipment_type','method_master.equipment_type_id','equipment_type.equipment_id')
						->join('product_categories', 'product_categories.p_category_id', '=', 'method_master.product_category_id')
						->where('method_master.method_id', '=', $request['data']['id'])
						->first();				
				if($methodData->method_id){
					$returnData = array('responseData' => $methodData);				
				}else{
					$returnData = array('error' => config('messages.message.noRecordFound'));
				}
			}else{
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		}else{
				$returnData = array('error' => config('messages.message.provideAppData'));			
		}
		return response()->json($returnData);	
    }
    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function updateMethodData(Request $request){
		
        $returnData = array();
		
		if ($request->isMethod('post') && !empty($request['data']['formData'])){
				
			//pasrse searlize data 
			$newPostData = array();
			parse_str($request['data']['formData'], $newPostData);
			
			if(empty($newPostData['method_name'])){
				$returnData = array('error' => config('messages.message.methodNameRequired'));
			}else if(empty($newPostData['method_desc'])){
				$returnData = array('error' => config('messages.message.methodDescRequired'));
			}else if(empty($newPostData['equipment_type_id'])){
				$returnData = array('error' => config('messages.message.equipmentNameRequired'));
			}else if(empty($newPostData['product_category_id'])){
				$returnData = array('error' => config('messages.message.productCategoryIdRequired'));
			}else{
				try {					
					if(!empty($newPostData['method_id'])){
						$updated = DB::table('method_master')->where('method_id',$newPostData['method_id'])->update([
							'method_desc' 			=> $newPostData['method_desc'],
							'method_name' 			=> $newPostData['method_name'],
							'equipment_type_id' 	=> $newPostData['equipment_type_id'],
							'product_category_id' 	=> $newPostData['product_category_id'],
							'status'					=>$newPostData['status']

						]);
						if($updated){
							//check if data updated in Method table 
							$returnData = array('success' => config('messages.message.methodUpdated'));		
						}else{
							$returnData = array('success' => config('messages.message.savedNoChange'));
						}
					}else{
						$returnData = array('error' =>  config('messages.message.dataNotFound'));
					}							
				}catch(\Illuminate\Database\QueryException $ex){ 
				   $returnData = array('error' => config('messages.message.methodNameExist'));
				}			 
			}

		}else{
			$returnData = array('error' => config('messages.message.dataNotFound'));
		} 
		return response()->json($returnData);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function deleteMethodData(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')){
			if(!empty($request['data']['id'])){
				try { 
					$method = DB::table('method_master')->where('method_id', $request['data']['id'])->delete();
					if($method){
						$returnData = array('success' => config('messages.message.methodDeleted'));
					}else{
						$returnData = array('error' => config('messages.message.methodNotDeleted'));					
					}
				}catch(\Illuminate\Database\QueryException $ex){ 
				   $returnData = array('error' => config('messages.message.foreignKeyDeleteError'));
				}
			}else{
				$returnData = array('error' => config('messages.message.noRecordFound'));
			}
		}
		return response()->json($returnData);
    }
	
	/**
	* upload Method MASTER CSV data
	*
	* @param  int  $id
	* @return \Illuminate\Http\Response
	*/
    public function uploadMethodCSV(Request $request){
		global $models,$productCategory; 
		$prefix=!empty(config('messages.message.methodPrefix'))?config('messages.message.methodPrefix'):'M';
		
		$error 		= '0';
        $message 	= config('messages.message.error');
		$proData = array();
		$allowedFormat = array('application/vnd.ms-excel','application/csv','text/csv');
		$allowedFields = array('method_name*','method_desc','equipment_type_name*','product_section*');
		
		if(empty($_FILES['methodsFile']['name'])){			 
			 $message = config('messages.message.fileNotSelected');	
		}else if(in_array($_FILES['methodsFile']['type'],$allowedFormat) && $_FILES['methodsFile']['size'] > '0'){
			$productTestData = $models->csvToArray($_FILES['methodsFile']['tmp_name']);
			
			//check csv file valid or not
			foreach($allowedFields as $headerVal){
				if(!in_array($headerVal,$productTestData['header'])){
					$headerMsgArr[] = $headerVal;              //invalid columns array
				}
			}	
			
			if(!empty($headerMsgArr)){			
				$message = config('messages.message.invalidFileCoulmn');
			}else{ 
				if(!empty($productTestData['data'])){
					foreach($productTestData['data'] as $key=>$data){  						
						
						$proData[$key]['method_name'] = !empty($data[0]) ? trim($data[0]) : ''; 
						$proData[$key]['method_desc'] = !empty($data[1]) ? trim($data[1]) : $proData[$key]['method_name'];
						$data[2]; $proData[$key]['equipment_type_id'] = !empty($data[2]) ? $models->getTableUniqueIdByName('equipment_type','equipment_name',trim($data[2]),'equipment_id') : '0';
					 	$proData[$key]['product_category_id'] = !empty($data[3]) ? $models->getTableUniqueIdByName('product_categories','p_category_name',trim($data[3]),'p_category_id') : '0';
					    $proData[$key]['created_by'] = \Auth::user()->id;
						
						//validations
						$rowNum = $key+2;
						if(empty($proData[$key]['method_name']) || empty($proData[$key]['equipment_type_id']) || empty($proData[$key]['product_category_id'])){
							$messageArr[] = 'Error in row '.$rowNum;
						}
						if($productCategory->getCategoryLevel($proData[$key]['product_category_id']) != 0){
							$messageArr[] = 'Invalid product section at row '.$rowNum;
						}	
					} 
					if(!empty($messageArr)){
						$message = implode(',',$messageArr); 
					}else{
						if(!empty($proData)){				
							foreach($proData as $key=>$newPostData){
								$newPostData['method_code'] = $models->generateCode($prefix,'method_master','method_code','method_id'); 		    //autogenerate product code
								if(!empty($newPostData)){
									try{
										$insertedId = DB::table('method_master')->insertGetId($newPostData);	
									}catch(\Illuminate\Database\QueryException $ex){ 
									    //$returnData = config('messages.message.equipmentExist');
									}								
								}
							}					
							$error 		= '1';
							$message 	= config('messages.message.success');
						}else{			
							$message 	= config('messages.message.noRecordFound');
						}
					}
				}else{					
					$message 	= config('messages.message.provideAppData');
				}
			}
		}else{
			$message = config('messages.message.invalidFileType');
		}
        
		return response()->json(array('error' => $error, 'message' => $message));		
    }
}
