<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models;
use App\Http\Requests;
use Auth;
use App\TestStandard;
use App\ProductCategory;
use Validator;
use Route;
use DB;

class TestStandardsController extends Controller
{
    /**
    * protected Variable.
    */
    protected $auth;
	
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct(){
		
	global $models,$testStandard,$productCategory;
	
	$models       = new Models();
	$testStandard = new TestStandard();
	$productCategory = new ProductCategory();
	
	$this->middleware('auth');
	
	$this->middleware(function ($request, $next) {
	    $this->session = Auth::user();
	    parent::__construct($this->session);
	    //Checking current request is allowed or not
	    $allowedAction = array('index','navigation');
	    $actionData    = explode('@',Route::currentRouteAction());
	    $action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])): '0';			
	    if(defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action,$allowedAction)){
		return redirect('dashboard')->withErrors('Permission Denied!');
	    }
	    return $next($request);
	});
    }
    
    /**
    * Display a listing of the resource.
    *
    * @return \Illuminate\Http\Response
    */
    public function index(){
	
	$user_id            = defined('USERID') ? USERID : '0';
	$division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';		
	$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
	$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';		
	$equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';
	
	return view('master.test_standards.index',['title' => 'Test Standards','_test_standards' => 'active','user_id' => $user_id,'division_id' => $division_id,'equipment_type_ids' => $equipment_type_ids]);
    }

    //autogenerate code
    public function getAutoGeneratedCode(Request $request){
	global $models;
	$prefix=!empty(config('messages.message.standardPrefix'))?config('messages.message.standardPrefix'):'STD';
	$code=$models->generateCode($prefix,'test_standard','test_std_code','test_std_id');   //prefix,tableName,fieldName,primaryKey						  
	return response()->json(['uniqueCode' =>$code]);		
    }
    
    /** create new test_standard
    *  Show the form for creating a new resource.
    *
    * @return \Illuminate\Http\Response
    */
    public function createTestStandard(Request $request){
    
	global $models,$testStandard;
	 
	$returnData = array();
	
	if ($request->isMethod('post') && !empty($request['data']['formData'])){			
		
	    //pasrse searlize data 
	    $newPostData = array();
	    parse_str($request['data']['formData'], $newPostData);
	    
	    if(empty($newPostData['test_std_code'])){
		$returnData = array('error' => config('messages.message.testStdCodeRequired'));
	    }else if(empty($newPostData['test_std_name'])){
		$returnData = array('error' => config('messages.message.testStdNameRequired'));
	    }else if(empty($newPostData['test_std_desc'])){
		$returnData = array('error' => config('messages.message.testStdDescRequired'));
	    }else if(empty($newPostData['product_category_id'])){
		$returnData = array('error' => config('messages.message.productCategoryIdRequired'));
	    }else{
		try{
		    // check if test_standard already exist or not 
		    if(empty($this->isExist($newPostData['test_std_code']))){ 
			$created = TestStandard::create([
			    'test_std_code'       => $newPostData['test_std_code'],
			    'test_std_name' 	  => $newPostData['test_std_name'],
			    'test_std_desc' 	  => $newPostData['test_std_desc'],
			    'product_category_id' => $newPostData['product_category_id'],
				'created_by'          => USERID,
				'status'			  => $newPostData['status'],
			]);					
			//check if users created add data in user detail
			if($created->id){ 
			    $returnData = array('success' => config('messages.message.testStdSaved'));
			}else{
			    $returnData = array('error' => config('messages.message.testStdNotSaved'));
			}
		    }else{
			$returnData = array('error' => config('messages.message.testStdCodeExist'));
		    }
		}catch(\Illuminate\Database\QueryException $ex){ 
		   $returnData = array('error' => config('messages.message.testStdExist'));
		}
	    }
	}else{
	    $returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
	} 
	return response()->json($returnData);		
    }

    /**
     * Get list of companies on page load.
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function getTestStandardsList($product_category_id)
    {
	global $models;
	
	$testStandardObj = DB::table('test_standard')						  
			    ->join('users', 'test_standard.created_by', '=', 'users.id')
			    ->join('product_categories', 'product_categories.p_category_id', '=', 'test_standard.product_category_id')
			    ->select('test_standard.*', 'users.name as createdBy','product_categories.p_category_name');
	if(!empty($product_category_id)){
	    $testStandardObj->where('test_standard.product_category_id','=',$product_category_id);
	}
	$testStdList = $testStandardObj->where('test_standard.status',1)->get();
	$models->formatTimeStampFromArray($testStdList,DATETIMEFORMAT);
	
	return response()->json(['testStdList' => $testStdList]);
    }   	
	  
    /**
    * get equipment using multisearch.
    * Date : 19-04-17
    * Author : nisha
    * @param  \Illuminate\Http\Request  $request
    * @return \Illuminate\Http\Response
    */
    public function getStandardListMultiSearch(Request $request)
    {			
	global $models;
	
	$searchArry = $request['data']['formData'];
	
	$testStd = DB::table('test_standard')						  
		    ->join('users', 'test_standard.created_by', '=', 'users.id')
		    ->join('product_categories', 'product_categories.p_category_id', '=', 'test_standard.product_category_id')
		    ->select('test_standard.*', 'users.name as createdBy','product_categories.p_category_name');
	if(!empty($searchArry['search_test_std_code'])){
	    $testStd->where('test_standard.test_std_code','=',$searchArry['search_test_std_code']);
	}
	if(!empty($searchArry['search_product_category_id'])){
	    $testStd->where('test_standard.product_category_id','=',$searchArry['search_product_category_id']);
	}
	if(!empty($searchArry['search_test_std_name'])){
	    $testStd->where('test_standard.test_std_name','like','%'.$searchArry['search_test_std_name'].'%');
	}
	if(!empty($searchArry['search_test_std_desc'])){
	    $testStd->where('test_standard.test_std_desc','like','%'.$searchArry['search_test_std_desc'].'%');
	}
	if(!empty($searchArry['search_created_by'])){
	    $testStd->where('users.name','like','%'.$searchArry['search_created_by'].'%');
	}
	if(!empty($searchArry['search_status'])){
	    $testStd->where('test_standard.status','=',$searchArry['search_status']);
	}
	if(!empty($searchArry['search_created_at'])){
	    $testStd->where('test_standard.created_at','like','%'.$searchArry['search_created_at'].'%');
	}
	if(!empty($searchArry['search_updated_at'])){
	    $testStd->where('test_standard.updated_at','like','%'.$searchArry['search_updated_at'].'%');
	}
	$testStandard = $testStd->get();
	
	$models->formatTimeStampFromArray($testStandard,DATETIMEFORMAT);
	
	return response()->json(['testStdList' => $testStandard]);
    }

    /**
    * isTestStandardExist Is used to check the test_standard duplicate entry by test_std_code
    * Date : 01-03-17
    * Author : nisha
    * @param  \Illuminate\Http\Request  $request
    * @return \Illuminate\Http\Response
    */
    public function isExist($test_std_code) 
    { 
	if(!empty($test_std_code)){
	    $test_standardData = DB::table('test_standard')->where('test_standard.test_std_code', '=', $test_std_code)->first(); 
	    if(!empty($test_standardData->test_std_id)){
		return $test_standardData->test_std_id;
	    }else{
		return false;
	    }
	}else{
	    return false;
	}
    }

    
    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function editTestStandardData(Request $request){
		
	$returnData = array();
	
	if ($request->isMethod('post')) {
	    if(!empty($request['data']['id'])){
		$test_standardData = DB::table('test_standard')->where('test_standard.test_std_id', '=', $request['data']['id'])->first();				
		if($test_standardData->test_std_id){
		    $returnData = array('responseData' => $test_standardData);				
		}else{
		    $returnData = array('error' => config('messages.message.noRecordFound'));
		}
	    }else{
		$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
	    }
	}else{
	    $returnData = array('error' => config('messages.message.provideAppData'));			
	}
	return response()->json($returnData);	
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function updateTestStandardData(Request $request){
		
	global $models,$testStandard;
	
	$returnData = array();
	
	if ($request->isMethod('post') && !empty($request['data']['formData'])){    
		    
	    //pasrse searlize data 
	    $newPostData = array();
	    parse_str($request['data']['formData'], $newPostData);   
	    
	    if(empty($newPostData['test_std_name'])){
		$returnData = array('error' => config('messages.message.testStdNameRequired'));
	    }else if(empty($newPostData['test_std_desc'])){
		$returnData = array('error' => config('messages.message.testStdDescRequired'));
	    }else if(empty($newPostData['product_category_id'])){
		$returnData = array('error' => config('messages.message.productCategoryIdRequired'));
	    }else{
		try {	
		    if(!empty($newPostData['test_std_id'])){
			$updated = DB::table('test_standard')->where('test_std_id',$newPostData['test_std_id'])->update([
			    'test_std_name'       => $newPostData['test_std_name'],
			    'test_std_desc'       => $newPostData['test_std_desc'],
				'product_category_id' => $newPostData['product_category_id'],
				'status'			  => $newPostData['status'],
			]);
			//check if data updated in TestStandard table
			if($updated){
			    $returnData = array('success' => config('messages.message.testStdUpdated'));
			}else{
			    $returnData = array('success' => config('messages.message.savedNoChange'));
			}
		    }else{
			$returnData = array('error' =>  config('messages.message.dataNotFound'));
		    }
		}catch(\Illuminate\Database\QueryException $ex){ 
		    $returnData = array('error' => config('messages.message.testStdExist'));
		}
	    }
	}else{
	    $returnData = array('error' =>  config('messages.message.dataNotFound'));
	}
	return response()->json($returnData);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function deleteTestStandardData(Request $request)
    {
	$returnData = array();
	if ($request->isMethod('post')){
	    if(!empty($request['data']['id'])){
		try { 
			$test_standard = DB::table('test_standard')->where('test_std_id', $request['data']['id'])->delete();
			if($test_standard){
				$returnData = array('success' => config('messages.message.testStdDeleted'));
			}else{
				$returnData = array('error' => config('messages.message.testStdNotDeleted'));					
			}
		}catch(\Illuminate\Database\QueryException $ex){ 
		   $returnData = array('error' => config('messages.message.foreignKeyDeleteError'));
		}
	    }else{
		$returnData = array('error' => config('messages.message.noRecordFound'));
	    }
	}
	return response()->json($returnData);
    }
	
    
    /**
    * upload parameters csv data
    *
    * @param  int  $id
    * @return \Illuminate\Http\Response
    */
    public function uploadTestStandardsCSV(Request $request){
	
	global $models,$productCategory;
	
	$error 		= '0';
	$message 	= config('messages.message.error');
	$proData        = array();
	$allowedFormat  = array('application/vnd.ms-excel','application/csv','text/csv');
	$allowedFields  = array('test_std_name*','product_category_name*');
	$prefix         = !empty(config('messages.message.standardPrefix'))?config('messages.message.standardPrefix'):'STD';
	
	if(empty($_FILES['testStdFile']['name'])){			 
	    $message = config('messages.message.fileNotSelected');	
	}else if(in_array($_FILES['testStdFile']['type'],$allowedFormat) && $_FILES['testStdFile']['size'] > '0'){
	    
	    $productTestData = $models->csvToArray($_FILES['testStdFile']['tmp_name']);
	    
	    //check csv file valid or not
	    foreach($allowedFields as $headerVal){
		if(!in_array($headerVal,$productTestData['header'])){
		    $headerMsgArr[] = $headerVal;              //invalid columns array
		}
	    }	
	    
	    if(!empty($headerMsgArr)){			
		$message = config('messages.message.invalidFileCoulmn');
	    }else{ 
		if(!empty($productTestData['data'])){
		    foreach($productTestData['data'] as $key=>$data){  						
			    
			$proData[$key]['test_std_name'] = !empty($data[0]) ? trim($data[0]) : ''; 
			$proData[$key]['product_category_id'] = !empty($data[1]) ? $models->getTableUniqueIdByName('product_categories','p_category_name',trim($data[1]),'p_category_id') : '0';						
			$proData[$key]['created_by'] = \Auth::user()->id;
			
			//validations
			$rowNum = $key+2;
			if(empty($proData[$key]['test_std_name']) || empty($proData[$key]['product_category_id'])){
			    $messageArr[] = 'Error in row '.$rowNum;
			}
			
			if($productCategory->getCategoryLevel($proData[$key]['product_category_id']) != 0){
			    $messageArr[] = 'Invalid product section at row '.$rowNum;
			}
		    }
		    if(!empty($messageArr)){
			$message = implode(',',$messageArr); 
		    }else{
			if(!empty($proData)){	
			    foreach($proData as $key=>$newPostData){
				    $newPostData['test_std_code'] = $models->generateCode($prefix,'test_standard','test_std_code','test_std_id');     //autogenerate product code
				    if(!empty($newPostData)){
					try{
					    $insertedId = DB::table('test_standard')->insertGetId($newPostData);	
					}catch(\Illuminate\Database\QueryException $ex){ 
					    //$returnData = config('messages.message.equipmentExist');
					}								
				    }
			    }					
			    $error = '1';
			    $message = config('messages.message.success');
			}else{			
			    $message = config('messages.message.noRecordFound');
			}
		    }
		}else{					
		    $message = config('messages.message.provideAppData');
		}
	    }
	}else{
	    $message = config('messages.message.invalidFileType');
	}
	
	return response()->json(array('error' => $error, 'message' => $message));		
    }
}
