<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Http\Requests;
use Auth;
use App\Vendor;
use App\Models;
use Session;
use Validator;
use Route;
use DB;

class VendorsController extends Controller
{
    /**
	* protected Variable.
	*/
	protected $auth;
	
	/**
	* Create a new controller instance.
	*
	* @return void
	*/
    public function __construct()
    {
        global $vendor,$models;
        $vendor = new Vendor();
		$models            = new  Models();
        $this->middleware(function ($request, $next) {
            $this->auth = Auth::user();
			parent::__construct($this->auth);
			//Checking current request is allowed or not
			$allowedAction = array('index','navigation');
			$actionData    = explode('@',Route::currentRouteAction());
			$action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])): '0';			
			if(defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action,$allowedAction)){
				return redirect('dashboard')->withErrors('Permission Denied!');
			}
            return $next($request);
        });       
    }
    
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {        
        $user_id            = defined('USERID') ? USERID : '0';
        $division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';		
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';		
        $equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';
		
        return view('inventory.vendors.index',['title' => 'Vendors','_vendors' => 'active','user_id' => $user_id,'division_id' => $division_id,'equipment_type_ids' => $equipment_type_ids]);
    }
    
	//autogenerate code
	public function getAutoGeneratedCode()
    {
		global $models;
		$prefix=!empty(config('messages.message.vendorPrefix'))?config('messages.message.vendorPrefix'):'VEN';
		$code=$models->generateCode($prefix,'vendors','vendor_code','vendor_id');						  
		return response()->json(['uniqueCode' =>$code]);		
	}
	
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function createVendor(Request $request)
    {
        global $vendor;
        
        $error    = '0';
        $message  = config('messages.message.error');
        $data     = '';
        $formData = array();
        
        //Saving record in Vendor table
        if(!empty($request->formData) && $request->isMethod('post')){
            parse_str($request->formData, $formData);                        
            if(!empty($formData)){                
                $formData = array_filter($formData); //Removing the empty key                
                if(empty($formData['division_id'])){
                    $message = config('messages.message.divisionNameRequired');
                }else if(empty($formData['vendor_code'])){
                    $message = config('messages.message.vendorCodeRequired');
                }else if(!empty($vendor->getVendorCodeExistence($formData['vendor_code']))){
                    $message = config('messages.message.vendorCodeExistentence');
                }else if(empty($formData['vendor_name'])){
                    $message = config('messages.message.vendorNameRequired');
                }else if(empty($formData['vendor_email'])){
                    $message = config('messages.message.vendorEmailRequired');                    
                }else if(!empty($vendor->getVendorEmailExistence($formData['vendor_email']))){
                    $message = config('messages.message.vendorEmailExist');
                }else if(empty($formData['vendor_mobile'])){
                    $message = config('messages.message.vendorPhoneRequired');
                }else if(!empty($vendor->getVendorMobileExistence($formData['vendor_mobile']))){
                    $message = config('messages.message.vendorMobileExist');
                }else if(empty($formData['vendor_state'])){
                    $message = config('messages.message.vendorStateRequired');
                }else if(empty($formData['vendor_city'])){
                    $message = config('messages.message.vendorCityRequired');
                }else if(empty($formData['vendor_pincode'])){
                    $message = config('messages.message.vendorPincodeRequired');
                }else if(empty($formData['vendor_address'])){
                    $message = config('messages.message.vendorAddressRequired');                
                }else{                    
                    unset($formData['_token']);                    
                    $formData['created_by']=\Auth::user()->id;            
                    $vendorId = DB::table('vendors')->insertGetId($formData);
                    if(!empty($vendorId)){
                        $error   = '1';
                        $message = config('messages.message.saved');                                            
                    }                                       
                }                
            }
        }        
        return response()->json(array('error'=> $error,'message'=> $message,'data'=> $data));	
    }
    
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function editVendor(Request $request)
    {
        global $vendor;
        
        $error    = '0';
        $message  = config('messages.message.error');
        $data     = '';
        $requestData = $formData = array();
        
        //Saving record in Vendor table
        if(!empty($request->formData) && $request->isMethod('post')){            
            parse_str($request->formData, $formData);
            $vendor_id = !empty($formData['vendor_id']) ? $formData['vendor_id'] : '0';                 
            if(!empty($vendor_id) && !empty($formData)){
                if(empty($formData['division_id'])){
                    $message = config('messages.message.divisionNameRequired');
                }else if(empty($formData['vendor_code'])){
                    $message = config('messages.message.vendorCodeRequired');
                }else if($vendor->getVendorCodeExistence($formData['vendor_code'],'edit',$vendor_id)){
                    $message = config('messages.message.vendorCodeExistentence');
                }else if(empty($formData['vendor_name'])){
                    $message = config('messages.message.vendorNameRequired');
                }else if(empty($formData['vendor_email'])){
                    $message = config('messages.message.vendorEmailRequired');
                }else if($vendor->getVendorEmailExistence($formData['vendor_email'],'edit',$vendor_id)){
                    $message = config('messages.message.vendorEmailExist');
                }else if(empty($formData['vendor_mobile'])){
                    $message = config('messages.message.vendorPhoneRequired');
                }else if($vendor->getVendorMobileExistence($formData['vendor_mobile'],'edit',$vendor_id)){
                    $message = config('messages.message.vendorMobileExist');
                }else if(empty($formData['vendor_state'])){
                    $message = config('messages.message.vendorStateRequired');
                }else if(empty($formData['vendor_city'])){
                    $message = config('messages.message.vendorCityRequired');
                }else if(empty($formData['vendor_pincode'])){
                    $message = config('messages.message.vendorPincodeRequired');
                }else if(empty($formData['vendor_address'])){
                    $message = config('messages.message.vendorAddressRequired');                
                }else{
                    unset($formData['_token']);
                    unset($formData['vendor_id']);                    
                    //echo '<pre>';print_r($formData);die;             
                    if(DB::table('vendors')->where('vendors.vendor_id',$vendor_id)->update($formData)){
						$error   = '1';
						$message = config('messages.message.updated');
					}else{
						$error   = '1';
						$message = config('messages.message.savedNoChange');  
					}
                }                
            }
        }        
        return response()->json(['error'=> $error,'message'=> $message,'data'=> $data,'vendorId' => $vendor_id]);	
    }
        
    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function getVendors($division_id)
    {
        $error    = '0';
        $message  = '';
        $data     = '';
        
        $vendorObj = DB::table('vendors')
                    ->join('divisions','divisions.division_id','vendors.division_id')
                    ->join('state_db','state_db.state_id','vendors.vendor_state')
                    ->join('city_db','city_db.city_id','vendors.vendor_city')
				    ->Join('users', 'vendors.created_by', '=', 'users.id'); 
        if(!empty($division_id) && is_numeric($division_id)){
            $vendorObj->where('vendors.division_id',$division_id);
        }
        $vendorObj->select('vendors.*','state_db.state_name','city_db.city_name','divisions.division_name','users.name as createdBy');  
        $vendorObj->orderBy('vendors.vendor_id','DESC');        
        $vendors = $vendorObj->get();
        return response()->json(array('error'=> $error,'message'=> $message,'vendorList'=> $vendors));
    }
    
    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function viewVendor($vendor_id)
    {
        $error    = '0';
        $message  = config('messages.message.error');
        $data     = '';
        
        $vendorObj = DB::table('vendors');
        $vendorObj->join('divisions','divisions.division_id','vendors.division_id');
        $vendorObj->join('state_db','state_db.state_id','vendors.vendor_state');
        $vendorObj->join('city_db','city_db.city_id','vendors.vendor_city'); 
        $vendorObj->where('vendors.vendor_id',$vendor_id);
        $vendorObj->select('vendors.*','state_db.state_name','city_db.city_name','divisions.division_name');
        $vendorObj->orderBy('vendors.vendor_id','DESC');        
        $vendors = $vendorObj->first();
        $error   = !empty($vendors) ? 1 : 0;
        
        return response()->json(array('error'=> $error,'message'=> $message,'vendorDetailList'=> $vendors));
    }
    
    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function deleteVendor(Request $request, $vendor_id)
    {
        $error    = '0';
        $message  = '';
        $data     = '';
        
        try{
            if(DB::table('vendors')->where('vendors.vendor_id','=',$vendor_id)->delete()){
                $error    = '1';
                $message = config('messages.message.deleted');      
            } 
        }catch(\Illuminate\Database\QueryException $ex){
            $message = config('messages.message.foreignKeyDeleteError');
        }             
		return response()->json(['error' => $error,'message' => $message]);
    }

}
