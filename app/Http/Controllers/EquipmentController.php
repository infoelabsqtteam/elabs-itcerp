<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models;
use App\Http\Requests;
use Auth;
use App\Equipment;
use Validator;
use Route;
use DB;

class EquipmentController extends Controller
{
	/**
	 * protected Variable.
	 */
	protected $auth;
	
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        global $models;
		$models = new Models();
		$this->middleware('auth'); 
		$this->middleware(function ($request, $next) {
            $this->session = Auth::user();
			parent::__construct($this->session);
			//Checking current request is allowed or not
			$allowedAction = array('index','navigation');
			$actionData    = explode('@',Route::currentRouteAction());
			$action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])): '0';			
			if(defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action,$allowedAction)){
				return redirect('dashboard')->withErrors('Permission Denied!');
			}
            return $next($request);
		 });
    }	
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $user_id            = defined('USERID') ? USERID : '0';
        $division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';		
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';		
        $equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';
		
        return view('master.equipment_master.index',['title' => 'Equipment Master','_equipment_master' => 'active','user_id' => $user_id,'division_id' => $division_id,'equipment_type_ids' => $equipment_type_ids]);
    }

	//autogenerate code
	public function getAutoGeneratedCode(Request $request)
    {
		global $models;
		$prefix=!empty(config('messages.message.equipmentPrefix'))?config('messages.message.equipmentPrefix'):'EQU';
		$code=$models->generateCode($prefix,'equipment_type','equipment_code','equipment_id');   //parameter to generate codeprefix,tableName,fieldName,primaryKey						  
		return response()->json(['uniqueCode' =>$code]);		
	}
	
    /** create new equipment
     *  Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function createEquipment(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')) {
			if(!empty($request['data']['formData'])){  
				//pasrse searlize data 
				$newPostData = array();
				parse_str($request['data']['formData'], $newPostData);  
				if(empty($newPostData['equipment_code']))
				{
					$returnData = array('error' => config('messages.message.equipmentCodeRequired'));
				}else if(empty($newPostData['equipment_name'])){
					$returnData = array('error' => config('messages.message.equipmentNameRequired'));
				}else if(empty($newPostData['equipment_capacity'])){
					$returnData = array('error' => config('messages.message.equipmentCapacityRequired'));
				}else if(!empty($newPostData['equipment_capacity']) && !is_numeric($newPostData['equipment_capacity'])){
					$returnData = array('error' => config('messages.message.equipmentCapacityNumericRequired'));
				}else if(empty($newPostData['equipment_description'])){
					$returnData = array('error' => config('messages.message.equipmentDescRequired'));
				}else{
					try {
						
						// check if equipment already exist or not 
						if($this->isEquipmentExist($newPostData['equipment_code'])==0){
							$newPostData['status'] = !empty($newPostData['equipment_status']) ? $newPostData['equipment_status'] : 0;
							unset($newPostData['_token'],$newPostData['equipment_status']);
							$newPostData['created_by'] = USERID;

							$createdId = DB::table('equipment_type')->insertGetId($newPostData);
							//check if users created add data in user detail
							if($createdId){ 
								$returnData = array('success' => config('messages.message.equipmentSaved'));
							}else{
								$returnData = array('error' => config('messages.message.equipmentNotSaved'));
							}
						}else{
							$returnData = array('error' => config('messages.message.equipmentNotSaved'));
						}
					}catch(\Illuminate\Database\QueryException $ex){ 
						$returnData = array('error' => config('messages.message.equipmentExist'));
					}
				}
			}else{
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		}else{
			$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
		} 
		return response()->json($returnData);		
    }

    /**
     * Get list of companies on page load.
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function getEquipmentsList(){
	global $models;
	
	$equipments = DB::table('equipment_type')->join('users', 'equipment_type.created_by', '=', 'users.id')->select('equipment_type.*','users.name as createdBy')->where('equipment_type.status','1')->get();
	
	$models->formatTimeStampFromArray($equipments,DATETIMEFORMAT);
	return response()->json(['equipmentsList' => $equipments,]);
    }   
	/**
     * get equipment using multisearch.
     * Date : 19-04-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function getEquipmentListMultiSearch(Request $request)
    { 
		$searchArry=$request['data']['formData'];  	
		global $models;
		//$date = date_create_from_format('d-m-Y H:i A',$searchArry['search_created_at']);
		//$searchArry['search_created_at']=date_format($date, 'Y-m-d H:i:s');
		$equipment = DB::table('equipment_type')
					->join('users', 'equipment_type.created_by', '=', 'users.id')
					->select('equipment_type.*','users.name as createdBy');
				if(!empty($searchArry['search_equipment_code'])){
					$equipment->where('equipment_type.equipment_code','like','%'.$searchArry['search_equipment_code'].'%');
				}
				if(!empty($searchArry['search_equipment_name'])){
					$equipment->where('equipment_type.equipment_name','like','%'.$searchArry['search_equipment_name'].'%');
				}
				if(!empty($searchArry['search_equipment_desc'])){
					$equipment->where('equipment_type.equipment_description','like','%'.$searchArry['search_equipment_desc'].'%');
				}
				if(!empty($searchArry['search_created_by'])){
					$equipment->where('users.name','like','%'.$searchArry['search_created_by'].'%');
				}
				if(!empty($searchArry['search_status'])){
					$equipment->where('equipment_type.status',$searchArry['search_status']);
				}
				if(!empty($searchArry['search_created_at'])){
					$equipment->where('equipment_type.created_at','like','%'.$searchArry['search_created_at'].'%');
				}
				if(!empty($searchArry['search_updated_at'])){
					$equipment->where('equipment_type.updated_at','like','%'.$searchArry['search_updated_at'].'%');
				}
		$equipments = $equipment->get();
		$models->formatTimeStampFromArray($equipments,DATETIMEFORMAT);		
		return response()->json([
		   'equipmentsList' => $equipments,
		]);
    }

    /**
     * isEquipmentExist Is used to check the equipment duplicate entry by equipment_code
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function isEquipmentExist($equipment_code) 
    { 
		if(!empty($equipment_code)){
			$equipmentData = DB::table('equipment_type')
						->where('equipment_type.equipment_code', '=', $equipment_code)
						->first(); 
			if(@$equipmentData->equipment_id){
				return $equipmentData->equipment_id;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
	
    
    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function editEquipmentData(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')) {
			if(!empty($request['data']['id'])){
				// get user by email id
				$equipmentData = DB::table('equipment_type')
								->where('equipment_type.equipment_id', '=', $request['data']['id'])
								->first();
				
				if($equipmentData->equipment_id){
					$returnData = array('responseData' => $equipmentData);				
				}else{
					$returnData = array('error' => config('messages.message.noRecordFound'));
				}
			}else{
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		}else{
				$returnData = array('error' => config('messages.message.provideAppData'));			
		}
		return response()->json($returnData);	
    }
    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function updateEquipmentData(Request $request)
    {
        $returnData = array();
		if ($request->isMethod('post') && !empty($request['data']['formData'])) {
	
			//pasrse searlize data 
			$newPostData = array();
			parse_str($request['data']['formData'], $newPostData);
			
			if(empty($newPostData['equipment_id1'])){
				$returnData = array('error' => config('messages.message.equipmentCodeRequired'));
			}else if(empty($newPostData['equipment_name1'])){
				$returnData = array('error' => config('messages.message.equipmentNameRequired'));
			}else if(empty($newPostData['equipment_capacity1'])){
					$returnData = array('error' => config('messages.message.equipmentCapacityRequired'));
			}else if(!empty($newPostData['equipment_capacity1']) && !is_numeric($newPostData['equipment_capacity1'])){
				$returnData = array('error' => config('messages.message.equipmentCapacityNumericRequired'));
			}else if(empty($newPostData['equipment_description1'])){
				$returnData = array('error' => config('messages.message.equipmentDescRequired'));
			}else{
				try {
					$newPostData['equipment_id1']=base64_decode($newPostData['equipment_id1']);
					$updated = DB::table('equipment_type')
								->where('equipment_id',$newPostData['equipment_id1'])
								->update([
									'equipment_description' => $newPostData['equipment_description1'],
									'equipment_name' => $newPostData['equipment_name1'],
									'equipment_capacity' => $newPostData['equipment_capacity1'],
									'status'=>$newPostData['equipment_status1']
								]);
								
					//check if data updated in Equipment table
					if($updated){
						 $returnData = array('success' => config('messages.message.equipmentUpdated'));
					}else{
						 $returnData = array('success' => config('messages.message.savedNoChange'));
					}
				}catch(\Illuminate\Database\QueryException $ex){ 
				   $returnData = array('error' => config('messages.message.equipmentNameExist'));
				}
			}	
		}else{
			$returnData = array('error' => config('messages.message.dataNotFound'));
		} 
		return response()->json($returnData);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function deleteEquipmentData(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')){
			if(!empty($request['data']['id'])){
				try{
					$equipment = DB::table('equipment_type')->where('equipment_id', $request['data']['id'])->delete();
					if($equipment){
						$returnData = array('success' => config('messages.message.equipmentDeleted'));
					}else{
						$returnData = array('error' => config('messages.message.equipmentNotDeleted'));					
					}
				}catch(\Illuminate\Database\QueryException $ex){ 
				   $returnData = array('error' => config('messages.message.foreignKeyDeleteError'));
				}
			}else{
				$returnData = array('error' => config('messages.message.noRecordFound'));
			}
		}
		return response()->json($returnData);
    }
	
	/**
	* upload parameters csv data
	*
	* @param  int  $id
	* @return \Illuminate\Http\Response
	*/
    public function uploadEquipmentTypesCSV(Request $request){
		global $models,$testParameters; 
		$prefix=!empty(config('messages.message.equipmentPrefix'))?config('messages.message.equipmentPrefix'):'EQU';

		$error 		= '0';
        $message 	= config('messages.message.error');
		$proData = array();
		$allowedFormat = array('application/vnd.ms-excel','application/csv','text/csv');
		$allowedFields = array('equipment_name*','equipment_description');
		
		if(empty($_FILES['equipmentFile']['name'])){			 
			 $message = config('messages.message.fileNotSelected');	
		}else if(in_array($_FILES['equipmentFile']['type'],$allowedFormat) && $_FILES['equipmentFile']['size'] > '0'){
			$productTestData = $models->csvToArray($_FILES['equipmentFile']['tmp_name']);
			
			//check csv file valid or not
			foreach($allowedFields as $headerVal){
				if(!in_array($headerVal,$productTestData['header'])){
					$headerMsgArr[] = $headerVal;              //invalid columns array
				}
			}	
			
			if(!empty($headerMsgArr)){			
				$message = config('messages.message.invalidFileCoulmn');
			}else{ 
				if(!empty($productTestData['data'])){
					foreach($productTestData['data'] as $key=>$data){  						
						
						$proData[$key]['equipment_name'] = !empty($data[0]) ? trim($data[0]) : ''; 
						$proData[$key]['equipment_description'] = !empty($data[1]) ? trim($data[1]) : $proData[$key]['equipment_name'];
						$proData[$key]['created_by'] = \Auth::user()->id;
						
						//validations
						$rowNum = $key+2;
						if(empty($proData[$key]['equipment_name']) || empty($proData[$key]['equipment_description'])){
							$messageArr[] = 'Error in row '.$rowNum;
						}
					}
					if(!empty($messageArr)){
						$message = implode(',',$messageArr); 
					}else{
						if(!empty($proData)){				
							foreach($proData as $key=>$newPostData){
								$newPostData['equipment_code'] = $models->generateCode($prefix,'equipment_type','equipment_code','equipment_id');     //autogenerate product code
								if(!empty($newPostData)){
									try{
										$insertedId = DB::table('equipment_type')->insertGetId($newPostData);	
									}catch(\Illuminate\Database\QueryException $ex){ 
									    //$returnData = config('messages.message.equipmentExist');
									}								
								}
							}					
							$error 		= '1';
							$message 	= config('messages.message.success');
						}else{			
							$message 	= config('messages.message.noRecordFound');
						}
					}
				}else{					
					$message 	= config('messages.message.provideAppData');
				}
			}
		}else{
			$message = config('messages.message.invalidFileType');
		}
        
		return response()->json(array('error' => $error, 'message' => $message));		
    }
    
    
    /**
    * Get list of companies on page load.
    * Date : 01-03-17
    * Author : nisha
    * @param  \Illuminate\Http\Request  $request
    * @return \Illuminate\Http\Response
    */
    public function getSelectedSortingEquipments(){
	
	global $models;
	
	$selectEquipmentList = DB::table('equipment_type')
			    ->join('users', 'equipment_type.created_by', '=', 'users.id')
			    ->select('equipment_type.*','users.name as createdBy')
			    ->get();
	
	$selectedEquipmentList = DB::table('equipment_type')
			    ->join('users', 'equipment_type.created_by', '=', 'users.id')
			    ->select('equipment_type.*','users.name as createdBy')
			    ->where('equipment_type.is_equipment_selected','1')
			    ->orderBy('equipment_type.equipment_sort_by','ASC')
			    ->get();	
	
	return response()->json(['selectEquipmentList' => $selectEquipmentList,'selectedEquipmentList' => $selectedEquipmentList]);
    }
    
    /*************************
    * save new order /create new order
    * @param  \Illuminate\Http\Request  $request
    * @return \Illuminate\Http\Response
    ************************/
    public function saveUpdateSelectSortingEquipment(Request $request){
		
        global $order,$models;
        
	$error    = '0';
	$message  = config('messages.message.error');
	$data     = '';
	$flag  	  = '0';
	$formData = array();
        
        //Saving record in orders table
        if(!empty($request->formData) && $request->isMethod('post')){
	    
	    //Parsing the Serialze Dta
            parse_str($request->formData, $formData);
	    //echo '<pre>last';print_r($formData);die; 
	 
	    if(empty($formData['equipment_id'])){
		$message = config('messages.message.equipmentNameRequired');
	    }else{
		
		//Setting non-selected value to 0
		DB::table('equipment_type')->update(['equipment_type.is_equipment_selected' => '0']);
		
		//Setting is Selected Value to 1
		if(DB::table('equipment_type')->whereIn('equipment_type.equipment_id',array_values($formData['equipment_id']))->update(['equipment_type.is_equipment_selected' => '1'])){
		    $error   = '1';
		    $message = config('messages.message.updated');
		}else{
		    $error   = '1';
		    $message = config('messages.message.savedNoChange');  
		}
	    }  
        }
        return response()->json(['error'=> $error,'message'=> $message,'data'=> $data]);	
    }
    
    /*************************
    * save new order /create new order
    * @param  \Illuminate\Http\Request  $request
    * @return \Illuminate\Http\Response
    ************************/
    public function funSaveUpdateSelectedSortingEquipment(Request $request){
		
        global $order,$models;
        
	$error    = '0';
	$message  = config('messages.message.error');
	$data     = '';
	$flag  	  = '0';
	$formData = array();
        
        //Saving record in orders table
        if(!empty($request->formData) && $request->isMethod('post')){
	    
	    //Parsing the Serialze Dta
            parse_str($request->formData, $formData);
	    //echo '<pre>';print_r($formData);die; 
	 
	    if(empty($formData['equipment_sort_by'])){
		$message = config('messages.message.equipmentNameRequired');
	    }else{
		//Setting is equipment_sort_by Value to 1
		foreach($formData['equipment_sort_by'] as $key => $equipmentId){
		    DB::table('equipment_type')->where('equipment_type.equipment_id',$equipmentId)->update(['equipment_type.equipment_sort_by' => $key+1]);
		}
		$error   = '1';
		$message = config('messages.message.updated');
	    }  
        }
        return response()->json(['error'=> $error,'message'=> $message,'data'=> $data]);	
    }
}
