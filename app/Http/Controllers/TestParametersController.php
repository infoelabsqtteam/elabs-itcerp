<?php

namespace App\Http\Controllers;

use App\Models;
use Illuminate\Http\Request;
use App\Http\Requests;
use Auth;
use App\TestParameters;
use App\TestParameterCategory;
use App\TestParameterInvoicingParent;
use Validator;
use Route;
use DB;

class TestParametersController extends Controller
{
	/**
	 * protected Variable.
	 */
	protected $auth;

	/**
	 * Create a new controller instance.
	 *
	 * @return void
	 */
	public function __construct()
	{

		global $models, $testParameters, $testParameterInvoicingParent;

		$testParameters = new TestParameters();
		$models = new Models();
		$testParameterInvoicingParent = new TestParameterInvoicingParent();

		//Check Auth Login
		$this->middleware('auth');

		$this->middleware(function ($request, $next) {
			$this->session = Auth::user();
			parent::__construct($this->session);
			//Checking current request is allowed or not
			$allowedAction = array('index', 'navigation');
			$actionData    = explode('@', Route::currentRouteAction());
			$action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])) : '0';
			if (defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action, $allowedAction)) {
				return redirect('dashboard')->withErrors('Permission Denied!');
			}
			return $next($request);
		});
	}

	/**
	 * Display a listing of the resource.
	 *
	 * @return \Illuminate\Http\Response
	 */
	public function index()
	{

		global $models, $testParameters;

		$user_id            = defined('USERID') ? USERID : '0';
		$division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';
		$equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';

		return view('master.test_parameters.index', ['title' => 'Test Parameters', '_test_parameters' => 'active', 'user_id' => $user_id, 'division_id' => $division_id, 'equipment_type_ids' => $equipment_type_ids]);
	}

	/**
	 * autogenerate code
	 *
	 * @return \Illuminate\Http\Response
	 */
	public function getAutoGeneratedCode(Request $request)
	{

		global $models;

		$prefix = !empty(config('messages.message.parameterPrefix')) ? config('messages.message.parameterPrefix') : 'PARA';
		$code   = $models->generateCode($prefix, 'test_parameter', 'test_parameter_code', 'test_parameter_id');

		return response()->json(['uniqueCode' => $code]);
	}

	/************************************
	 * Description : create new test-parameters of test parameter category
	 * Created On  : 01-09-2017
	 * Created By  : nisha
	 * Modified On : 28-08-18
	 * Modified By : Praveen Singh
	 * Parameter   : \Illuminate\Http\Request  $request
	 * @return     : \Illuminate\Http\Response
	 ************************************/
	public function createTestParameters(Request $request)
	{

		global $models, $testParameters, $testParameterInvoicingParent;

		$returnData = array();
		$returnData['dataArray']['saved'] = "";
		$returnData['dataArray']['notSaved'] = "";
		$returnData['dataArray']['duplicate'] = "";

		if ($request->isMethod('post') && !empty($request['data']['formData'])) {

			//pasrse searlize data 
			$newPostData = array();
			parse_str($request['data']['formData'], $newPostData);

			$parameterDescArr 	= array('description', 'reference to protocol');
			$equipmentArr 		= !empty($newPostData['equipment_type_id']) ? array_filter($newPostData['equipment_type_id']) : array();
			$tpip_status_id	  	= !empty($newPostData['tpip_status_id']) ? '1' : '0';

			if (empty($newPostData['test_parameter_code'])) {
				$returnData = array('error' => config('messages.message.parameterCodeRequired'));
			} else if ($testParameters->isTestParameterCodeExist($newPostData['test_parameter_code'])) {
				$returnData = array('error' => config('messages.message.parameterExist'));
			} else if (empty($newPostData['test_parameter_name'])) {
				$returnData = array('error' => config('messages.message.parameterNameRequired'));
			} else if (empty($newPostData['test_parameter_print_desc'])) {
				$returnData = array('error' => config('messages.message.parameterDescRequired'));
			} else if (empty($newPostData['test_parameter_category_id'])) {
				$returnData = array('error' => config('messages.message.parameterCategoryRequired'));
			} else if (isset($newPostData['test_parameter_decimal_place']) && !strlen($newPostData['test_parameter_decimal_place'])) {
				$returnData = array('error' => config('messages.message.parameterDecimalPlaceError'));
			} else if ($newPostData['cost_price'] != 0 && empty($newPostData['cost_price'])) {
				$returnData = array('error' => config('messages.message.costPriceRequired'));
			} else if (!empty($newPostData['cost_price']) && filter_var($newPostData['cost_price'], FILTER_VALIDATE_FLOAT) === false) {
				$returnData = array('error' => 'Please enter valid cost price');
			} else if ($newPostData['selling_price'] != 0 && empty($newPostData['selling_price'])) {
				$returnData = array('error' => config('messages.message.sellingPriceRequired'));
			} else if (!empty($newPostData['selling_price']) && filter_var($newPostData['selling_price'], FILTER_VALIDATE_FLOAT) === false) {
				$returnData = array('error' => 'Please enter valid selling price');
			} else if (isset($newPostData['cost_price']) && $newPostData['cost_price'] >= $newPostData['selling_price']) {
				$returnData = array('error' => config('messages.message.costGreaterSellingRequired'));
			} else if ($testParameters->isParameterNameExist($newPostData['test_parameter_name'], $newPostData['test_parameter_category_id'])) {
				$returnData = array('error' => config('messages.message.parameterNameExist'));
			} else if (empty($equipmentArr)) {
				$returnData = array('error' => config('messages.message.equipmentRequired'));
			} else {

				unset($newPostData['equipment_type_id']);
				unset($newPostData['_token']);
				unset($newPostData['tpip_status_id']);

				$newPostData['test_parameter_name']       			= in_array(strtolower(strip_tags($newPostData['test_parameter_name'])), $parameterDescArr) ? strip_tags($newPostData['test_parameter_name']) : trim($newPostData['test_parameter_name']);
				$newPostData['test_parameter_invoicing']  			= !empty($newPostData['test_parameter_invoicing']) ? '1' : '0';
				$newPostData['test_parameter_nabl_scope'] 			= !empty($newPostData['test_parameter_nabl_scope']) ? '1' : '0';
				$newPostData['test_parameter_invoicing_parent_id'] 	= !empty($newPostData['test_parameter_invoicing_parent_id']) ? $newPostData['test_parameter_invoicing_parent_id'] : NULL;
				$newPostData['tpn_editor_status'] 					= !empty($newPostData['tpn_editor_status']) ? $newPostData['tpn_editor_status'] : '0';
				$newPostData['tpd_editor_status'] 					= !empty($newPostData['tpd_editor_status']) ? $newPostData['tpd_editor_status'] : '0';
				$newPostData['created_by'] 		  		  			= USERID;
				$created 								  			= DB::table('test_parameter')->insertGetId($newPostData);

				if ($created) {

					//Include In Parent Parameter Invoicing
					$testParameterInvoicingParent->save_test_parameter_invoicing_parents($tpip_status_id, $created);

					foreach ($equipmentArr as $equipment_type_id) {

						$equipData['test_parameter_id'] = $created;
						$equipData['equipment_type_id'] = $equipment_type_id;

						if (empty($testParameters->isEquipmentExist($equipData['test_parameter_id'], $equipData['equipment_type_id']))) {
							$equpSaved = DB::table('test_parameter_equipment_types')->insert($equipData);
							if ($equpSaved) {
								$saved[] = $testParameters->getParameterEquipmentName($equipment_type_id);
							} else {
								$notSaved[] = $testParameters->getParameterEquipmentName($equipment_type_id);
							}
						} else {
							$duplicate[] = $testParameters->getParameterEquipmentName($equipment_type_id);
						}
					}
					$returnData = array('success' => config('messages.message.parameterSaved'));
					if (!empty($saved)) {
						$returnData['dataArray']['saved'] = $newPostData['test_parameter_name'] . " with the equipment(s) : " . implode(', ', $saved) . "  has been saved successfully.";
					}
					if (!empty($notSaved)) {
						$returnData['dataArray']['notSaved'] = "Error in saving these equipment(s) : " . implode(', ', $notSaved);
					}
					if (!empty($duplicate)) {
						$returnData['dataArray']['duplicate'] = "The equipment(s) : " . implode(', ', $duplicate) . " for parameter " . $newPostData['test_parameter_name'] . " already exist in our record!";
					}
				} else {
					$returnData = array('error' => config('messages.message.parameterNotSaved'));
				}
			}
		} else {
			$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
		}

		return response()->json(['returnData' => $returnData]);
	}

	/************************************
	 * Description : isExist Is used to check the test_parameter duplicate entry by code
	 * Date        : 01-09-17
	 * Author      : nisha
	 * Parameter   : \Illuminate\Http\Request  $request
	 * @return     : \Illuminate\Http\Response
	 ************************************/
	public function isExist($test_parameter_code)
	{
		if (!empty($test_parameter_code)) {
			$data = DB::table('test_parameter')->where('test_parameter.test_parameter_code', '=', $test_parameter_code)->first();
			if (!empty($data->test_parameter_id)) {
				return $data->test_parameter_id;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	/************************************
	 * Description : is parameter name exist
	 * Date        : 20-07-17
	 * Author      : nisha
	 * Parameter   : \Illuminate\Http\Request  $request
	 * @return     : \Illuminate\Http\Response
	 ************************************/
	public function isNameExist($test_parameter_name, $test_parameter_category_id)
	{
		if (!empty($test_parameter_name)) {
			$data = DB::table('test_parameter')
				->where('test_parameter.test_parameter_name', '=', $test_parameter_name)
				->where('test_parameter.test_parameter_category_id', '=', $test_parameter_category_id)
				->first();
			if (!empty($data->test_parameter_id)) {
				return $data->test_parameter_id;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	/************************************
	 * Description : isEquipmentExist Is used to check the test_parameter duplicate entry with equipment
	 * Date        : 20-07-17
	 * Author      : nisha
	 * Parameter   : \Illuminate\Http\Request  $request
	 * @return     : \Illuminate\Http\Response
	 ************************************/
	public function isEquipmentExist($test_parameter_id, $equipment_type_id)
	{
		if (!empty($test_parameter_id) && !empty($equipment_type_id)) {
			$data = DB::table('test_parameter_equipment_types')
				->where('test_parameter_equipment_types.test_parameter_id', '=', $test_parameter_id)
				->where('test_parameter_equipment_types.equipment_type_id', '=', $equipment_type_id)
				->first();
			if (!empty($data->test_parameter_id)) {
				return $data->test_parameter_id;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	/************************************
	 * Description : Get list of test_parameters on page load
	 * Date        : 01-09-17
	 * Author      : nisha
	 * Parameter   : \Illuminate\Http\Request  $request
	 * @return     : \Illuminate\Http\Response
	 ************************************/
	public function getTestParameters(Request $request)
	{

		global $models;

		$error	    	    = '0';
		$message    	    = '';
		$data	    	    = '';
		$returnData 	    = $formData = array();

		$user_id            = defined('USERID') ? USERID : '0';
		$division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : array();
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : array();
		$equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : array();

		//Assigning Condition according to the Role Assigned
		parse_str($request->formData, $formData);

		$status =  !empty($formData['search_status']) ? $formData['search_status'] : 1;
		$parameterObj = DB::table('test_parameter')
			->join('test_parameter_categories', 'test_parameter_categories.test_para_cat_id', 'test_parameter.test_parameter_category_id')
			->leftJoin('test_parameter_equipment_types', 'test_parameter.test_parameter_id', 'test_parameter_equipment_types.test_parameter_id')
			->leftJoin('equipment_type', 'test_parameter_equipment_types.equipment_type_id', 'equipment_type.equipment_id')
			->join('users', 'test_parameter.created_by', 'users.id');

		//Filtering records according to department assigned
		if (!empty($department_ids) && is_array($department_ids)) {
			$parameterObj->whereIn('test_parameter_categories.product_category_id', $department_ids);
		}

		if (!empty($formData['keyword']) && strlen($formData['keyword']) > 1) {
			$keyword = trim($formData['keyword']);
			$parameterObj->where(function ($parameterObj) use ($models, $keyword) {
				$parameterObj->where('test_parameter.test_parameter_name', 'LIKE', '%' . $keyword . '%')
					->orwhere('test_parameter.test_parameter_code', 'LIKE', '%' . $keyword . '%')
					->orwhere('equipment_type.equipment_name', 'LIKE', '%' . $keyword . '%')
					->orwhere('test_parameter_categories.test_para_cat_name', 'LIKE', '%' . $keyword . '%')
					->orwhere('test_parameter.test_parameter_invoicing', 'LIKE', '%' . $keyword . '%')
					->orwhere('test_parameter.test_parameter_nabl_scope', 'LIKE', '%' . $keyword . '%')
					->Orwhere('test_parameter.created_at', 'LIKE', '%' . date("Y-m-d", strtotime($keyword)) . '%')
					->Orwhere('test_parameter.updated_at', 'LIKE', '%' . $keyword . '%');
			});
		} else {
			$parameterObj->whereMonth('test_parameter.created_at', date('m'));
			$parameterObj->whereYear('test_parameter.created_at', date('Y'));
		}

		//Applying Multi Search
		$this->setTestParametersMultiSearch($parameterObj, $formData);
		$parameterObj->where('test_parameter.status', $status)->select('test_parameter.*', 'equipment_type.equipment_name', 'test_parameter_categories.test_para_cat_name', 'users.name as createdBy');
		$testParameters = $parameterObj->groupBy('test_parameter.test_parameter_id')->orderBy('test_parameter.test_parameter_id', 'DESC')->get();

		//format Time Stamp	
		$models->formatTimeStampFromArray($testParameters, DATETIMEFORMAT);

		if (!empty($testParameters)) {
			foreach ($testParameters as $key => $parameter) {
				$returnData[$key]['testParametersList'] = $parameter;
				$returnData[$key]['equipmentList'] = DB::table('test_parameter_equipment_types')
					->leftJoin('equipment_type', 'test_parameter_equipment_types.equipment_type_id', 'equipment_type.equipment_id')
					->where('test_parameter_equipment_types.test_parameter_id', '=', $parameter->test_parameter_id)
					->select('equipment_type.equipment_id', 'equipment_type.equipment_name')
					->get()
					->toArray();
			}
		}
		return response()->json(['error' => $error, 'message' => $message, 'allList' => $returnData]);
	}

	/************************************
	 * Description : Get list of test_parameters on page load
	 * Date        : 01-09-17
	 * Author      : nisha
	 * Parameter   : \Illuminate\Http\Request  $request
	 * @return     : \Illuminate\Http\Response
	 ************************************/
	public function getTestParameterDownload(Request $request)
	{

		global $models;

		$error	    	    = '0';
		$message    	    = '';
		$data	    	    = '';
		$returnData 	    = $formData = array();

		$user_id            = defined('USERID') ? USERID : '0';
		$division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : array();
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : array();
		$equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : array();

		if ($request->isMethod('post') && !empty($request->generate_parameter_documents)) {

			//Assigning Condition according to the Role Assigned
			$formData = $request->all();
			//echo '<pre>';print_r($formData);die;

			$parameterObj = DB::table('test_parameter')
				->join('test_parameter_categories', 'test_parameter_categories.test_para_cat_id', 'test_parameter.test_parameter_category_id')
				->join('users', 'test_parameter.created_by', 'users.id')
				->leftJoin('product_categories', 'test_parameter_categories.product_category_id', 'product_categories.p_category_id')
				->leftJoin('test_parameter_equipment_types', 'test_parameter.test_parameter_id', 'test_parameter_equipment_types.test_parameter_id')
				->leftJoin('equipment_type', 'test_parameter_equipment_types.equipment_type_id', 'equipment_type.equipment_id');

			//Filtering records according to department assigned
			if (!empty($department_ids) && is_array($department_ids)) {
				$parameterObj->whereIn('test_parameter_categories.product_category_id', $department_ids);
			}

			if (!empty($formData['keyword']) && strlen($formData['keyword']) > 1) {
				$keyword = trim($formData['keyword']);
				$parameterObj->where(function ($parameterObj) use ($models, $keyword) {
					$parameterObj->where('test_parameter.test_parameter_name', 'LIKE', '%' . $keyword . '%')
						->orwhere('test_parameter.test_parameter_code', 'LIKE', '%' . $keyword . '%')
						->orwhere('equipment_type.equipment_name', 'LIKE', '%' . $keyword . '%')
						->orwhere('test_parameter_categories.test_para_cat_name', 'LIKE', '%' . $keyword . '%')
						->orwhere('test_parameter.test_parameter_invoicing', 'LIKE', '%' . $keyword . '%')
						->orwhere('test_parameter.test_parameter_nabl_scope', 'LIKE', '%' . $keyword . '%')
						->Orwhere('test_parameter.created_at', 'LIKE', '%' . date("Y-m-d", strtotime($keyword)) . '%')
						->Orwhere('test_parameter.updated_at', 'LIKE', '%' . $keyword . '%');
				});
			} else {
				$parameterObj->whereMonth('test_parameter.created_at', date('m'));
				$parameterObj->whereYear('test_parameter.created_at', date('Y'));
			}

			//Applying Multi Search
			$this->setTestParametersMultiSearch($parameterObj, $formData);
			$parameterObj->select('product_categories.p_category_name as department', 'test_parameter.test_parameter_code as test_parameter_code', 'test_parameter.test_parameter_name', 'test_parameter_categories.test_para_cat_name as test_parameter_category', 'test_parameter.cost_price', 'test_parameter.selling_price', 'equipment_type.equipment_name as equipment_type', 'users.name as created_by', 'test_parameter.created_at as created_on', 'test_parameter.updated_at as updated_on');;
			$allParametersList = $parameterObj->groupBy('test_parameter.test_parameter_id')->orderBy('test_parameter_categories.test_para_cat_name', 'ASC')->orderBy('test_parameter.test_parameter_id', 'DESC')->get();

			//format Time Stamp	
			$models->formatTimeStampFromArray($allParametersList, DATETIMEFORMAT);

			if ($formData['generate_parameter_documents'] == 'Excel') {
				$allParametersList  		= !empty($allParametersList) ? json_decode(json_encode($allParametersList), true) : array();
				$allParametersList 		= $models->unsetFormDataVariablesArray($allParametersList, array('canDispatchOrder'));
				$filterData['heading'] 		= 'All Parameters List(' . count($allParametersList) . ')';
				$filterData['mis_report_name'] 	= 'parameters_list_';
				$responseData['tableHead'] 	= !empty($allParametersList) ? array_keys(end($allParametersList)) : array();
				$responseData['tableBody'] 	= !empty($allParametersList) ? $allParametersList : array();
				return $models->downloadExcel($responseData, $filterData);
			} else {
				return redirect()->back()->withErrors(config('messages.message.OrderInternalErrorMsg'));
			}
		} else {
			return redirect()->back()->withErrors(config('messages.message.OrderInternalErrorMsg'));
		}
	}

	/****************************************
	 * get equipment using multisearch.
	 * Date : 19-04-17
	 * Author : nisha
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 **********************************************/
	public function setTestParametersMultiSearch($parameterObj, $formData)
	{

		global $models;

		if (!empty($formData['test_parameter_code'])) {
			$parameterObj->where('test_parameter.test_parameter_code', 'LIKE', '%' . $formData['test_parameter_code'] . '%');
		}
		if (!empty($formData['test_parameter_name'])) {
			$parameterObj->where('test_parameter.test_parameter_name', 'LIKE', '%' . $formData['test_parameter_name'] . '%');
		}
		if (!empty($formData['test_parameter_print_desc'])) {
			$parameterObj->where('test_parameter.test_parameter_print_desc', 'LIKE', '%' . $formData['test_parameter_print_desc'] . '%');
		}
		if (!empty($formData['search_test_para_cat_id']) && is_numeric($formData['search_test_para_cat_id'])) {
			$parameterObj->where('test_parameter_categories.test_para_cat_id', '=', $formData['search_test_para_cat_id']);
		}
		if (!empty($formData['search_test_parameter_invoicing']) && in_array(strtolower($formData['search_test_parameter_invoicing']), array('yes', 'no'))) {
			$parameterObj->where('test_parameter.test_parameter_invoicing', '=', strtolower($formData['search_test_parameter_invoicing']) == 'yes' ? '1' : '0');
		}
		if (!empty($formData['search_test_parameter_nabl_scope']) && in_array(strtolower($formData['search_test_parameter_nabl_scope']), array('yes', 'no'))) {
			$parameterObj->where('test_parameter.test_parameter_nabl_scope', '=', strtolower($formData['search_test_parameter_nabl_scope']) == 'yes' ? '1' : '0');
		}
		if (!empty($formData['search_equipment_type_id'])) {
			$parameterObj->where('test_parameter_equipment_types.equipment_type_id', '=', $formData['search_equipment_type_id']);
		}
		if (!empty($formData['search_created_by'])) {
			$parameterObj->where('users.name', 'LIKE', '%' . $formData['search_created_by'] . '%');
		}
		if (!empty($formData['search_status'])) {
			$parameterObj->where('test_parameter.status', 'LIKE', $formData['search_status']);
		}
		if (!empty($formData['search_created_at'])) {
			$parameterObj->where('test_parameter.created_at', 'LIKE', '%' . $formData['search_created_at'] . '%');
		}
		if (!empty($formData['search_updated_at'])) {
			$parameterObj->where('test_parameter.updated_at', 'LIKE', '%' . $formData['search_updated_at'] . '%');
		}
	}

	/************************************
	 * Description : Show the form for editing the Test Parameters and get previous saved data
	 * Date        : 01-09-17
	 * Author      : nisha
	 * Parameter   : \Illuminate\Http\Request  $request  (int  $request['data']['id'])
	 * @return     : \Illuminate\Http\Response
	 ************************************/
	public function editTestParameters(Request $request)
	{

		$returnData = array();
		$responseData = array();

		if ($request->isMethod('post') && !empty($request['data']['id'])) {

			$testParameters = DB::table('test_parameter')
				->join('test_parameter_categories', 'test_parameter_categories.test_para_cat_id', 'test_parameter.test_parameter_category_id')
				->join('users', 'test_parameter.created_by', '=', 'users.id')
				->leftJoin('test_parameter_equipment_types', 'test_parameter.test_parameter_id', 'test_parameter_equipment_types.test_parameter_id')
				->leftJoin('equipment_type', 'test_parameter_equipment_types.equipment_type_id', 'equipment_type.equipment_id')
				->leftJoin('test_parameter_invoicing_parents', 'test_parameter_invoicing_parents.test_parameter_id', 'test_parameter.test_parameter_id')
				->where('test_parameter.test_parameter_id', '=', $request['data']['id'])
				->select('test_parameter.*', 'test_parameter_invoicing_parents.tpip_id', 'test_parameter_categories.test_para_cat_name', 'users.name as createdBy', 'test_parameter_equipment_types.equipment_type_id', 'equipment_type.equipment_name')
				->first();

			if (!empty($testParameters)) {
				$responseData['testParametersList'] = $testParameters;
				$responseData['equipmentList'] = DB::table('test_parameter')
					->leftJoin('test_parameter_equipment_types', 'test_parameter_equipment_types.test_parameter_id', 'test_parameter.test_parameter_id')
					->leftJoin('equipment_type', 'test_parameter_equipment_types.equipment_type_id', 'equipment_type.equipment_id')
					->where('test_parameter_equipment_types.test_parameter_id', '=', $request['data']['id'])
					->select('equipment_type.equipment_id', 'equipment_type.equipment_name')
					->get()
					->toArray();
			}

			if ($testParameters) {
				$returnData = array('responseData' => $responseData);
			} else {
				$returnData = array('error' => config('messages.message.noRecordFound'));
			}
		} else {
			$returnData = array('error' => config('messages.message.provideAppData'));
		}

		//echo '<pre>';print_r($returnData);die;
		return response()->json($returnData);
	}

	/************************************
	 * Description : Update the specified resource in storage using test_parameter_id
	 * Created On  : 01-09-2017
	 * Created By  : nisha
	 * Modified On : 28-08-18
	 * Modified By : Praveen Singh
	 ************************************/
	public function updateTestParameters(Request $request)
	{

		global $models, $testParameters, $testParameterInvoicingParent;

		try {

			$returnData = array();
			$returnData['dataArray']['saved'] = "";
			$returnData['dataArray']['notSaved'] = "";
			$returnData['dataArray']['duplicate'] = "";
			$newPostData = array();

			if ($request->isMethod('post') && !empty($request['data']['formData'])) {

				//pasrse searlize data 
				parse_str($request['data']['formData'], $newPostData);
				//echo '<pre>';print_r($returnData); die;

				$parameterDescArr = array('description', 'reference to protocol');
				$equipmentTypeIds = !empty($newPostData['equipment_type_id']) ? array_filter($newPostData['equipment_type_id']) : array();
				$testParameterId  = !empty($newPostData['test_parameter_id']) ? trim($newPostData['test_parameter_id']) : '0';
				$tpip_status_id	  = !empty($newPostData['tpip_status_id']) ? '1' : '0';

				if (empty($newPostData['test_parameter_id'])) {
					$returnData = array('error' => config('messages.message.parameterIDRequired'));
				} else if (empty($newPostData['test_parameter_name'])) {
					$returnData = array('error' => config('messages.message.parameterNameRequired'));
				} else if (empty($newPostData['test_parameter_print_desc'])) {
					$returnData = array('error' => config('messages.message.parameterDescRequired'));
				} else if (empty($newPostData['test_parameter_category_id'])) {
					$returnData = array('error' => config('messages.message.parameterCategoryRequired'));
				} else if (isset($newPostData['test_parameter_decimal_place']) && !strlen($newPostData['test_parameter_decimal_place'])) {
					$returnData = array('error' => config('messages.message.parameterDecimalPlaceError'));
				} else if ($newPostData['cost_price'] != 0 && empty($newPostData['cost_price'])) {
					$returnData = array('error' => config('messages.message.costPriceRequired'));
				} else if (!empty($newPostData['cost_price']) && filter_var($newPostData['cost_price'], FILTER_VALIDATE_FLOAT) === false) {
					$returnData = array('error' => 'Please enter valid cost price !');
				} else if ($newPostData['selling_price'] != 0 && empty($newPostData['selling_price'])) {
					$returnData = array('error' => config('messages.message.sellingPriceRequired'));
				} else if (!empty($newPostData['selling_price']) && filter_var($newPostData['selling_price'], FILTER_VALIDATE_FLOAT) === false) {
					$returnData = array('error' => 'Please enter valid selling price !');
				} else if (isset($newPostData['cost_price']) && $newPostData['cost_price'] >= $newPostData['selling_price']) {
					$returnData = array('error' => config('messages.message.costGreaterSellingRequired'));
				} else if (empty(array_filter($equipmentTypeIds))) {
					$returnData = array('error' => config('messages.message.equipmentRequired'));
				} else if ($testParameters->isParameterNameExist($newPostData['test_parameter_name'], $newPostData['test_parameter_category_id'], $testParameterId)) {
					$returnData = array('error' => config('messages.message.parameterNameExist'));
				} else {
					if (!empty($equipmentTypeIds)) {

						unset($newPostData['equipment_type_id']);
						unset($newPostData['test_parameter_id']);
						unset($newPostData['tpip_status_id']);
						unset($newPostData['_token']);

						$newPostData['test_parameter_name']       			= in_array(strtolower(strip_tags($newPostData['test_parameter_name'])), $parameterDescArr) ? strip_tags($newPostData['test_parameter_name']) : trim($newPostData['test_parameter_name']);
						$newPostData['test_parameter_invoicing']  			= !empty($newPostData['test_parameter_invoicing']) ? '1' : '0';
						$newPostData['test_parameter_nabl_scope'] 			= !empty($newPostData['test_parameter_nabl_scope']) ? '1' : '0';
						$newPostData['test_parameter_invoicing_parent_id'] 	= !empty($newPostData['test_parameter_invoicing_parent_id']) ? $newPostData['test_parameter_invoicing_parent_id'] : NULL;
						$newPostData['tpn_editor_status'] 					= !empty($newPostData['tpn_editor_status']) ? $newPostData['tpn_editor_status'] : '0';
						$newPostData['tpd_editor_status'] 					= !empty($newPostData['tpd_editor_status']) ? $newPostData['tpd_editor_status'] : '0';

						//Include In Parent Parameter Invoicing
						$testParameterInvoicingParent->save_test_parameter_invoicing_parents($tpip_status_id, $testParameterId);

						//Updating test_parameter table data
						DB::table('test_parameter')->where('test_parameter_id', '=', $testParameterId)->update($newPostData);

						//Deleting test_parameter_equipment_types table data
						DB::table('test_parameter_equipment_types')->where('test_parameter_id', '=', $testParameterId)->delete();

						foreach ($equipmentTypeIds as $equipment_type_id) {

							$dataSaveUpdate	= array();
							$dataSaveUpdate['test_parameter_id'] = $testParameterId;
							$dataSaveUpdate['equipment_type_id'] = $equipment_type_id;

							if (empty($testParameters->isEquipmentExist($dataSaveUpdate['test_parameter_id'], $dataSaveUpdate['equipment_type_id']))) {
								if (!empty($dataSaveUpdate) && DB::table('test_parameter_equipment_types')->insert($dataSaveUpdate)) {
									$saved[]  = $testParameters->getParameterEquipmentName($equipment_type_id);
								} else {
									$notSaved[] = $testParameters->getParameterEquipmentName($equipment_type_id);
								}
							} else {
								$duplicate[] = $testParameters->getParameterEquipmentName($equipment_type_id);
							}
						}

						$returnData = array('success' => config('messages.message.parameterSaved'));
						if (!empty($saved)) {
							$returnData['dataArray']['saved'] = $newPostData['test_parameter_name'] . " with the equipment(s) : " . implode(', ', $saved) . "  has been updated successfully.";
						}
						if (!empty($notSaved)) {
							$returnData['dataArray']['notSaved'] = "Error in updating these equipment(s) : " . implode(', ', $notSaved);
						}
						if (!empty($duplicate)) {
							$returnData['dataArray']['duplicate'] = "The equipment(s) : " . implode(', ', $duplicate) . " for parameter " . $newPostData['test_parameter_name'] . " already exist in our record!";
						}
					} else {
						$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
					}
				}
			} else {
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		} catch (\Illuminate\Database\QueryException $ex) {
			$returnData = array('error' => config('messages.message.parameterNameExist'));
		}

		//echo '<pre>';print_r($returnData); die;
		return response()->json(['returnData' => $returnData]);
	}

	/************************************
	 * Description : delete test_parameters using test_parameter_id
	 * Date        : 01-09-17
	 * Author      : nisha
	 * Parameter   : \Illuminate\Http\Request  $request  (int  $request['data']['id'])
	 * @return     : \Illuminate\Http\Response
	 ************************************/
	public function deleteTestParameters(Request $request)
	{

		$returnData = array();

		if ($request->isMethod('post')) {
			if (!empty($request['data']['id'])) {
				try {
					$test_parameter_category_id = DB::table('test_parameter')->where('test_parameter_id', $request['data']['id'])->delete();
					if ($test_parameter_category_id) {
						$returnData = array('success' => config('messages.message.parameterDeleted'));
					} else {
						$returnData = array('error' => config('messages.message.parameterNotDeleted'));
					}
				} catch (\Illuminate\Database\QueryException $ex) {
					$returnData = array('error' => config('messages.message.foreignKeyDeleteError'));
				}
			} else {
				$returnData = array('error' => config('messages.message.noRecordFound'));
			}
		}
		return response()->json($returnData);
	}

	/**
	 * upload parameters csv data
	 *
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function uploadParametersCSV(Request $request)
	{

		global $models, $testParameters;

		$prefix = !empty(config('messages.message.parameterPrefix')) ? config('messages.message.parameterPrefix') : 'PARA';

		$error 		= '0';
		$message 	= config('messages.message.error');
		$proData 	= array();
		$allowedFormat 	= array('application/vnd.ms-excel', 'application/csv', 'text/csv');
		$allowedFields 	= array('test_parameter_category_name*', 'test_parameter_name*', 'test_parameter_print_desc', 'equipment_name*');

		if (empty($_FILES['testParameterFile']['name'])) {
			$message = config('messages.message.fileNotSelected');
		} else if (in_array($_FILES['testParameterFile']['type'], $allowedFormat) && $_FILES['testParameterFile']['size'] > '0') {

			$productTestData = $models->csvToArray($_FILES['testParameterFile']['tmp_name']);

			//check csv file valid or not
			foreach ($allowedFields as $headerVal) {
				if (!in_array($headerVal, $productTestData['header'])) {
					$headerMsgArr[] = $headerVal;              //invalid columns array
				}
			}

			if (!empty($headerMsgArr)) {
				$message = config('messages.message.invalidFileCoulmn');
			} else {
				if (!empty($productTestData['data'])) {
					foreach ($productTestData['data'] as $key => $data) {

						$equpArr[$key] = array();

						$proData[$key]['test_parameter_category_id'] = !empty($data[0]) ? $models->getTableUniqueIdByName('test_parameter_categories', 'test_para_cat_name', $data[0], 'test_para_cat_id') : '0';
						$proData[$key]['test_parameter_name'] = !empty($data[1]) ? trim($data[1]) : '';
						$proData[$key]['test_parameter_print_desc'] = !empty($data[2]) ? trim($data[2]) : $proData[$key]['test_parameter_name'];
						$equpArr[$key]  = !empty($data[3]) ? trim($data[3]) : '';
						$proData[$key]['created_by'] = \Auth::user()->id;

						//validations
						$rowNum = $key + 2;
						if (empty($proData[$key]['test_parameter_category_id']) || empty($proData[$key]['test_parameter_name']) || empty($equpArr[$key])) {
							$messageArr[] = 'Error in row ' . $rowNum;
						}
						if (!empty($this->isNameExist($proData[$key]['test_parameter_name'], $proData[$key]['test_parameter_category_id']))) {
							$messageArr[] = 'Duplicate record at ' . $rowNum;
						}
						if (!empty($equpArr[$key])) {
							$equpArray = explode(',', $equpArr[$key]);
							foreach ($equpArray as $equip) {
								$equipment_id =  $testParameters->getParameterEquipmentIdByName($equip);
								if (!empty($equipment_id)) {
									$proData[$key]['equipmentArr'][] = $equipment_id;
								} else {
									$messageArr[] = 'Invalid Equipment at row ' . $rowNum;
								}
							}
						}
					}
					if (!empty($messageArr)) {
						$message = implode(',', $messageArr);
					} else {
						if (!empty($proData)) {
							foreach ($proData as $key => $newPostData) {
								$newPostData['test_parameter_code'] = $models->generateCode($prefix, 'test_parameter', 'test_parameter_code', 'test_parameter_id');     //autogenerate product code
								$equipmentFinalArr = $newPostData['equipmentArr'];
								unset($newPostData['equipmentArr']);
								if (!empty($newPostData)) {
									$insertedId = DB::table('test_parameter')->insertGetId($newPostData);
									if ($insertedId) {
										foreach ($equipmentFinalArr as $equipment_type_id) {
											$equipData = array();
											$equipData['test_parameter_id'] = $insertedId;
											$equipData['equipment_type_id'] = $equipment_type_id;
											DB::table('test_parameter_equipment_types')->insert($equipData);
										}
									}
								}
							}
							$error 		= '1';
							$message = config('messages.message.success');
						} else {
							$message = config('messages.message.noRecordFound');
						}
					}
				} else {
					$message = config('messages.message.provideAppData');
				}
			}
		} else {
			$message = config('messages.message.invalidFileType');
		}

		return response()->json(array('error' => $error, 'message' => $message));
	}
}
