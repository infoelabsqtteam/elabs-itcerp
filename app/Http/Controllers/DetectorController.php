<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models;
use App\Http\Requests;
use Auth;
use App\Method;
use App\Detector;

use App\ProductCategory;
use Validator;
use Route;
use DB;

class DetectorController extends Controller
{
	/**
	 * protected Variable.
	 */
	protected $auth;
	
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        global $models,$productCategory;
		$models = new Models();
		$productCategory = new ProductCategory();
		$this->middleware('auth'); 
		$this->middleware(function ($request, $next) {
            $this->session = Auth::user();
			parent::__construct($this->session);
			//Checking current request is allowed or not
			$allowedAction = array('index','navigation');
			$actionData    = explode('@',Route::currentRouteAction());
			$action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])): '0';			
			if(defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action,$allowedAction)){
				return redirect('dashboard')->withErrors('Permission Denied!');
			}
            return $next($request);
		 });
    }	
	
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $user_id            = defined('USERID') ? USERID : '0';
        $division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';		
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';		
        $equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';
		
        return view('master.detector_master.index',['title' => 'Detector Master','_detector_master' => 'active','user_id' => $user_id,'division_id' => $division_id,'equipment_type_ids' => $equipment_type_ids]);
    }

	//autogenerate code
	public function getAutoGeneratedCode(Request $request)
    {
		global $models;
		$prefix=!empty(config('messages.message.detectorPrefix'))?config('messages.message.detectorPrefix'):'D';
		$code=$models->generateCode($prefix,'detector_master','detector_code','detector_id');   //prefix,tableName,fieldName,primaryKey						  
		return response()->json(['uniqueCode' =>$code]);		
	}
	
    /** create new detector
     *  Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function createDetector(Request $request)
    {
		$returnData = array();
		
		if ($request->isMethod('post') && !empty($request['data']['formData'])) {

			//pasrse searlize data 
			$newPostData = array();
			parse_str($request['data']['formData'], $newPostData);
			//print_r($newPostData); die;
			if(empty($newPostData['detector_code'])){
				$returnData = array('error' => config('messages.message.detectorCodeRequired'));
			}else if(empty($newPostData['detector_name'])){
				$returnData = array('error' => config('messages.message.detectorNameRequired'));
			}else if(empty($newPostData['detector_desc'])){
				$returnData = array('error' => config('messages.message.detectorDescRequired'));
			}else if(empty($newPostData['equipment_type_id'])){
				$returnData = array('error' => config('messages.message.equipmentNameRequired'));
			}else if(empty($newPostData['product_category_id'])){
				$returnData = array('error' => config('messages.message.productCategoryIdRequired'));
			}else{				
				try{
					//echo $newPostData['detector_code']; die;
					// check if detector already exist or not
					if(empty($this->isMethodExist($newPostData['detector_code']))){						
						unset($newPostData['_token']);
						$newPostData['created_by'] = USERID;
						$created = DB::table('detector_master')->insertGetId($newPostData);
						//check if users created add data in user detail
						if($created){
							$returnData = array('success' => config('messages.message.detectorSaved'));
						}else{
							$returnData = array('error' => config('messages.message.detectorNotSaved'));
						}
					}else{
						$returnData = array('error' => config('messages.message.detectorExist'));
					}										
				}catch(\Illuminate\Database\QueryException $ex){
				   $returnData = array('error' => config('messages.message.detectorNameExist'));
				} 
			}
		}else{
			$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
		} 
		return response()->json($returnData);		
    }
	/**
     * isMethodExist Is used to check the detector duplicate entry by detector_code
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function isMethodExist($detector_code) { 
		if(!empty($detector_code)){
			$data = DB::table('detector_master')
						->where('detector_master.detector_code', '=', $detector_code)
						->first();
			if(@$data->detector_id){
				return $data->detector_id;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
    
	/**
     * isMethodNameExist Is used to check the detector duplicate entry with equipment
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function isMethodNameExist($detector_name,$equipment_type_id,$product_cat_id) 
    { 
		if(!empty($detector_name) && !empty($equipment_type_id)){
			$detectorData = DB::table('detector_master')
				    ->where('detector_master.detector_name', '=', $detector_name)
				    ->where('detector_master.equipment_type_id', '=', $equipment_type_id)
				    ->where('detector_master.product_category_id', '=', $product_cat_id)
				    ->first(); 
			if(@$detectorData->detector_id){
				return $detectorData->detector_id;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
	
    /**
     * Get list of companies on page load.
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function getDetectorsList($equipment_type_id){
		
		global $models;
		
		$detector = DB::table('detector_master')
					->join('equipment_type','detector_master.equipment_type_id','equipment_type.equipment_id')
					->join('product_categories', 'product_categories.p_category_id', '=', 'detector_master.product_category_id')
					->join('users', 'detector_master.created_by','users.id')
					->select('detector_master.*','detector_master.created_at as detector_created_at','detector_master.updated_at as detector_updated_at','equipment_type.equipment_name','product_categories.p_category_name','users.name as createdBy');
					
		if(!empty($equipment_type_id)){
			$detector->where('detector_master.equipment_type_id','=',$equipment_type_id);	
		}		
		$detectors=$detector->where('detector_master.status','1')->get();	
		$models->formatTimeStampFromArray($detectors,DATETIMEFORMAT);
		
		return response()->json(['detectorsList' => $detectors]);
    }   

	/**
     * get detectors using multisearch.
     * Date : 19-04-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function getDetectorListMultiSearch(Request $request)
    { 
	    $newPostData=$request['data']['formData'];  		
		global $models;
		
		parse_str($newPostData,$searchArry);
		//print_r($searchArry);die;
		$detector = DB::table('detector_master')
					->join('equipment_type','detector_master.equipment_type_id','equipment_type.equipment_id')
					->join('product_categories', 'product_categories.p_category_id', '=', 'detector_master.product_category_id')
					->join('users', 'detector_master.created_by','users.id')
					->select('detector_master.*','detector_master.created_at as detector_created_at','detector_master.updated_at as detector_updated_at','equipment_type.equipment_name','product_categories.p_category_name','users.name as createdBy');
		
					if(!empty($searchArry['search_detector_code'])){
						$detector->where('detector_master.detector_code','like','%'.$searchArry['search_detector_code'].'%');
					}
					if(!empty($searchArry['search_detector_name'])){
						$detector->where('detector_master.detector_name','like','%'.$searchArry['search_detector_name'].'%');
					}
					if(!empty($searchArry['search_detector_desc'])){
						$detector->where('detector_master.detector_desc','like','%'.$searchArry['search_detector_desc'].'%');
					}
					if(!empty($searchArry['search_equipment_type_id'])){
						$detector->where('detector_master.equipment_type_id','=',$searchArry['search_equipment_type_id']);
					}
					if(!empty($searchArry['search_p_category_name'])){
						$detector->where('product_categories.p_category_name','like','%'.$searchArry['search_p_category_name'].'%');
					}
					if(!empty($searchArry['search_created_by'])){
						$detector->where('users.name','like','%'.$searchArry['search_created_by'].'%');
					}
					if(!empty($searchArry['search_status'])){
						$detector->where('detector_master.status',$searchArry['search_status']);
					}
					if(!empty($searchArry['search_created_at'])){
						$detector->where('detector_master.created_at','like','%'.$searchArry['search_created_at'].'%');
					}
					if(!empty($searchArry['search_updated_at'])){
						$detector->where('detector_master.updated_at','like','%'.$searchArry['search_updated_at'].'%');
					}
		$detectors=$detector->get();	
		$models->formatTimeStampFromArray($detectors,DATETIMEFORMAT);
		return response()->json(['detectorsList' => $detectors]);
    }	
    
    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function editDetectorData(Request $request){
		
		$returnData = array();
		
		if ($request->isMethod('post')) {
			if(!empty($request['data']['id'])){
				//get user by email id
				$data = DB::table('detector_master')
						->join('equipment_type','detector_master.equipment_type_id','equipment_type.equipment_id')
						->join('product_categories', 'product_categories.p_category_id', '=', 'detector_master.product_category_id')
						->where('detector_master.detector_id', '=', $request['data']['id'])
						->first();				
				if($data->detector_id){
					$returnData = array('responseData' => $data);				
				}else{
					$returnData = array('error' => config('messages.message.noRecordFound'));
				}
			}else{
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		}else{
				$returnData = array('error' => config('messages.message.provideAppData'));			
		}
		return response()->json($returnData);	
    }
    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function updateDetectorData(Request $request){
		
        $returnData = array();
		
		if ($request->isMethod('post') && !empty($request['data']['formData'])){
				
			//pasrse searlize data 
			$newPostData = array();
			parse_str($request['data']['formData'], $newPostData);
			
			if(empty($newPostData['detector_name'])){
				$returnData = array('error' => config('messages.message.detectorNameRequired'));
			}else if(empty($newPostData['detector_desc'])){
				$returnData = array('error' => config('messages.message.detectorDescRequired'));
			}else if(empty($newPostData['equipment_type_id'])){
				$returnData = array('error' => config('messages.message.equipmentNameRequired'));
			}else if(empty($newPostData['product_category_id'])){
				$returnData = array('error' => config('messages.message.productCategoryIdRequired'));
			}else{
				try {
					if(!empty($newPostData['detector_id'])){
						$updated = DB::table('detector_master')->where('detector_id',$newPostData['detector_id'])->update([
							'detector_desc' 			=> $newPostData['detector_desc'],
							'detector_name' 			=> $newPostData['detector_name'],
							'equipment_type_id' 	=> $newPostData['equipment_type_id'],
							'product_category_id' 	=> $newPostData['product_category_id'],
							'status' 				=> $newPostData['status'],

						]);
						if($updated){
							//check if data updated in Method table 
							$returnData = array('success' => config('messages.message.detectorUpdated'));		
						}else{
							$returnData = array('success' => config('messages.message.savedNoChange'));
						}
					}else{
						$returnData = array('error' =>  config('messages.message.dataNotFound'));
					}
				}catch(\Illuminate\Database\QueryException $ex){ 
				   $returnData = array('error' => config('messages.message.detectorNameExist'));
				}			 
			}

		}else{
			$returnData = array('error' => config('messages.message.dataNotFound'));
		} 
		return response()->json($returnData);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function deleteDetectorData(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')){
			if(!empty($request['data']['id'])){
				try { 
					$detector = DB::table('detector_master')->where('detector_id', $request['data']['id'])->delete();
					if($detector){
						$returnData = array('success' => config('messages.message.detectorDeleted'));
					}else{
						$returnData = array('error' => config('messages.message.detectorNotDeleted'));					
					}
				}catch(\Illuminate\Database\QueryException $ex){ 
				   $returnData = array('error' => config('messages.message.foreignKeyDeleteError'));
				}
			}else{
				$returnData = array('error' => config('messages.message.noRecordFound'));
			}
		}
		return response()->json($returnData);
    }
	
	/**
	* upload Method MASTER CSV data
	*
	* @param  int  $id
	* @return \Illuminate\Http\Response
	*/
    public function uploadDetectorsCSV(Request $request){
		global $models,$productCategory; 
		$prefix=!empty(config('messages.message.detectorPrefix'))?config('messages.message.detectorPrefix'):'D';
		
		$error 		= '0';
        $message 	= config('messages.message.error');
		$proData = array();
		$allowedFormat = array('application/vnd.ms-excel','application/csv','text/csv');
		$allowedFields = array('detector_name*','detector_desc','equipment_type_name*','product_section*');
		
		if(empty($_FILES['detectorsFile']['name'])){			 
			 $message = config('messages.message.fileNotSelected');	
		}else if(in_array($_FILES['detectorsFile']['type'],$allowedFormat) && $_FILES['detectorsFile']['size'] > '0'){
			$productTestData = $models->csvToArray($_FILES['detectorsFile']['tmp_name']);
			
			//check csv file valid or not
			foreach($allowedFields as $headerVal){
				if(!in_array($headerVal,$productTestData['header'])){
					$headerMsgArr[] = $headerVal;              //invalid columns array
				}
			}	
			
			if(!empty($headerMsgArr)){			
				$message = config('messages.message.invalidFileCoulmn');
			}else{ 
				if(!empty($productTestData['data'])){
					foreach($productTestData['data'] as $key=>$data){  						
						
						$proData[$key]['detector_name'] = !empty($data[0]) ? trim($data[0]) : ''; 
						$proData[$key]['detector_desc'] = !empty($data[1]) ? trim($data[1]) : $proData[$key]['detector_name'];
						$proData[$key]['equipment_type_id'] = !empty($data[2]) ? $models->getTableUniqueIdByName('equipment_type','equipment_name',trim($data[2]),'equipment_id') : '0';
					 	$proData[$key]['product_category_id'] = !empty($data[3]) ? $models->getTableUniqueIdByName('product_categories','p_category_name',trim($data[3]),'p_category_id') : '0';
					    $proData[$key]['created_by'] = \Auth::user()->id;
						
						//validations
						$rowNum = $key+2;
						if(empty($proData[$key]['detector_name']) || empty($proData[$key]['equipment_type_id']) || empty($proData[$key]['product_category_id'])){
							$messageArr[] = 'Error in row '.$rowNum;
						}
						if($productCategory->getCategoryLevel($proData[$key]['product_category_id']) != 0){
							$messageArr[] = 'Invalid product section at row '.$rowNum;
						}	
					} 
					if(!empty($messageArr)){
						$message = implode(',',$messageArr); 
					}else{
						
						if(!empty($proData)){				
							foreach($proData as $key=>$newPostData){
								$newPostData['detector_code'] = $models->generateCode($prefix,'detector_master','detector_code','detector_id'); 		    //autogenerate product code
								if(!empty($newPostData)){
										try{
											$insertedId = DB::table('detector_master')->insertGetId($newPostData);
											$error 		= '1';
											$message 	= config('messages.message.success');
										}catch(\Illuminate\Database\QueryException $ex){ 
											$returnData = config('messages.message.detectorExist');
										}
								}
							}					
							
						}else{			
							$message 	= config('messages.message.noRecordFound');
						}
					}
				}else{					
					$message 	= config('messages.message.provideAppData');
				}
			}
		}else{
			$message = config('messages.message.invalidFileType');
		}
        
		return response()->json(array('error' => $error, 'message' => $message));		
    }
}
