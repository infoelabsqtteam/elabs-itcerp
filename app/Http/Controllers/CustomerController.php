<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models;
use App\Http\Requests;
use Auth;
use App\User;
use App\Module;
use App\Customer;
use App\Order;
use Validator;
use DB;
use Route;

class CustomerController extends Controller
{
	/**
	 * protected Variable.
	 */
	protected $auth;
	/**
	 * Create a new controller instance.
	 *
	 * @return void
	 */
	public function __construct()
	{

		global $models, $customer, $module, $order;

		$models   = new Models();
		$customer = new Customer();
		$module   = new Module();
		$order 	  = new Order();

		//Checking Session
		$this->middleware('auth');

		$this->middleware(function ($request, $next) {
			$this->session = Auth::user();
			parent::__construct($this->session);
			//Checking current request is allowed or not
			$allowedAction = array('index', 'navigation');
			$actionData    = explode('@', Route::currentRouteAction());
			$action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])) : '0';
			if (defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action, $allowedAction)) {
				return redirect('dashboard')->withErrors('Permission Denied!');
			}
			return $next($request);
		});
	}

	/**
	 * Display a listing of the resource.
	 *
	 * @return \Illuminate\Http\Response
	 */
	public function index()
	{

		global $models, $customer;

		$user_id            = defined('USERID') ? USERID : '0';
		$division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';
		$equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';

		return view('master.customer_master.customers.index', ['title' => 'Customers', '_customers' => 'active', 'user_id' => $user_id, 'division_id' => $division_id, 'equipment_type_ids' => $equipment_type_ids]);
	}

	//autogenerate code
	public function getAutoGeneratedCode(Request $request)
	{
		global $models, $customer;

		$prefix = !empty(config('messages.message.customerPrefix')) ? config('messages.message.customerPrefix') : 'CUST';
		$code   = $models->generateCode($prefix, 'customer_master', 'customer_code', 'customer_id');

		return response()->json(['uniqueCode' => $code]);
	}

	/**
	 * Get list of customers on page load.
	 * Date : 01-03-17
	 * Author : nisha
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function getCustomerList(Request $request)
	{

		global $models;

		$searchArry = !empty($request['data']['formData']) ? $request['data']['formData'] : array();
		$limitFrom  = isset($searchArry['limitFrom']) ? $searchArry['limitFrom'] : '0';
		$limitTo    = isset($searchArry['limitTo']) ? $searchArry['limitTo'] : TOTAL_RECORD;

		$customerObj = DB::table('customer_master')
			->leftJoin('order_sample_priority', 'order_sample_priority.sample_priority_id', '=', 'customer_master.customer_priority_id')
			->join('customer_invoicing_types', 'customer_invoicing_types.invoicing_type_id', '=', 'customer_master.invoicing_type_id')
			->join('city_db', 'city_db.city_id', '=', 'customer_master.customer_city')
			->join('state_db', 'state_db.state_id', '=', 'customer_master.customer_state')
			->join('customer_billing_types', 'customer_master.billing_type', '=', 'customer_billing_types.billing_type_id')
			->join('users', 'customer_master.sale_executive', '=', 'users.id')
			->join('users as u', 'customer_master.created_by', '=', 'u.id')
			->select('users.*', 'order_sample_priority.sample_priority_name as customerPriorityType', 'customer_billing_types.billing_type as billingType', 'customer_master.*', 'customer_master.created_at as customer_created_at', 'customer_master.updated_at as customer_updated_at', 'state_db.*', 'city_db.*', 'u.name as createdBy', 'customer_invoicing_types.invoicing_type');

		//Appling Multisearch
		$this->getCustomerListMultisearch($searchArry, $customerObj);
		
		//Search Customer Data
		$customers = $customerObj->orderBy('customer_id', 'ASC')->skip($limitFrom)->take($limitTo)->get()->toArray();

		//Format the date time
		$models->formatTimeStampFromArray($customers, DATETIMEFORMAT);

		//echo '<pre>';print_r($customers);die;
		return response()->json(['customersList' => $customers,]);
	}

	/**
	 * get customers using multisearch.
	 * Date : 21-04-17
	 * Author : nisha
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function getCustomerListMultisearch($searchArry, $customerObj)
	{

		global $models;

		if (!empty($searchArry['search_keyword'])) {
			$customerObj->where('customer_master.customer_code', 'LIKE', trim($searchArry['search_keyword']));
		}
		if (!empty($searchArry['search_customer_code'])) {
			$customerObj->where('customer_master.customer_code', 'LIKE', '%' . trim($searchArry['search_customer_code']) . '%');
		}
		if (!empty($searchArry['search_logic_customer_code'])) {
			$customerObj->where('customer_master.logic_customer_code', 'LIKE', '%' . trim($searchArry['search_logic_customer_code']) . '%');
		}
		if (!empty($searchArry['search_customer_name'])) {
			$customerObj->where('customer_master.customer_name', 'LIKE', '%' . trim($searchArry['search_customer_name']) . '%');
		}
		if (!empty($searchArry['search_customer_city'])) {
			$customerObj->where('city_db.city_name', 'LIKE', '%' . trim($searchArry['search_customer_city']) . '%');
		}
		if (!empty($searchArry['search_customer_address'])) {
			$customerObj->where('customer_master.customer_address', 'LIKE', '%' . trim($searchArry['search_customer_address']) . '%');
		}
		if (!empty($searchArry['search_customer_email'])) {
			$customerObj->where('customer_master.customer_email', 'LIKE', '%' . trim($searchArry['search_customer_email']) . '%');
		}
		if (!empty($searchArry['search_billing_type'])) {
			$customerObj->where('customer_billing_types.billing_type', 'LIKE', '%' . trim($searchArry['search_billing_type']) . '%');
		}
		if (!empty($searchArry['search_invoicing_type'])) {
			$customerObj->where('customer_invoicing_types.invoicing_type', 'LIKE', '%' . trim($searchArry['search_invoicing_type']) . '%');
		}
		if (!empty($searchArry['search_created_by'])) {
			$customerObj->where('u.name', 'LIKE', '%' . trim($searchArry['search_created_by']) . '%');
		}
		if (!empty($searchArry['search_created_at'])) {
			$customerObj->where('customer_master.created_at', 'LIKE', '%' . trim($searchArry['search_created_at']) . '%');
		}
		if (!empty($searchArry['search_updated_at'])) {
			$customerObj->where('customer_master.updated_at', 'LIKE', '%' . trim($searchArry['search_updated_at']) . '%');
		}
	}

	/*************************************************************
	 * create new customer
	 * Praveen Singh
	 * Show the form for creating a new resource.
	 * @return \Illuminate\Http\Response
	 ************************************************************/
	public function createCustomer(Request $request)
	{

		global $models, $customer;

		$returnData = $formData = $newPostData = array();

		try {
			$acceptedGstCode = defined('OPTIONAL_ACCEPTED_GST_STRINGS') ? explode(',', OPTIONAL_ACCEPTED_GST_STRINGS) : array();
			if ($request->isMethod('post') && !empty($request['data']['formData'])) {

				//parse searlize data
				parse_str($request['data']['formData'], $newPostData);

				if (empty($newPostData['customer_code'])) {
					$returnData = array('error' => config('messages.message.customerCodeRequired'));
				} else if (!empty($newPostData['customer_code']) && !$customer->isCustomerCodeExist($newPostData['customer_code'])) {
					$returnData = array('error' => config('messages.message.customerCodeExist'));
				} else if (empty($newPostData['customer_name'])) {
					$returnData = array('error' => config('messages.message.customerNameRequired'));
				} else if (empty($newPostData['customer_email'])) {
					$returnData = array('error' => config('messages.message.customerEmail1Required'));
				} else if (!empty($newPostData['customer_email']) && !$customer->isCustomerEmailExist($newPostData['customer_email'])) {
					$returnData = array('error' => config('messages.message.customerEmailExist'));
				} else if (empty($newPostData['customer_mobile']) && empty($newPostData['customer_phone'])) {
					$returnData = array('error' => config('messages.message.customerMobileRequired'));
				} else if (!empty($newPostData['customer_mobile']) && !$customer->validateMobileNumber($newPostData['customer_mobile'])) {
					$returnData = array('error' => config('messages.message.validCustomerMobile'));
				} else if (!empty($newPostData['customer_phone']) && !$customer->validatePhoneNumber($newPostData['customer_phone'])) {
					$returnData = array('error' => config('messages.message.validCustomerPhone'));
				} else if (empty($newPostData['customer_address'])) {
					$returnData = array('error' => config('messages.message.customerAddressRequired'));
				} else if (empty($newPostData['customer_pincode'])) {
					$returnData = array('error' => config('messages.message.customerPincodeRequired'));
				} else if (empty($newPostData['customer_country'])) {
					$returnData = array('error' => config('messages.message.customerCountryRequired'));
				} else if (empty($newPostData['customer_state'])) {
					$returnData = array('error' => config('messages.message.customerStateRequired'));
				} else if (empty($newPostData['customer_city'])) {
					$returnData = array('error' => config('messages.message.customerCityRequired'));
				} else if (empty($newPostData['customer_type'])) {
					$returnData = array('error' => config('messages.message.customerTypeRequired'));
				} else if (empty($newPostData['billing_type'])) {
					$returnData = array('error' => config('messages.message.billingTypeRequired'));
				} else if (empty($newPostData['invoicing_type_id'])) {
					$returnData = array('error' => config('messages.message.invoicingTypeRequired'));
				} else if (empty($newPostData['division_id'])) {
					$returnData = array('error' => config('messages.message.divisionRequired'));
				} else if (empty($newPostData['sale_executive'])) {
					$returnData = array('error' => config('messages.message.saleExecutiveRequired'));
				} else if (empty($newPostData['discount_type'])) {
					$returnData = array('error' => config('messages.message.discountTypeRequired'));
				} else if (empty($newPostData['contact_name1'])) {
					$returnData = array('error' => config('messages.message.contactNameRequired'));
				} else if (!isset($newPostData['disable_contact_mobile1']) && empty($newPostData['contact_mobile1'])) {
					$returnData = array('error' => config('messages.message.contactMobile1Required'));
				} else if (empty($newPostData['customer_gst_category_id'])) {
					$returnData = array('error' => config('messages.message.customerGstCategoryRequiredError'));
				} else if (empty($newPostData['customer_gst_type_id'])) {
					$returnData = array('error' => config('messages.message.customerGstTypeRequiredError'));
				} else if (empty($newPostData['customer_gst_no'])) {
					$returnData = array('error' => config('messages.message.customerGstNoRequired'));
				} else if (!empty($customer->gstNumberValidation($newPostData['customer_gst_type_id'], $newPostData['customer_gst_no'], $newPostData['customer_state']))) {
					$returnData = array('error' => $customer->gstNumberValidation($newPostData['customer_gst_type_id'], $newPostData['customer_gst_no'], $newPostData['customer_state']));
				} else if (empty($newPostData['customer_gst_tax_slab_type_id'])) {
					$returnData = array('error' => config('messages.message.customerGstTaxSlabTypeRequiredError'));
				} else {

					//Starting transaction
					DB::beginTransaction();

					// check if customer already exist or not
					$contactData['contact_designate1'] 	= $newPostData['contact_designate1'];
					$contactData['contact_name1'] 	= $newPostData['contact_name1'];
					$contactData['contact_mobile1'] 	= $newPostData['contact_mobile1'];
					$contactData['contact_email1'] 	= $newPostData['contact_email1'];
					$contactData['contact_designate2'] 	= $newPostData['contact_designate2'];
					$contactData['contact_name2'] 	= $newPostData['contact_name2'];
					$contactData['contact_mobile2'] 	= $newPostData['contact_mobile2'];
					$contactData['contact_email2'] 	= $newPostData['contact_email2'];

					//Unsetting the variable from request data
					$allow 			= !empty($request['data']['allowGst']) ? $request['data']['allowGst'] : '';
					$formData			= array_filter($models->unsetFormDataVariables($newPostData, array('_token', 'division_id', 'contact_designate1', 'contact_name1', 'contact_mobile1', 'contact_email1', 'contact_designate2', 'contact_name2', 'contact_mobile2', 'contact_email2', 'state_code', 'disable_contact_mobile1')));
					$formData['created_by'] 	= USERID;
					$gstNo 			= !empty($formData['customer_gst_no']) ? $formData['customer_gst_no'] : Null;
					$customerGst 		= $customer->getCustomerData($gstNo);

					if (empty($allow) && $customerGst['customerGstCount'] >= '1') {
						$returnData = array('customerGstCount' => $customerGst['customerGstCount']);
					} else {
						$customerId = DB::table('customer_master')->insertGetId($formData);
						if ($customerId) {

							//Saving Customer email as Primary Email
							$customer->savePrimaryEmailDetail($customerId, $formData['customer_email']);
							$contactData['customer_id'] = $customerId;

							//if new customer booked from sample and is not aviable in master customer table
							$this->UpdateNewCustomerInSample($contactData['customer_id'], $newPostData['customer_email']);

							//Saving Customer Contact Person Detail
							$contact_persons = DB::table('customer_contact_persons')->insertGetId($contactData);
							if ($contact_persons) {

								//msg
								$returnData = array('success' => config('messages.message.customerSaved'), 'saveGst' => 'yes');

								//Committing the queries
								DB::commit();
							} else {
								$returnData = array('success' => config('messages.message.contactPersonNotSaved'));
							}
						} else {
							$returnData = array('error' => config('messages.message.customerNotSaved'));
						}
					}
				}
			}
		} catch (\Illuminate\Database\QueryException $ex) {
			DB::rollback();
			$returnData = array('error' => config('messages.message.customerNotSaved'));
		} catch (\Throwable $e) {
			DB::rollback();
			$returnData = array('error' => config('messages.message.customerNotSaved'));
		}

		return response()->json($returnData);
	}

	/*********************************************************
	 * update newly created customer in samples table
	 * Date : 11-07-17
	 * Author :
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 *********************************************************/

	public function UpdateNewCustomerInSample($customerId, $customerMail)
	{
		if (!empty($customerMail)) {
			$sampleCustomer =  DB::table('samples')->whereNull('customer_id')->where('customer_email', '=', $customerMail)->first();
			if (!empty($sampleCustomer)) {
				DB::table('samples')->where('customer_email', '=', $customerMail)->update(['customer_id' => $customerId, 'sample_status' => '0']);
			}
		}
	}

	/**
	 * isCustomerExist Is used to check the customer duplicate entry by customer_code
	 * Date : 01-03-17
	 * Author : nisha
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function isCustomerExist($customer_code, $customer_email, $mobile)
	{
		if (!empty($customer_code)) {
			$customerData = DB::table('customer_master')->where('customer_master.customer_code', '=', $customer_code)->where('customer_master.customer_email', '=', $customer_email)->first();
			if (!empty($customerData->customer_id)) {
				return $customerData->customer_id;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	function getUserId($email)
	{
		if (!empty($email)) {
			$user = DB::table('users')->where('users.email', '=', $email)->where('users.is_sales_person', '=', '1')->select('users.id')->first();
			if (!empty($user->id)) {
				return $user->id;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	/**
	 * Show the form for editing the specified resource.
	 *
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function editCustomerData(Request $request)
	{

		$returnData = array();

		$cityData = DB::table('city_db')->select('city_id as id', 'city_name as name')->get();
		$isAdmin = defined('IS_ADMIN') ? '1' : '0';
		if ($request->isMethod('post') && !empty($request['data']['id'])) {

			$customerData = DB::table('customer_master')
				->leftJoin('order_sample_priority', 'order_sample_priority.sample_priority_id', '=', 'customer_master.customer_priority_id')
				->join('customer_invoicing_types', 'customer_invoicing_types.invoicing_type_id', '=', 'customer_master.invoicing_type_id')
				->Join('countries_db', 'countries_db.country_id', '=', 'customer_master.customer_country')
				->join('state_db', 'state_db.state_id', '=', 'customer_master.customer_state')
				->join('city_db', 'city_db.city_id', '=', 'customer_master.customer_city')
				->join('users', 'users.id', '=', 'customer_master.sale_executive')
				->join('customer_discount_types', 'customer_master.discount_type', '=', 'customer_discount_types.discount_type_id')
				->join('customer_types', 'customer_master.customer_type', '=', 'customer_types.type_id')
				->leftJoin('customer_company_type', 'customer_master.company_type', '=', 'customer_company_type.company_type_id')
				->leftJoin('customer_ownership_type', 'customer_master.ownership_type', '=', 'customer_ownership_type.ownership_id')
				->join('customer_contact_persons', 'customer_master.customer_id', '=', 'customer_contact_persons.customer_id')
				->select('order_sample_priority.sample_priority_id', 'order_sample_priority.sample_priority_name', 'customer_master.*', 'countries_db.country_name', 'state_db.*', 'users.*', 'city_db.*', 'customer_company_type.*', 'customer_ownership_type.*', 'customer_discount_types.discount_type_id', 'customer_discount_types.discount_type', 'customer_contact_persons.*', 'customer_types.type_id', 'customer_types.customer_type', 'customer_invoicing_types.invoicing_type')
				->where('customer_master.customer_id', '=', $request['data']['id'])
				->first();

			if (!empty($customerData->customer_id)) {
				$returnData = array('responseData' => $customerData);
			} else {
				$returnData = array('error' => config('messages.message.noRecordFound'));
			}
		} else {
			$returnData = array('error' => config('messages.message.provideAppData'));
		}
		return response()->json(['returnData' => $returnData, 'cityData' => $cityData, 'isAdmin' => $isAdmin]);
	}

	/**
	 * Update the specified resource in storage.
	 *
	 * @param  \Illuminate\Http\Request  $request
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function updateCustomerData(Request $request)
	{

		global $models, $customer;

		$returnData      = $newPostData = array();
		$acceptedGstCode = defined('OPTIONAL_ACCEPTED_GST_STRINGS') ? explode(',', OPTIONAL_ACCEPTED_GST_STRINGS) : array();

		try {
			if ($request->isMethod('post') && !empty($request['data']['formData'])) {

				//pasrse searlize data
				parse_str($request['data']['formData'], $newPostData);

				$allow = !empty($request['data']['allowGst']) ? $request['data']['allowGst'] : '';
				$customerId = !empty($newPostData['customer_id']) ? base64_decode($newPostData['customer_id']) : '0';

				if (empty($newPostData['logic_customer_code'])) {
					$returnData = array('error' => config('messages.message.customerLogicCodeRequired'));
				} else if (!$customer->isLogicCustomerCodeExist($newPostData['logic_customer_code'], $customerId)) {
					$returnData = array('error' => config('messages.message.customerLogicCodeExist'));
				} else if (empty($newPostData['customer_name'])) {
					$returnData = array('error' => config('messages.message.customerNameRequired'));
				} else if (!empty($newPostData['customer_email']) && !$customer->isCustomerEmailExist($newPostData['customer_email'], $customerId)) {
					$returnData = array('error' => config('messages.message.customerEmailExist'));
				} else if (empty($newPostData['customer_mobile']) && empty($newPostData['customer_phone'])) {
					$returnData = array('error' => config('messages.message.customerMobileRequired'));
				} else if (!empty($newPostData['customer_mobile']) && !$customer->validateMobileNumber($newPostData['customer_mobile'], $customerId)) {
					$returnData = array('error' => config('messages.message.validCustomerMobile'));
				} else if (!empty($newPostData['customer_phone']) && !$customer->validatePhoneNumber($newPostData['customer_phone'], $customerId)) {
					$returnData = array('error' => config('messages.message.validCustomerPhone'));
				} else if (empty($newPostData['customer_address'])) {
					$returnData = array('error' => config('messages.message.customerAddressRequired'));
				} else if (empty($newPostData['customer_pincode'])) {
					$returnData = array('error' => config('messages.message.customerPincodeRequired'));
				} else if (empty($newPostData['customer_country'])) {
					$returnData = array('error' => config('messages.message.customerCountryRequired'));
				} else if (empty($newPostData['customer_state'])) {
					$returnData = array('error' => config('messages.message.customerStateRequired'));
				} else if (empty($newPostData['customer_city'])) {
					$returnData = array('error' => config('messages.message.customerCityRequired'));
				} else if (empty($newPostData['customer_type'])) {
					$returnData = array('error' => config('messages.message.customerTypeRequired'));
				} else if (empty($newPostData['billing_type'])) {
					$returnData = array('error' => config('messages.message.billingTypeRequired'));
				} else if (empty($newPostData['invoicing_type_id'])) {
					$returnData = array('error' => config('messages.message.invoicingTypeRequired'));
				} else if (empty($newPostData['sale_executive'])) {
					$returnData = array('error' => config('messages.message.saleExecutiveRequired'));
				} else if (empty($newPostData['discount_type'])) {
					$returnData = array('error' => config('messages.message.discountTypeRequired'));
				} else if (empty($newPostData['contact_name1'])) {
					$returnData = array('error' => config('messages.message.contactNameRequired'));
				} else if (!isset($newPostData['disable_contact_mobile1']) && empty($newPostData['contact_mobile1'])) {
					$returnData = array('error' => config('messages.message.contactMobile1Required'));
				} else if (empty($newPostData['customer_gst_category_id'])) {
					$returnData = array('error' => config('messages.message.customerGstCategoryRequiredError'));
				} else if (empty($newPostData['customer_gst_type_id'])) {
					$returnData = array('error' => config('messages.message.customerGstTypeRequiredError'));
				} else if (empty($newPostData['customer_gst_no'])) {
					$returnData = array('error' => config('messages.message.customerGstNoRequired'));
				} else if (empty($newPostData['customer_gst_no'])) {
					$returnData = array('error' => config('messages.message.customerGstNoRequired'));
				} else if (!empty($customer->gstNumberValidation($newPostData['customer_gst_type_id'], $newPostData['customer_gst_no'], $newPostData['customer_state']))) {
					$gstValidation = $customer->gstNumberValidation($newPostData['customer_gst_type_id'], $newPostData['customer_gst_no'], $newPostData['customer_state']);
					$returnData = array('error' => $gstValidation);
				} else if (empty($newPostData['customer_gst_tax_slab_type_id'])) {
					$returnData = array('error' => config('messages.message.customerGstTaxSlabTypeRequiredError'));
				} else {

					//Starting transaction
					DB::beginTransaction();

					//Filtering Customer Information
					$newPostData['logic_customer_code'] = ucwords(strtolower($newPostData['logic_customer_code']));

					//Filtering Contact Person Information
					$contactData['contact_designate1'] 	= $newPostData['contact_designate1'];
					$contactData['contact_name1'] 	= $newPostData['contact_name1'];
					$contactData['contact_mobile1'] 	= $newPostData['contact_mobile1'];
					$contactData['contact_email1'] 	= $newPostData['contact_email1'];
					$contactData['contact_designate2'] 	= $newPostData['contact_designate2'];
					$contactData['contact_name2'] 	= $newPostData['contact_name2'];
					$contactData['contact_mobile2'] 	= $newPostData['contact_mobile2'];
					$contactData['contact_email2'] 	= $newPostData['contact_email2'];
					$contactData['contact_id'] 		= $newPostData['contact_id'];

					if (!empty($customerId)) {

						$newPostData 	  = $models->unsetFormDataVariables($newPostData, array('_token', 'division_id', 'contact_designate1', 'contact_name1', 'contact_mobile1', 'contact_email1', 'contact_designate2', 'contact_name2', 'contact_mobile2', 'contact_email2', 'state_code', 'contact_id', 'customer_id', 'disable_contact_mobile1'));
						$gstNo 		  = !empty($newPostData['customer_gst_no']) ? $newPostData['customer_gst_no'] : Null;
						$customerDetail   = $customer->getCustomerData($gstNo, $customerId);
						$customerGstChnge = !empty($customerDetail['customerGst']->customer_gst_no) && ($customerDetail['customerGst']->customer_gst_no == $newPostData['customer_gst_no']) ?  false : true;

						if ($customerGstChnge && empty($allow) && ($customerDetail['customerGstCount'] >= 1)) {
							$returnData = array('customerGstCount' => $customerDetail['customerGstCount']);
						} else {

							//Updating Customer Primary Mail Id
							$customer->UpdatePrimaryEmailDetail($customerId, $newPostData['customer_email']);

							//Updating Customer Master Table
							DB::table('customer_master')->where('customer_master.customer_id', $customerId)->update($newPostData);

							//Updating Contact person Table
							DB::table('customer_contact_persons')->where('customer_contact_persons.contact_id', $contactData['contact_id'])->update($contactData);

							$returnData = array('success' => config('messages.message.customerUpdated'), 'updateGst' => 'yes');

							//Committing the queries
							DB::commit();
						}
					} else {
						$returnData = array('error' => config('messages.message.updatedError'));
					}
				}
			} else {
				$returnData = array('error' => config('messages.message.dataNotFound'));
			}
		} catch (\Illuminate\Database\QueryException $ex) {
			DB::rollback();
			$returnData = array('error' => config('messages.message.updatedError'));
		} catch (\Throwable $e) {
			DB::rollback();
			$returnData = array('error' => config('messages.message.updatedError'));
		}
		return response()->json($returnData);
	}

	/**
	 * Remove the specified resource from storage.
	 *
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function deleteCustomerData(Request $request)
	{

		$returnData = array();

		if ($request->isMethod('post')) {
			if (!empty($request['data']['id'])) {
				try {
					$customer = DB::table('customer_master')->where('customer_id', $request['data']['id'])->delete();
					if ($customer) {
						$returnData = array('success' => config('messages.message.customerDeleted'));
					} else {
						$returnData = array('error' => config('messages.message.customerNotDeleted'));
					}
				} catch (\Illuminate\Database\QueryException $ex) {
					$returnData = array('error' => "Cannot delete or update a parent row: a foreign key constraint fails!");
				}
			} else {
				$returnData = array('error' => config('messages.message.noRecordFound'));
			}
		}
		return response()->json($returnData);
	}
	/**
	 * Get list of customers uploaded by csv
	 * Date : 04-04-17
	 * Author : nisha
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function uploadCustomer(Request $request)
	{
		return view('master.customer_master.customers.upload_customers');
	}

	/**
	 * Get list of customers uploaded by csv
	 * Date : 04-04-17
	 * Author : nisha
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function uploadCustomerPreview(Request $request)
	{

		global $models;

		$allowedFormat = array('application/vnd.ms-excel', 'application/csv', 'text/csv');
		if (empty($_FILES['customer']['name'])) {
			$returnData = array('error' => config('messages.message.fileNotSelected'));
		} else if (in_array($_FILES['customer']['type'], $allowedFormat) && $_FILES['customer']['size'] > '0') {
			$header = $models->csvToArray($_FILES['customer']['tmp_name']);
			//check all required fields are filled or not
			if (in_array('customer_code', $header['header'])) {
				foreach ($header['data'] as $key => $data) {
					$csvData = $data;
					unset($csvData[11]);
					if (count(array_filter($csvData)) != count($csvData)) {
						$checkEmpty[$key] = 'Error';
					}
				}
				if (!empty($checkEmpty) > 0) {
					$returnData = array('error' => config('messages.message.allFieldsRequired'));
				} else {
					$csvCodeArray = array();
					$csvEmailArray = array();
					$csvMobileArray = array();
					$finalDataForDisplay = array();
					$finalDataForSubmit = array();
					$message = count($header['newheader']);
					$header['newheader'][$message] = 'Message';
					$recExist = array();
					foreach ($header['data'] as $key => $data) {
						$customerExist = $this->isCustomerExist($data[0], $data[2], $data[3]);
						$dataDisplay = $data;
						if ($customerExist == 0) {
							if (in_array($data[0], $csvCodeArray) || in_array($data[2], $csvEmailArray) || in_array($data[3], $csvMobileArray)) {
								$dataDisplay[$message] = "Duplicate customer code, email or phone number!";
							} else {
								$csvCodeArray[] = $data[0];
								$csvEmailArray[] = $data[2];
								$csvMobileArray[] = $data[3];
								$recExist['state_code'] = $this->isCustomerStateExist($data[5]);
								$recExist['city_code'] = $this->isCustomerCityExist($data[6], $data[5]);
								$recExist['customer_type'] = $this->isCustomerTypeExist($data[7]);
								$recExist['billing_type'] = $this->isBillingTypeExist($data[8]);
								$recExist['discount_type'] = $this->isDiscountTypeExist($data[10]);
								$recExist['sales_executive_email'] = $this->getUserId($data[9]);
								$msgSuccess = array();
								$msgError = array();
								foreach ($recExist as $recExistkey => $val) {
									if (!empty($val)) {
										if ($recExistkey == 'discount_type') {
											if (str_replace(' ', '', strtolower($val)) != 3 && empty($data[11])) {
												$msgError[] = "Discount value required";
											} else {
												$msgSuccess[] = "Success";
											}
										} else {
											$msgSuccess[] = "Success";
										}
									} else {
										$msgError[] = "Invalid " . ucfirst(str_replace('_', ' ', $recExistkey));
									}
								}
								if (!empty($msgError)) {
									$dataDisplay[$message] = implode(',', $msgError);
								} else {
									$data[5] = $recExist['state_code'];
									$data[6] = $recExist['city_code'];
									$data[7] = $recExist['customer_type'];
									$data[10] = $recExist['discount_type'];
									$data[9] = $recExist['sales_executive_email'];
									$dataSubmit = $data;
									$dataDisplay[$message] = 'Success';
								}
							}
						} else {
							$dataDisplay[$message] = config('messages.message.exist');
						}
						$headerColumns = $models->shiftArray($header['newheader']);
						$dataColumns = $models->shiftArray($dataDisplay);
						if (!empty($dataColumns)) {
							$finalDataForDisplay[$key] = array_combine($header['newheader'], $dataColumns);
						}
						if (!empty($dataSubmit)) {
							$finalDataForSubmit[$key] = array_combine($header['header'], $dataSubmit);
						}
					}
					if (!empty($finalDataForDisplay)) {
						$returnData = array('success' => "Please check the list below");
						$returnData['newheader'] = $headerColumns;
						$returnData['dataDisplay'] = $finalDataForDisplay;
						$returnData['dataSubmit'] = $finalDataForSubmit;
						$returnData['numberOfSubmitedRecords'] = $csvCodeArray;
					} else {
						$returnData = array('error' => "Some error");
					}
				}
			} else {
				$returnData = array('error' => config('messages.message.customerDetails'));
			}
		} else {
			$returnData = array('error' => config('messages.message.invalidFileType'));
		}
		return response()->json(['returnData' => $returnData]);
	}

	/**
	 * Get customer state and check if customer state exist or not
	 * Date : 17-04-17
	 * Author : nisha
	 */
	public function isCustomerStateExist($customer_state)
	{
		if (!empty($customer_state)) {
			$customerData = DB::table('state_db')
				->where('state_db.state_code', '=', $customer_state)
				->first();
			if (@$customerData->state_id) {
				return $customerData->state_id;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	/**
	 * Get customer city and check if customer city exist or not
	 * Date : 17-04-17
	 * Author : nisha
	 */
	public function isCustomerCityExist($customer_city, $state_code)
	{
		if (!empty($customer_city)) {
			$customerData = DB::table('city_db')
				->join('state_db', 'city_db.state_id', 'state_db.state_id')
				->where('city_db.city_code', '=', $customer_city)
				->where('state_db.state_code', '=', $state_code)
				->select('city_db.city_id')
				->first();
			if (@$customerData->city_id) {
				return $customerData->city_id;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	/**
	 * Get customer type and check if customer type exist or not
	 * Date : 17-04-17
	 * Author : nisha
	 */
	public function isCustomerTypeExist($customer_type)
	{
		if (!empty($customer_type)) {
			$customer_type = str_replace(' ', '', strtolower($customer_type));
			$customerData = DB::table('customer_types')
				->where('customer_types.customer_type_code', '=', strtolower($customer_type))
				->first();
			if (@$customerData->type_id) {
				return $customerData->type_id;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	/**
	 * Get billing_type and check if billing_type exist or not
	 * Date : 17-04-17
	 * Author : nisha
	 */
	public function isBillingTypeExist($billing_type)
	{
		if (!empty($billing_type)) {
			$billing_type = str_replace(' ', '', strtolower($billing_type));
			$customerData = DB::table('customer_billing_types')
				->where('customer_billing_types.billing_type_code', '=', $billing_type)
				->first();
			if (@$customerData->billing_type_id) {
				return $customerData->billing_type_id;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	/**
	 * Get discount_type id and check if discount_type exist or not
	 * Date : 17-04-17
	 * Author : nisha
	 */
	public function isDiscountTypeExist($discount_type)
	{
		if (!empty($discount_type)) {
			$discount_type = str_replace(' ', '', strtolower($discount_type));
			$customerData = DB::table('customer_discount_types')
				->where('customer_discount_types.discount_type_code', '=', $discount_type)
				->first();
			if (@$customerData->discount_type_id) {
				return $customerData->discount_type_id;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	/**
	 * save list of customers uploaded by csv
	 * Date : 05-04-17
	 * Author : nisha
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function saveUploadedCustomer(Request $request)
	{
		$returnData = array();
		if ($request->isMethod('post')) {
			if (!empty($request['data']['formData'])) {
				//pasrse searlize data
				$uploaded = array();
				$notUploaded = array();
				$duplicate = array();
				$loggedInUser = \Auth::user()->id;
				$newPostArray = $request['data']['formData'];
				foreach ($newPostArray as $key => $newPostData) {
					$contactData['contact_name1'] 	= $newPostData['contact_name1'];
					$contactData['contact_email1'] 	= $newPostData['contact_email1'];
					unset($newPostData['contact_name1']);
					unset($newPostData['contact_email1']);
					if ($this->isCustomerExist($newPostData['customer_code'], $newPostData['customer_email'], $newPostData['customer_mobile']) == 0) {
						$formData = array_filter($newPostData);
						$formData['created_by'] = $loggedInUser;
						$created = DB::table('customer_master')->insertGetId($formData);
						if (!empty($created)) {
							$contactData['customer_id'] = $created;
							$contact_persons = DB::table('customer_contact_persons')->insertGetId($contactData);
							$uploaded[] = $newPostData['customer_code'];
						} else {
							$notUploaded[] = $newPostData['customer_code'];
						}
					} else {
						$duplicate[] = $newPostData['customer_code'];
					}
				}
				$returnData['success'] = config('messages.message.save');
				if (!empty($uploaded)) {
					$returnData['upload']['uploaded'] = "These customer(s) having codes " . implode(', ', $uploaded) . " has been saved successfully.";
				}
				if (!empty($notUploaded)) {
					$returnData['upload']['notUploaded'] = "Error in saving these customer codes: " . implode(', ', $notUploaded);
				}
				if (!empty($duplicate)) {
					$returnData['upload']['duplicate'] = "These customer(s)  having codes " . implode(', ', $duplicate) . " already exist in our record!";
				}
			} else {
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
			return response()->json(['returnData' => $returnData]);
		}
	}

	/**
	 * GET CUSTOMER ALL EMAILS
	 * Date : 09-01-2018
	 *
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function getCustomerEmailAddresses($customer_id)
	{
		$getCustomerData = DB::table('customer_master')->where('customer_master.customer_id', '=', $customer_id)->select('customer_master.customer_name')->first();
		$getEmails = DB::table('customer_email_addresses')->leftJoin('customer_master', 'customer_master.customer_id', '=', 'customer_email_addresses.customer_id')->where('customer_email_addresses.customer_id', '=', $customer_id)->select('customer_email_addresses.*')->get();
		return response()->json(['returnData' => $getEmails, 'getCustomerData' => $getCustomerData]);
	}

	/**
	 * SAVE CUSTOMER MULTIPLE EMAILS
	 * Date : 09-01-2018
	 *
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function saveEmailAddresses(Request $request)
	{

		global $models, $customer;

		$returnData = $newPostData = array();

		if ($request->isMethod('post') && !empty($request['data']['formData'])) {

			//parse searlize data
			parse_str($request['data']['formData'], $newPostData);

			if (empty($newPostData['customer_email'])) {
				$returnData = array('error' => config('messages.message.customerEmail1Required'));
			} else if (empty($newPostData['customer_email_type'])) {
				$returnData = array('error' => config('messages.message.customerEmailType'));
			} else if (!empty($customer->validateCustomerEmailTypes($newPostData['customer_id'], $newPostData['customer_email_type']))) {
				$returnData = array('error' => config('messages.message.CustomerPrimaryMailError'));
			} else if (empty($newPostData['customer_email_status'])) {
				$returnData = array('error' => config('messages.message.customerEmailStatus'));
			} else if (!empty($newPostData['customer_email']) && !$customer->validateCustomerEmailAddresses($newPostData['customer_email'], $newPostData['customer_id'])) {
				$returnData = array('error' => config('messages.message.customerEmailExist'));
			} else {

				//Unsetting the variable from request data
				$newPostData = $models->unsetFormDataVariables($newPostData, array('_token', 'division_id'));

				try {
					if (DB::table('customer_email_addresses')->insertGetId($newPostData)) {
						$returnData = array('success' => config('messages.message.customerEmailSaved'));
					} else {
						$returnData = array('success' => config('messages.message.savedError'));
					}
				} catch (\Illuminate\Database\QueryException $ex) {
					$returnData = array('success' => config('messages.message.savedError'));
				}
			}
		}

		//echo '<pre>';print_r($returnData); die;
		return response()->json(['returnData' => $returnData]);
	}

	/**
	 * EDIT CUSTOMER  EMAIL DETAILS
	 * Date : 09-01-2018
	 *
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function editCustomerEmailAddresses($customer_id, $customer_email_id)
	{

		global $models, $customer;

		$returnData = $newPostData = array();

		$getCustomerEmailsDetail = DB::table('customer_email_addresses')
			->leftJoin('customer_master', 'customer_master.customer_id', '=', 'customer_email_addresses.customer_id')
			->where('customer_email_addresses.customer_id', '=', $customer_id)
			->where('customer_email_addresses.customer_email_id', '=', $customer_email_id)
			->select('customer_master.customer_name', 'customer_email_addresses.*')
			->first();

		return response()->json(['getDetail' => $getCustomerEmailsDetail]);
	}

	/**
	 * UPDATE CUSTOMER  EMAIL DETAILS
	 * Date : 09-01-2018
	 *
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function updateCustomerEmailAddress(Request $request)
	{

		global $models, $customer;

		$returnData = $newPostData = array();

		if ($request->isMethod('post') && !empty($request['data']['formData'])) {

			//parse searlize data
			parse_str($request['data']['formData'], $newPostData);

			$customer_id       = !empty($newPostData['customer_id']) ? $newPostData['customer_id'] : '0';
			$customer_email_id = !empty($newPostData['customer_email_id']) ? $newPostData['customer_email_id'] : '0';

			if (empty($newPostData['customer_email'])) {
				$returnData = array('error' => config('messages.message.customerEmail1Required'));
			} else if (empty($newPostData['customer_email_type'])) {
				$returnData = array('error' => config('messages.message.customerEmailType'));
			} else if (!empty($customer->validateCustomerEmailTypes($customer_id, $newPostData['customer_email_type'], $customer_email_id))) {
				$returnData = array('error' => config('messages.message.CustomerPrimaryMailError'));
			} else if (empty($newPostData['customer_email_status'])) {
				$returnData = array('error' => config('messages.message.customerEmailStatus'));
			} else if (!empty($newPostData['customer_email']) && !$customer->validateCustomerEmailAddresses($newPostData['customer_email'], $customer_id, $customer_email_id)) {
				$returnData = array('error' => config('messages.message.customerEmailExist'));
			} else {

				//Unsetting the variable from request data
				$newPostData = $models->unsetFormDataVariables($newPostData, array('_token', 'customer_id', 'customer_email_id'));

				try {
					if (DB::table('customer_email_addresses')->where('customer_email_addresses.customer_id', '=', $customer_id)->where('customer_email_addresses.customer_email_id', '=', $customer_email_id)->update($newPostData)) {
						$error = '1';
						$returnData = array('success' => config('messages.message.customerUpdated'));
					} else {
						$returnData = array('success' => config('messages.message.savedNoChange'));
					}
				} catch (\Illuminate\Database\QueryException $ex) {
					$returnData = array('success' => config('messages.message.updatedError'));
				}
			}
		}
		return response()->json(['returnData' => $returnData]);
	}

	/**
	 * DELETE CUSTOMER EMAIL DETAIL
	 * Date : 09-01-2018
	 *
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function deleteCustomerEmailAddress(Request $request)
	{

		$returnData = array();

		if ($request->isMethod('post')) {
			if (!empty($request['data']['id'])) {
				try {
					$customer = DB::table('customer_email_addresses')->where('customer_email_addresses.customer_email_id', $request['data']['id'])->delete();
					$returnData = array('success' => config('messages.message.customerDeleted'));
				} catch (\Illuminate\Database\QueryException $ex) {
					$returnData = array('error' => "Cannot delete or update a parent row: a foreign key constraint fails!");
				}
			} else {
				$returnData = array('error' => config('messages.message.customerNotDeleted'));
			}
		}
		return response()->json(['returnData' => $returnData]);
	}

	/**
	 * HOLD CUSTOMER DETAIL
	 * Created By : Praveen Singh
	 * Created On : 04-June-2019
	 */
	public function holdCustomer(Request $request)
	{

		global $models, $order, $customer;

		$error          = '0';
		$message        = config('messages.message.error');
		$data           = '';
		$formData       = array();

		try {

			//Starting transaction
			DB::beginTransaction();

			//Saving record in table
			if (!empty($request->formData) && $request->isMethod('post')) {

				//Parsing the form Data
				parse_str($request->formData, $formData);

				if (empty($formData['chd_customer_id'])) {
					$message = config('messages.message.error');
				} else if (empty($formData['chd_customer_status'])) {
					$message = config('messages.message.error');
				} else if (empty($formData['chd_hold_description'])) {
					$message = config('messages.message.holdDescErrorRequired');
				} else if (empty($formData['chd_hold_date'])) {
					$message = config('messages.message.holdDateErrorRequired');
				} else if (empty($formData['chd_hold_by'])) {
					$message = config('messages.message.holdByErrorRequired');
				} else {
					//Updating Customer Detail
					if (DB::table('customer_master')->where('customer_id', $formData['chd_customer_id'])->update(['customer_master.customer_status' => $formData['chd_customer_status']])) {

						//Unsetting the variable from request data
						$formData = $models->unsetFormDataVariables($formData, array('_token', 'chd_customer_status'));

						//Saving the Order data in Order Master
						$formData['chd_hold_date'] = $models->add_current_time_in_date($formData['chd_hold_date']);
						if (DB::table('customer_hold_dtl')->insertGetId($formData)) {

							//Holding all order which is in booked Stage
							$order->holdAllOrderOfCustomer($formData);

							//Success Message
							$error = '1';
							$message = config('messages.message.holdSuccess');

							//Committing the queries
							DB::commit();
						}
					} else {
						$error = '1';
						$message = config('messages.message.savedNoChange');
					}
				}
			}
		} catch (\Exception $e) {
			$message = config('messages.message.holdError');
		}

		return response()->json(array('error' => $error, 'message' => $message, 'data' => $data));
	}

	/**
	 * HOLD CUSTOMER DETAIL
	 * Created By : Praveen Singh
	 * Created On : 04-June-2019
	 */
	public function unholdCustomer(Request $request)
	{

		global $models, $order, $customer;

		$error           = '0';
		$message         = config('messages.message.unHoldError');
		$data            = '';
		$formData        = array();

		try {

			//Starting transaction
			DB::beginTransaction();

			//Saving record in table
			if (!empty($request->all()) && $request->isMethod('post')) {

				//Parsing the form Data
				$formData = $request->all();

				if (empty($formData['chd_customer_id'])) {
					$message = config('messages.message.error');
				} else if (empty($formData['chd_customer_status'])) {
					$message = config('messages.message.error');
				} else {
					//Updating Customer Detail
					if (DB::table('customer_master')->where('customer_id', $formData['chd_customer_id'])->update(['customer_master.customer_status' => $formData['chd_customer_status']])) {

						//Unholding all order which is in hold Stage
						$order->unHoldAllOrderOfCustomer($formData['chd_customer_id'], '1');

						//Success Message
						$error = '1';
						$message = config('messages.message.unHoldSuccess');

						//Committing the queries
						DB::commit();
					} else {
						$error = '1';
						$message = config('messages.message.savedNoChange');
					}
				}
			}
		} catch (\Exception $e) {
			$message = config('messages.message.unHoldError');
		}

		return response()->json(array('error' => $error, 'message' => $message, 'data' => $data));
	}

	/**
	 * GETTING CUSTOMER HOLD DETAIL
	 * Created By : Praveen Singh
	 * Created On : 06-June-2019
	 */
	public function getHoldCustomerDtl(Request $request)
	{

		global $models, $customer;

		$error     = '0';
		$message   = config('messages.message.unHoldError');
		$data      = '';
		$formData  = $returnData = array();

		try {
			//Saving record in table
			if (!empty($request->chd_customer_id) && $request->isMethod('post')) {

				$returnData = DB::table('customer_hold_dtl')
					->where('customer_hold_dtl.chd_customer_id', $request->chd_customer_id)
					->orderBy('customer_hold_dtl.chd_customer_id', 'DESC')
					->get()
					->toArray();

				//Format the date time
				$models->formatTimeStampFromArray($returnData, DATETIMEFORMAT);
			}
		} catch (\Exception $e) {
			$message = config('messages.message.unHoldError');
		}

		return response()->json(array('error' => $error, 'message' => $message, 'customerOnHoldList' => $returnData));
	}
}
