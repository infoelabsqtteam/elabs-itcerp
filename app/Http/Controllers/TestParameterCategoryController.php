<?php

namespace App\Http\Controllers;
use App\Models;
use Illuminate\Http\Request;
use App\Http\Requests;
use Auth;
use App\TestParameterCategory;
use Validator;
use Route;
use DB;

class TestParameterCategoryController extends Controller
{
	/**
	 * protected Variable.
	 */
	protected $auth;
	
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
       global $models,$testParameterCategory;
	   $testParameterCategory = new TestParameterCategory();
	   $models = new Models();
	   $this->middleware('auth'); 
		$this->middleware(function ($request, $next) {
            $this->session = Auth::user();
			parent::__construct($this->session);
			//Checking current request is allowed or not
			$allowedAction = array('index','navigation');
			$actionData    = explode('@',Route::currentRouteAction());
			$action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])): '0';			
			if(defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action,$allowedAction)){
				return redirect('dashboard')->withErrors('Permission Denied!');
			}
            return $next($request);
		 });
    }	
   
	/************************************
	* Description : display blade file view/tests/test_parameter_categories
	* Date        : 01-03-17
	* Author      : nisha
	* Parameter   : 
	* @return     : 
	************************************/
	public function index(){
		$user_id            = defined('USERID') ? USERID : '0';
        $division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';		
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';		
        $equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';
		
		return view('master.test_parameter_categories.index',['title' => 'Test Parameter Categories','_test_parameter_categories' => 'active','user_id' => $user_id,'division_id' => $division_id,'equipment_type_ids' => $equipment_type_ids]);
	}
	
	
	public function parameterCategoryTreeView(){
        return view('master.test_parameter_categories.parameter_tree_view.index');
    }
	
   public function getParameterCategoryTree(){
      
      global $testParameterCategory;				
      $parameterCategoriesTree = $testParameterCategory->categoryTree();		
      return response()->json(['parameterCategoriesTree' =>$parameterCategoriesTree]);	
   }
    
   public function getParameterCategoryTreeByDeparment($product_category_id){
      global $testParameterCategory;				
      $parameterCategoriesTree = $testParameterCategory->categoryTreeByCategoty($product_category_id);		
      return response()->json(['parameterCategoriesTree' =>$parameterCategoriesTree]);	
   }
	
	/************************************
	* Description : display blade file view/tests/test_parameter_categories
	* Date        : 01-03-17
	* Author      : nisha
	* Parameter   : 
	* @return     : 
	************************************/
	public function getCategoryTreePopup(){
		$categories = TestParameterCategory::where('parent_id', '=', 0)->get();
		return view('master.test_parameter_categories.categoryTree',compact('categories'));
	}

	//autogenerate code
	public function getAutoGeneratedCode(Request $request){
		global $models;
		$prefix=!empty(config('messages.message.paraCatPrefix'))?config('messages.message.paraCatPrefix'):'PARAC';
		$code=$models->generateCode($prefix,'test_parameter_categories','test_para_cat_code','test_para_cat_id');   //prefix,tableName,fieldName,primaryKey						  
		return response()->json(['uniqueCode' =>$code]);		
	}
	
	/************************************
	* Description : create new test_parameter_category
	* Date        : 01-03-17
	* Author      : nisha
	* Parameter   : \Illuminate\Http\Request  $request
	* @return     : \Illuminate\Http\Response
	************************************/
	public function createTestParameterCat(Request $request){
		global $testParameterCategory;
		$returnData = array();
		if ($request->isMethod('post')) {
			if(!empty($request['data']['formData'])){
				
				//pasrse searlize data 
				$newPostData = array();
				parse_str($request['data']['formData'], $newPostData);
				
				if(empty($newPostData['test_para_cat_code'])){
					$returnData = array('error' => config('messages.message.categoryCodeRequired'));
				}else if(empty($newPostData['test_para_cat_name'])){
					$returnData = array('error' => config('messages.message.categoryNameRequired'));
				}else if(empty($newPostData['test_para_cat_print_desc'])){
					$returnData = array('error' => config('messages.message.categoryDescRequired'));
				}else if(empty($newPostData['product_category_id'])){
					$returnData = array('error' => config('messages.message.productCategoryIdRequired'));
				}else{														
					if(!empty($newPostData['parent_id'])){
						$level = $testParameterCategory->getCategoryLevel($newPostData['parent_id']);
						$newPostData['level']=$level+1;
					}else{
						$newPostData['level']=0;
					}  
					try{
						// check if test_parameter_category already exist or not 
						if(empty($this->isCatExist($newPostData['test_para_cat_code']))){
							$newPostData['category_sort_by'] = $testParameterCategory->getCategorySortNumber($newPostData['product_category_id']);
							
							if(empty($this->isCatNameExist($newPostData['test_para_cat_name'],$newPostData['product_category_id']))){
								 $created = TestParameterCategory::create([
									'test_para_cat_code' 		=> $newPostData['test_para_cat_code'],
									'test_para_cat_name' 		=> $newPostData['test_para_cat_name'],
									'test_para_cat_print_desc' 	=> $newPostData['test_para_cat_print_desc'],
									'level' 					=> $newPostData['level'],
									'category_sort_by' 		    => $newPostData['category_sort_by'],
									'parent_id' 				=> !empty($newPostData['parent_id']) ? $newPostData['parent_id'] : '0',
									'product_category_id' 		=> $newPostData['product_category_id'],
									'created_by' 				=> USERID,
									'status' 			    => !empty($newPostData['status']) ? $newPostData['status'] : '1',

								   ]);
								
								//check if test_parameter_category created add data in test_parameter_categories table
								if($created->id){ 
									$returnData = array('success' => config('messages.message.categorySaved'));
								}else{
									$returnData = array('error' => config('messages.message.categoryNotSaved'));
								}
							}else{
								$returnData = array('error' => config('messages.message.paraCatAndParentExist'));	
							}
						}else{
							$returnData = array('error' => config('messages.message.parameterNameExist'));
						}
					 }catch(\Illuminate\Database\QueryException $ex){ 
						$returnData = array('error' => config('messages.message.parameterNameExist'));
					} 
				}
			}else{
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		}else{
			$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
		} 
		return response()->json($returnData);		
    }
	
	/************************************
	 * Description : isCatExist used to check the test_parameter_category duplicate entry by category code
	 * Date        : 01-09-17
	 * Author      : nisha
	 * Parameter   : $test_para_cat_code (category code)
	 * @return     : \Illuminate\Http\Response
	 ************************************/
    public function isCatExist($test_para_cat_code) { 
		if(!empty($test_para_cat_code)){
			$data = DB::table('test_parameter_categories')
						->where('test_parameter_categories.test_para_cat_code', '=', $test_para_cat_code)
						->first(); 
			if(@$data->test_para_cat_id){
				return $data->test_para_cat_id;
			}else{
				return false;
			}
		}else{
			return false;
		}
	} 
	/************************************
	 * Description : isCatNameExist used to check the test_parameter_category duplicate entry for category name and parent cat
	 * Date        : 01-09-17
	 * Author      : nisha
	 * Parameter   : $test_para_cat_code (category code)
	 * @return     : \Illuminate\Http\Response
	 ************************************/
	public function isCatNameExist($test_para_cat_name,$product_category_id) { 
		if(!empty($test_para_cat_name)){
			$data = DB::table('test_parameter_categories')
						->where('test_parameter_categories.test_para_cat_name', '=', $test_para_cat_name)
						->where('test_parameter_categories.product_category_id', '=', $product_category_id)
						->first(); 
			if(@$data->test_para_cat_id){
				return $data->test_para_cat_id;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
	
	/************************************
	 * Description : Get list of all records from test_parameter_categories table and display on page load
	 * Date        : 01-09-17
	 * Author      : nisha
	 * Parameter   : 
	 * @return     : \Illuminate\Http\Response
	 ************************************/
    public function getTestParameterCatList($parent_id){
		
		global $models;
		
		$dataObj = DB::table('test_parameter_categories')
					->leftjoin('test_parameter_categories as category','test_parameter_categories.parent_id','=','category.test_para_cat_id')
					->join('product_categories', 'product_categories.p_category_id', '=', 'test_parameter_categories.product_category_id')
					->join('users', 'test_parameter_categories.created_by', '=', 'users.id')				   
					->select('test_parameter_categories.*','category.test_para_cat_name as parent_cat','product_categories.p_category_name','users.name as createdBy');
					if(!empty($parent_id)){
						$dataObj->where('test_parameter_categories.parent_id','=',$parent_id)
								->orwhere('test_parameter_categories.test_para_cat_id','=',$parent_id);
					}
		$data =	$dataObj->where('test_parameter_categories.status',1)->get();

		$models->formatTimeStampFromArray($data,DATETIMEFORMAT);
		return response()->json(['testParameterCategories' => $data]);
    }   	
	  
	/**
     * get test para categories using multisearch.
     * Date : 20-04-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
     public function getTestParameterCatListMultiSearch(Request $request){
		
	    global $models;
		
		$searchArry = $request['data']['formData'];
		
		$testParaCategory = DB::table('test_parameter_categories')
					->leftjoin('test_parameter_categories as category','test_parameter_categories.parent_id','=','category.test_para_cat_id')
					->join('product_categories', 'product_categories.p_category_id', '=', 'test_parameter_categories.product_category_id')
					->join('users', 'test_parameter_categories.created_by', '=', 'users.id')				   
					->select('test_parameter_categories.*','category.test_para_cat_name as parent_cat','product_categories.p_category_name','users.name as createdBy');
					
			if(!empty($searchArry['search_para_cat_code'])){
				$testParaCategory->where('test_parameter_categories.test_para_cat_code','like','%'.$searchArry['search_para_cat_code'].'%');
			}
			if(isset($searchArry['search_level'])){
				$testParaCategory->where('test_parameter_categories.level','like','%'.$searchArry['search_level'].'%');
			}
			if(!empty($searchArry['search_para_cat_name'])){
				$testParaCategory->where('test_parameter_categories.test_para_cat_name','like','%'.$searchArry['search_para_cat_name'].'%');
			}
			if(!empty($searchArry['search_para_cat_desc'])){
				$testParaCategory->where('test_parameter_categories.test_para_cat_print_desc','like','%'.$searchArry['search_para_cat_desc'].'%');
			}
			if(!empty($searchArry['search_parameter_category'])){
				$testParaCategory->where('category.test_para_cat_name','like','%'.$searchArry['search_parameter_category'].'%');
			}
			/*food category*/
			if(!empty($searchArry['search_parent_category'])){
				$testParaCategory->where('product_categories.p_category_name','like','%'.$searchArry['search_parent_category'].'%');
			}
			if(!empty($searchArry['search_p_category_name'])){
				$testParaCategory->where('product_categories.p_category_name','like','%'.$searchArry['search_p_category_name'].'%');
			}
			if(!empty($searchArry['search_created_by'])){
				$testParaCategory->where('users.name','like','%'.$searchArry['search_created_by'].'%');
			}
			if(!empty($searchArry['search_status'])){
				$testParaCategory->where('test_parameter_categories.status',$searchArry['search_status']);
			}

			if(!empty($searchArry['search_created_at'])){
				$testParaCategory->where('test_parameter_categories.created_at','like','%'.$searchArry['search_created_at'].'%');
			}
			if(!empty($searchArry['search_updated_at'])){
				$testParaCategory->where('test_parameter_categories.updated_at','like','%'.$searchArry['search_updated_at'].'%');
			}
			
		$test_parameter_category=$testParaCategory->get();
		$models->formatTimeStampFromArray($test_parameter_category,DATETIMEFORMAT);
		
		return response()->json(['testParameterCategories' => $test_parameter_category]);
    }
    
	 /************************************
	 * Description : Show the form for editing the Test Parameter category 
	 * Date        : 01-09-17
	 * Author      : nisha
	 * Parameter   : int  $request['data']['id']
	 * @return     : \Illuminate\Http\Response
	 ************************************/
    public function editTestParameterCatData(Request $request){
		$returnData = array();
		if ($request->isMethod('post') && !empty($request['data']['id'])) {
			$testParameterCategoryData = DB::table('test_parameter_categories')->where('test_parameter_categories.test_para_cat_id', '=', $request['data']['id'])->first();				
			if($testParameterCategoryData->test_para_cat_id){
				$parentCategoryData = DB::table('test_parameter_categories')
									->where('test_parameter_categories.test_para_cat_id', '=', $testParameterCategoryData->parent_id)
									->first();	
				$returnData = array('responseData' => $testParameterCategoryData,'parentResponseData'=> $parentCategoryData);				
			}else{
				$returnData = array('error' => config('messages.message.noRecordFound'));
			}
		}else{
			$returnData = array('error' => config('messages.message.provideAppData'));			
		}
		return response()->json(['returnData' => $returnData]);		
    }

	 /************************************
	 * Description : Update the specified resource in storage
	 * Date        : 01-09-17
	 * Author      : nisha
	 * Parameter   : \Illuminate\Http\Request  $request (int $request['data']['id'])
	 * @return     : \Illuminate\Http\Response
	 ************************************/
    public function updateTestParameterCatData(Request $request){
		global $testParameterCategory;
        $returnData = array();
		
		if ($request->isMethod('post') && !empty($request['data']['formData'])){
			
			//pasrse searlize data 
			$newPostData = array();
			parse_str($request['data']['formData'], $newPostData);
					
			if(empty($newPostData['test_para_cat_name'])){
				$returnData = array('error' => config('messages.message.categoryNameRequired'));
			}else if(empty($newPostData['test_para_cat_print_desc'])){
				$returnData = array('error' => config('messages.message.categoryDescRequired'));
			}else if(!empty($newPostData['parent_id']) && $newPostData['test_para_cat_id']==$newPostData['parent_id']){					
					$returnData = array('error' => config('messages.message.ParentChildSame'));
			}else{ 
					//if parameter selecetd
					if(!empty($newPostData['parent_id'])){
							$level=$testParameterCategory->getCategoryLevel($newPostData['parent_id']);
							$newPostData['level']=$level+1;
					}else{
						$newPostData['level']=0;
					} 
				//check parameter name and parameter category should be unique		
				try{					
					if(!empty($newPostData['test_para_cat_id'])){					
						$updated = DB::table('test_parameter_categories')
							->where('test_para_cat_id',$newPostData['test_para_cat_id'])
							->update([
								 'test_para_cat_name' 		=> $newPostData['test_para_cat_name'],
								 'test_para_cat_print_desc' => $newPostData['test_para_cat_print_desc'],
								 'parent_id' 			    => !empty($newPostData['parent_id']) ? $newPostData['parent_id'] : '0',
								 'status' 			    => !empty($newPostData['status']) ? $newPostData['status'] : '1',
							]);
						//check if data updated in test_parameter_categories table
						if($updated){
							$returnData = array('success' => config('messages.message.categoryUpdated'));
						}else{
							$returnData = array('success' => config('messages.message.savedNoChange'));
						}
					}else{
						$returnData = array('error' =>  config('messages.message.categoryUpdated'));
					}					
				}catch(\Illuminate\Database\QueryException $ex){ 
				   $returnData = array('error' => config('messages.message.categoryExist'));
				}			
			}			
		}else{
			$returnData = array('error' => config('messages.message.dataNotFound'));
		}
		
		return response()->json($returnData);
    }
	
	
	public function categoryExist($test_para_cat_name) { 
		if(!empty($test_para_cat_name)){
			$data = DB::table('test_parameter_categories')
						->where('test_parameter_categories.test_para_cat_name', '=', $test_para_cat_name)
						->first(); 
			if(@$data->test_para_cat_id){
				return $data->test_para_cat_id;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function deleteTestParameterCatData(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')){
			if(!empty($request['data']['id'])){
				try { 
					$test_parameter_category = DB::table('test_parameter_categories')->where('test_para_cat_id', $request['data']['id'])->delete();
					if($test_parameter_category){
						$returnData = array('success' => config('messages.message.categoryDeleted'));
					}else{
						$returnData = array('error' => config('messages.message.categoryNotDeleted'));					
					}
				}catch(\Illuminate\Database\QueryException $ex){ 
				   $returnData = array('error' => config('messages.message.foreignKeyDeleteError'));
				}
			}else{
				$returnData = array('error' => config('messages.message.noRecordFound'));
			}
		}
		return response()->json($returnData);
    }
	
	
	/**
	* upload parameters csv data
	*
	* @param  int  $id
	* @return \Illuminate\Http\Response
	*/
    public function uploadParameterCategoryCSV(Request $request){
		global $models,$testParameterCategory; 
		$prefix=!empty(config('messages.message.paraCatPrefix'))?config('messages.message.paraCatPrefix'):'PARAC';

		$error 		= '0';
        $message 	= config('messages.message.error');
		$proData = array();
		$allowedFormat = array('application/vnd.ms-excel','application/csv','text/csv');
		$allowedFields = array('test_para_cat_name*','test_para_cat_print_desc','parameter_parent_category','product_section*');
		
		if(empty($_FILES['testParameterFile']['name'])){			 
			 $message = config('messages.message.fileNotSelected');	
		}else if(in_array($_FILES['testParameterFile']['type'],$allowedFormat) && $_FILES['testParameterFile']['size'] > '0'){
			$productTestData = $models->csvToArray($_FILES['testParameterFile']['tmp_name']);
			
			//check csv file valid or not
			foreach($allowedFields as $headerVal){
				if(!in_array($headerVal,$productTestData['header'])){
					$headerMsgArr[] = $headerVal;              //invalid columns array
				}
			}	
			
			if(!empty($headerMsgArr)){			
				$message = config('messages.message.invalidFileCoulmn');
			}else{ 
				if(!empty($productTestData['data'])){
					foreach($productTestData['data'] as $key=>$data){  
						
						$proData[$key]['test_para_cat_name'] = !empty($data[0]) ? trim($data[0]) : ''; 
						$proData[$key]['test_para_cat_print_desc'] = !empty($data[1]) ? trim($data[1]) : $proData[$key]['test_para_cat_name'];
						$proData[$key]['parent_id'] = !empty($data[2])? $models->getTableUniqueIdByName('test_parameter_categories','test_para_cat_name',$data[2],'test_para_cat_id') :'0';
						$proData[$key]['product_category_id'] = !empty($data[3])? $models->getTableUniqueIdByName('product_categories','p_category_name',$data[3],'p_category_id') :'0';
						$proData[$key]['created_by'] = \Auth::user()->id;
						
						if(!empty($proData[$key]['parent_id'])){
							$proData[$key]['product_category_id'] = $models->getTableUniqueIdByName('test_parameter_categories','test_para_cat_id',$proData[$key]['parent_id'],'product_category_id');
							$level = $testParameterCategory->getCategoryLevel($proData[$key]['parent_id']);
							$proData[$key]['level'] = $level+1;
						}else{ 	
							$proData[$key]['level'] = 0;
						}
						
						//validations
						$rowNum = $key+2;
						if(empty($proData[$key]['test_para_cat_name']) || empty($proData[$key]['product_category_id'])){
							$messageArr[] = 'Error in row '.$rowNum;
						}
						if(!empty($this->isCatNameExist($proData[$key]['test_para_cat_name'],$proData[$key]['product_category_id']))){
							$messageArr[] = 'Duplicate record at '.$rowNum;
						} 
					}  	
					if(!empty($messageArr)){
						$message = implode(',',$messageArr); 
					}else{
						if(!empty($proData)){	 	
							foreach($proData as $key=>$newPostData){
								$newPostData['test_para_cat_code'] = $models->generateCode($prefix,'test_parameter_categories','test_para_cat_code','test_para_cat_id');     //autogenerate product code
								$newPostData['category_sort_by'] = $testParameterCategory->getCategorySortNumber($newPostData['product_category_id']);
								if(!empty($newPostData)){
									try{	
										$insertedId = DB::table('test_parameter_categories')->insertGetId($newPostData);
									 }catch(\Illuminate\Database\QueryException $ex){ 
										//$returnData = array('error' => config('messages.message.parameterNameExist'));
									}  
								}
							} 					
							$error 		= '1';
							$message 	= config('messages.message.success');
						}else{			
							$message 	= config('messages.message.noRecordFound');
						}
					}
				}else{					
					$message 	= config('messages.message.provideAppData');
				}
			}
		}else{
			$message = config('messages.message.invalidFileType');
		}
        
		return response()->json(array('error' => $error, 'message' => $message));		
    }
	
	/************************************
	 * Description : Get list of all records from test_parameter_categories table and display on page load
	 * Date        : 01-09-17
	 * Author      : nisha
	 * Parameter   : 
	 * @return     : \Illuminate\Http\Response
	 ************************************/
    public function DownloadParametersExcel($parent_id=0){
		
		global $models;
		$responseData=$filterData = array();
		$dataObj = DB::table('test_parameter_categories')
					->leftjoin('test_parameter_categories as category','test_parameter_categories.parent_id','=','category.test_para_cat_id')
					->leftjoin('test_parameter','test_parameter.test_parameter_category_id','=','test_parameter_categories.test_para_cat_id')
					->leftjoin('test_parameter_equipment_types','test_parameter_equipment_types.test_parameter_id','=','test_parameter.test_parameter_id')
					->leftjoin('equipment_type','equipment_type.equipment_id','test_parameter_equipment_types.equipment_type_id')
					->join('product_categories', 'product_categories.p_category_id', '=', 'test_parameter_categories.product_category_id')
					->join('users', 'test_parameter_categories.created_by', '=', 'users.id')				   
					->select('test_parameter.test_parameter_code','test_parameter.test_parameter_name','test_parameter.test_parameter_print_desc','test_parameter.created_at as created_on','test_parameter.updated_at as updated_on','test_parameter_categories.test_para_cat_name','category.test_para_cat_name as parent_cat','product_categories.p_category_name','users.name as createdBy','test_parameter.cost_price','test_parameter.selling_price','equipment_type.equipment_name');
					if(!empty($parent_id)){
						$dataObj->where('test_parameter_categories.parent_id','=',$parent_id)
								->orwhere('test_parameter_categories.test_para_cat_id','=',$parent_id);
					}
		$data =	$dataObj->get();

		$models->formatTimeStampFromArray($data,DATETIMEFORMAT);
		
		$dataObjList          		= !empty($data) ? json_decode(json_encode($data),true) : array();

		$filterData['heading'] 			= 'All Parameters List :';
		$filterData['file_name'] 		= 'Parameters List';
		//$responseData 		= $models->unsetFormDataVariablesArray($dataObjList,array('test_parameter_category_id'.'test_parameter_id','test_para_cat_id','test_para_cat_code','test_para_cat_print_desc','parent_id','level','category_sort_by','p_category_name','product_category_id','parent_cat'));	

		$responseData['tableHead'] 		= !empty($dataObjList) ? array_keys(end($dataObjList)) : array();
		$responseData['tableBody'] 		= !empty($dataObjList) ? $dataObjList : array();
	
		echo'<pre>';print_r($responseData); die;
			return $models->downloadExcel($responseData,$filterData);
    }   	
}
