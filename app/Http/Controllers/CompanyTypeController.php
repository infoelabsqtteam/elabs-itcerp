<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models;
use App\Http\Requests;
use Auth;
use App\CompanyType;
use Validator;
use Route;
use DB;

class CompanyTypeController extends Controller
{
	 /**
	 * protected Variable.
	 */
	 protected $auth;
		
	/**
     * Create a new controller instance.
     ** @return void
     */
    public function __construct()
    {
		global $models;
		$models = new Models();
		$this->middleware('auth');
		$this->middleware(function ($request, $next) {
			$this->session = Auth::user();
			parent::__construct($this->session);
			//Checking current request is allowed or not
			$allowedAction = array('index','navigation');
			$actionData    = explode('@',Route::currentRouteAction());
			$action        = !empty($actionData[1]) ? trim(strtolower($actionData[1])): '0';			
			if(defined('NOTALlOWEDTONAVIGATE') && empty(NOTALlOWEDTONAVIGATE) && in_array($action,$allowedAction)){
				return redirect('dashboard')->withErrors('Permission Denied!');
			}
			return $next($request);
		});
    }	
    /**
     * Display a listing of the resource.
     ** @return \Illuminate\Http\Response
     */
    public function index()
    {
		$user_id            = defined('USERID') ? USERID : '0';
		$division_id   	    = defined('DIVISIONID') ? DIVISIONID : '0';		
		$department_ids     = defined('DEPARTMENT_IDS') ? DEPARTMENT_IDS : '0';
		$role_ids           = defined('ROLE_IDS') ? ROLE_IDS : '0';		
		$equipment_type_ids = defined('EQUIPMENT_TYPE_IDS') ? EQUIPMENT_TYPE_IDS : '0';
		
        return view('master.customer_master.company_type.index',['title' => 'Company Type','_company_type' => 'active','user_id' => $user_id,'division_id' => $division_id,'equipment_type_ids' => $equipment_type_ids]);
    }

	//autogenerate code
	public function getAutoGeneratedCode(Request $request)
    {
		global $models;
		$prefix=!empty(config('messages.message.companyTypePrefix'))?config('messages.message.companyTypePrefix'):'COM';
		$code=$models->generateCode($prefix,'customer_company_type','company_type_code','company_type_id');						  
		return response()->json(['uniqueCode' =>$code]);		
	}
	
    /** create new company
     *  Show the form for creating a new resource.
     ** @return \Illuminate\Http\Response
     */
    public function createCompanyType(Request $request)
    {	
		$returnData = array(); 
 		if ($request->isMethod('post')) {
			if(!empty($request['data']['formData'])){  
				//pasrse searlize data 
				$newPostData = array(); 
				parse_str($request['data']['formData'], $newPostData);  
				unset($newPostData['_token']);
				if(empty($newPostData['company_type_code']))
				{
					$returnData = array('error' => config('messages.message.companyTypeCodeRequired'));
				}else if(empty($newPostData['company_type_name'])){
					$returnData = array('error' => config('messages.message.companyTypeNameRequired'));
				}else{ 
					// check if company already exist or not 
					if($this->isCompanyExist($newPostData['company_type_code'],$newPostData['company_type_name']) == 0){ 
						  $company_type_name = strtolower($newPostData['company_type_name']);
						  $created = CompanyType::create([
							'company_type_code' => $newPostData['company_type_code'],
							'company_type_name' => ucwords($company_type_name),
							'created_by' => \Auth::user()->id,
						   ]);
						//check if users created add data in user detail
						if($created->id){ 
							$returnData = array('success' => config('messages.message.companyTypeSaved'));
						}else{
							$returnData = array('error' => config('messages.message.companyTypeNotSaved'));
						}
					}else{
						$returnData = array('error' => config('messages.message.companyTypeExist'));
					}
				}
			}else{
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		}else{
			$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
		} 
		return response()->json($returnData); 		
    }

    /**
     * Get list of companys on page load.
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function getCompanyType()
    { 
		global $models;
		$companys = DB::table('customer_company_type')
					->join('users', 'customer_company_type.created_by', '=', 'users.id')
					->select('customer_company_type.*','users.name as createdBy')
					->get();	
		$models->formatTimeStampFromArray($companys,DATETIMEFORMAT);
		return response()->json([
		   'companysList' => $companys,
		]);
    }   


    /**
     * isCompanyExist Is used to check the company duplicate entry by company_type_code
     * Date : 01-03-17
	 * Author : nisha
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function isCompanyExist($company_type_code,$company_type_name) 
    { 
		if(!empty($company_type_code)){
			$companyData = DB::table('customer_company_type')
						->where('customer_company_type.company_type_code', '=', $company_type_code)
						->orwhere('customer_company_type.company_type_name', '=', $company_type_name)
						->first(); 
			if(@$companyData->company_type_id){
				return $companyData->company_type_id;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
	
    
    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function editCompanyType(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')) {
			if(!empty($request['data']['id'])){
				$companyData = DB::table('customer_company_type')
								->select('customer_company_type.*')
								->where('customer_company_type.company_type_id', '=', $request['data']['id'])
								->first();
				
				if($companyData->company_type_id){
					$returnData = array('responseData' => $companyData);				
				}else{
					$returnData = array('error' => config('messages.message.noRecordFound'));
				}
			}else{
				$returnData = array('error' => config('messages.message.dataNotFoundToSaved'));
			}
		}else{
				$returnData = array('error' => config('messages.message.provideAppData'));			
		}
		return response()->json($returnData);	
    }
    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function updateCompanyType(Request $request)
    {
        $returnData = array();
		if ($request->isMethod('post')) {
			if(!empty($request['data']['formData'])){   
				//pasrse searlize data 
				$newPostData = array();
				parse_str($request['data']['formData'], $newPostData);   //print_r($newPostData); die;
				if(empty($newPostData['company_type_id']))
				{
					$returnData = array('error' => config('messages.message.companyTypeCodeRequired'));
				}else if(empty($newPostData['company_type_name'])){
					$returnData = array('error' => config('messages.message.companyTypeNameRequired'));
				}else{
					$newPostData['company_type_id']=base64_decode($newPostData['company_type_id']);
					$company_type_name = strtolower($newPostData['company_type_name']);
					$updated = DB::table('customer_company_type')->where('company_type_id',$newPostData['company_type_id'])->update([
						'company_type_name' => ucwords($company_type_name),
					   ]);
					//check if data updated in Company table 
                    $returnData = array('success' => config('messages.message.companyTypeUpdated'));					 
				}
			}else{
				$returnData = array('error' =>  config('messages.message.dataNotFound'));
			}
		}else{
			$returnData = array('error' => config('messages.message.dataNotFound'));
		} 
		return response()->json($returnData);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function deleteCompanyType(Request $request)
    {
		$returnData = array();
		if ($request->isMethod('post')){
			if(!empty($request['data']['id'])){
				try { 
					$company = DB::table('customer_company_type')->where('company_type_id', $request['data']['id'])->delete();
					if($company){
						$returnData = array('success' => config('messages.message.companyTypeDeleted'));
					}else{
						$returnData = array('error' => config('messages.message.companyTypeNotDeleted'));					
					}
				}catch(\Illuminate\Database\QueryException $ex){ 
				   $returnData = array('error' => "Cannot delete or update a parent row: a foreign key constraint fails!");
				}
			}else{
				$returnData = array('error' => config('messages.message.noRecordFound'));
			}
		}
		return response()->json($returnData);
    }
}
